This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
common/action/AdminAction.java
common/Arlert.java
common/ContactStatus.java
common/DBConfig.java
common/DiscountType.java
common/FormatMoney.java
common/Gender.java
common/GhnApi.java
common/HikariConnection.java
common/JDBIConnector.java
common/OrderStatus.java
common/PagingUtil.java
common/PasswordUtils.java
common/PaymentMethod.java
common/RoleType.java
common/SendEmail.java
common/UploadUtil.java
common/UserStatus.java
controller/admin/AdminController.java
controller/admin/BrandController.java
controller/admin/CategoryController.java
controller/admin/ContactController.java
controller/admin/CouponController.java
controller/admin/OrderController.java
controller/admin/ProductController.java
controller/admin/SlideController.java
controller/admin/UserController.java
controller/frontend/ActivityLogController.java
controller/frontend/BrandController.java
controller/frontend/CategoryController.java
controller/frontend/ChangePassController.java
controller/frontend/CheckoutController.java
controller/frontend/ContactController.java
controller/frontend/ForgotPassController.java
controller/frontend/HomeController.java
controller/frontend/LoginController.java
controller/frontend/OrderHistoryController.java
controller/frontend/ProductController.java
controller/frontend/ProductDetailController.java
controller/frontend/ProfileController.java
controller/frontend/RegisterController.java
controller/frontend/ResetPasswordController.java
controller/frontend/ShoppingCartController.java
controller/frontend/WishlistController.java
dao/daoimpl/ActivityLogDAOImpl.java
dao/daoimpl/AddressDAOImpl.java
dao/daoimpl/BrandDAOImpl.java
dao/daoimpl/CategoryDAOImpl.java
dao/daoimpl/ContactDAOImpl.java
dao/daoimpl/CouponDAOImpl.java
dao/daoimpl/OrderDAOImpl.java
dao/daoimpl/OtpDAOImpl.java
dao/daoimpl/ProductDAOImpl.java
dao/daoimpl/ProductImageDAOImpl.java
dao/daoimpl/ProductVariantDAOImpl.java
dao/daoimpl/ReviewDAOImpl.java
dao/daoimpl/RoleDAOImpl.java
dao/daoimpl/SlideDAOImpl.java
dao/daoimpl/UserDAOImp.java
dao/daoimpl/WishlistDAOImpl.java
dao/GenericDAO.java
dao/IActivityLogDAO.java
dao/IAddressDAO.java
dao/IBrandDAO.java
dao/ICategoryDAO.java
dao/IContactDAO.java
dao/ICouponDAO.java
dao/IOrderDAO.java
dao/IOtpDAO.java
dao/IProductDAO.java
dao/IProductImageDAO.java
dao/IProductVariantDAO.java
dao/IReviewDAO.java
dao/IRoleDAO.java
dao/ISlideDAO.java
dao/IUserDAO.java
dao/IWishlistDAO.java
exception/UserNotActiveException.java
filter/AutFilter.java
model/ActivityLogModel.java
model/AddressModel.java
model/BaseModel.java
model/BrandModel.java
model/CartModel.java
model/CartModelHelper.java
model/CategoryModel.java
model/ContactModel.java
model/CouponModel.java
model/OrderDetailModel.java
model/OrderModel.java
model/OtpModel.java
model/ProductImageModel.java
model/ProductModel.java
model/ProductVariant.java
model/ReviewModel.java
model/RoleModel.java
model/SlideModel.java
model/UserModel.java
model/WishlistModel.java
service/IBrandService.java
service/ICartService.java
service/ICategoryService.java
service/ICheckoutService.java
service/IContactService.java
service/ICouponService.java
service/impl/BrandServiceImpl.java
service/impl/CartServiceImpl.java
service/impl/CategoryServiceImpl.java
service/impl/CheckoutServiceImpl.java
service/impl/ContactServiceImpl.java
service/impl/CouponServiceImpl.java
service/impl/OrderServiceImpl.java
service/impl/ProductImageServiceImpl.java
service/impl/ProductServiceImpl.java
service/impl/ReviewServiceImpl.java
service/impl/SlideServiceImpl.java
service/impl/UserServiceImpl.java
service/impl/WishlistServiceImpl.java
service/IOrderService.java
service/IProductImageService.java
service/IProductService.java
service/IReviewService.java
service/ISlideService.java
service/IUserService.java
service/IWishlistService.java

================================================================
Files
================================================================

================
File: common/action/AdminAction.java
================
package vn.edu.hcmuaf.fit.myphamstore.common.action;

public class AdminAction {
    public static final String DISPLAY_DETAIL = "displayDetail";
    public static final String DISPLAY = "display";
    public static final String STOP_BUYING = "stopBuying";
    public static final String START_BUYING = "startBuying";
    public static final String ADD = "add";
    public static final String EDIT = "edit";
    public static final String LOCK_USER = "lockUser";
    public static final String UNLOCK_USER = "unlockUser";
    public static final String SEARCH = "search";
    public static final String INSERT = "insert";
    public static final String PENDING = "pending";
    public static final String DONE = "done";
}

================
File: common/Arlert.java
================
package vn.edu.hcmuaf.fit.myphamstore.common;


import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class Arlert {
    public static final String TYPE_SUCCESS = "success";
    public static final String TYPE_ERROR = "danger";
    public static final String TYPE_WARNING = "warning";
    public static final String TYPE_INFO = "info";

    private String message;
    private String type;
}

================
File: common/ContactStatus.java
================
package vn.edu.hcmuaf.fit.myphamstore.common;

public enum ContactStatus {
    PENDING, DONE
}

================
File: common/DBConfig.java
================
package vn.edu.hcmuaf.fit.myphamstore.common;

public class DBConfig {
    public static final String DB_URL = "jdbc:mysql://localhost:3306/myphamstoredb?useSSL=false&serverTimezone=UTC";
    public static final String DB_USER = "root";
    public static final String DB_PASSWORD = "admin";
    public static final String DB_DRIVER = "com.mysql.cj.jdbc.Driver"; // Cập nhật driver đúng
}

================
File: common/DiscountType.java
================
package vn.edu.hcmuaf.fit.myphamstore.common;

public enum DiscountType {
    PERCENTAGE,
    FIXED
}

================
File: common/FormatMoney.java
================
package vn.edu.hcmuaf.fit.myphamstore.common;

import java.text.NumberFormat;
import java.util.Locale;

public class FormatMoney {
    public static String formatCurrency(Double amount) {
        NumberFormat formatter = NumberFormat.getInstance(new Locale("vi", "VN"));
        return formatter.format(amount) + " VNĐ";
    }
    public static String formatCurrency(Integer amount) {
        NumberFormat formatter = NumberFormat.getInstance(new Locale("vi", "VN"));
        return formatter.format(amount) + " VNĐ";
    }
    public static String formatCurrency(Long amount) {
        NumberFormat formatter = NumberFormat.getInstance(new Locale("vi", "VN"));
        return formatter.format(amount) + " VNĐ";
    }

}

================
File: common/Gender.java
================
package vn.edu.hcmuaf.fit.myphamstore.common;

public enum Gender {
    MALE, FEMALE, OTHER
}

================
File: common/GhnApi.java
================
package vn.edu.hcmuaf.fit.myphamstore.common;

public class GhnApi {
    private final String GHN_TOKEN = "20fbd60a-1752-11f0-95d0-0a92b8726859";
    private final String SHOP_ID = "196388";

}

================
File: common/HikariConnection.java
================
package vn.edu.hcmuaf.fit.myphamstore.common;

import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class HikariConnection {
    private static HikariConfig config = new HikariConfig();
    private static HikariDataSource ds;


    static {
        config.setJdbcUrl(DBConfig.DB_URL);
        config.setUsername(DBConfig.DB_USER);
        config.setPassword(DBConfig.DB_PASSWORD);
        config.addDataSourceProperty("cachePrepStmts", "true");
        config.addDataSourceProperty("prepStmtCacheSize", "250");
        config.addDataSourceProperty("prepStmtCacheSqlLimit", "2048");
        config.setDriverClassName(DBConfig.DB_DRIVER);
        config.setMaximumPoolSize(100);
        config.setMinimumIdle(10);
        config.setIdleTimeout(30000);
        config.setConnectionTimeout(30000);

        try {
            Class.forName(DBConfig.DB_DRIVER);
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
            throw new RuntimeException("Không tìm thấy driver JDBC", e);
        }
        ds = new HikariDataSource(config);
    }

    public static HikariDataSource getDataSource() {
        return ds;
    }
}

================
File: common/JDBIConnector.java
================
package vn.edu.hcmuaf.fit.myphamstore.common;

import org.jdbi.v3.core.Jdbi;
import vn.edu.hcmuaf.fit.myphamstore.model.UserModel;

public class JDBIConnector {
    private static Jdbi jdbi;

    static {
        jdbi = Jdbi.create(HikariConnection.getDataSource());
    }
    public static Jdbi getJdbi() {
        return jdbi;
    }



}

================
File: common/OrderStatus.java
================
package vn.edu.hcmuaf.fit.myphamstore.common;

public enum OrderStatus {
    PENDING,
    SHIPPING,
    DELIVERED,
    CANCELLED,
    CONFIRMED
}

================
File: common/PagingUtil.java
================
package vn.edu.hcmuaf.fit.myphamstore.common;

import jakarta.servlet.http.HttpServletRequest;

import java.util.Map;

public class PagingUtil {
    public static Map<String, Object> setPaging(HttpServletRequest request) {
        String keyword = request.getParameter("keyword");
        String orderBy = request.getParameter("orderBy");
        Integer currentPage = Integer.parseInt(request.getParameter("currentPage")==null?"1": request.getParameter("currentPage"));
        Integer pageSize = Integer.parseInt(request.getParameter("pageSize") == null?"5": request.getParameter("pageSize"));
        request.setAttribute("keyword", keyword);
        request.setAttribute("orderBy", orderBy);
        request.setAttribute("currentPage", currentPage);
        request.setAttribute("pageSize", pageSize);

        return null;
    }
}

================
File: common/PasswordUtils.java
================
package vn.edu.hcmuaf.fit.myphamstore.common;


import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

public class PasswordUtils {
    private static final BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
    public static String hashPassword(String plainPassword) {
        return encoder.encode(plainPassword);
    }

    public static boolean verifyPassword(String plainPassword, String hashedPassword) {
        return encoder.matches(plainPassword, hashedPassword);
    }

}

================
File: common/PaymentMethod.java
================
package vn.edu.hcmuaf.fit.myphamstore.common;

public enum PaymentMethod {
    COD,
    VNPAY,
    MOMO,
    BANK
}

================
File: common/RoleType.java
================
package vn.edu.hcmuaf.fit.myphamstore.common;

public class RoleType {
    public static final String ADMIN = "ADMIN";
    public static final String EMPLOYEE = "EMPLOYEE";
    public static final String CUSTOMER = "CUSTOMER";
}

================
File: common/SendEmail.java
================
package vn.edu.hcmuaf.fit.myphamstore.common;
    
    import jakarta.mail.*;
    import jakarta.mail.internet.InternetAddress;
    import jakarta.mail.internet.MimeMessage;
    import lombok.extern.slf4j.Slf4j;
    import vn.edu.hcmuaf.fit.myphamstore.model.AddressModel;
    import vn.edu.hcmuaf.fit.myphamstore.model.CartModelHelper;
    import vn.edu.hcmuaf.fit.myphamstore.model.OrderModel;
    import vn.edu.hcmuaf.fit.myphamstore.model.ProductVariant;

    import java.text.NumberFormat;
    import java.time.format.DateTimeFormatter;
    import java.util.Date;
    import java.util.List;
    import java.util.Locale;
    import java.util.Properties;

    @Slf4j
    public class SendEmail {
        private static final String EMAIL = "hanrepository@gmail.com";
        private static final String PASSWORD = "nfssbtsafpmatbaq";
    
        public static boolean sendEmail(String to, String otp) {
            log.info("Sending email to: {}",to);
            String tieuDe = "Email xác nhận tài khoản";
            String noiDung = "<!DOCTYPE html>\n" +
                    "<html lang=\"en\">\n" +
                    "<head>\n" +
                    "    <meta charset=\"UTF-8\">\n" +
                    "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n" +
                    "    <style>\n" +
                    "        body {\n" +
                    "            font-family: Arial, sans-serif;\n" +
                    "            background-color: #f4f4f4;\n" +
                    "            margin: 0;\n" +
                    "            padding: 0;\n" +
                    "        }\n" +
                    "        .email-container {\n" +
                    "            max-width: 600px;\n" +
                    "            margin: 20px auto;\n" +
                    "            background-color: #ffffff;\n" +
                    "            border: 1px solid #ddd;\n" +
                    "            border-radius: 8px;\n" +
                    "            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n" +
                    "            overflow: hidden;\n" +
                    "        }\n" +
                    "        .email-header {\n" +
                    "            background-color: #007bff;\n" +
                    "            color: #ffffff;\n" +
                    "            text-align: center;\n" +
                    "            padding: 20px;\n" +
                    "        }\n" +
                    "        .email-header h1 {\n" +
                    "            margin: 0;\n" +
                    "            font-size: 24px;\n" +
                    "        }\n" +
                    "        .email-body {\n" +
                    "            padding: 20px;\n" +
                    "            color: #333333;\n" +
                    "        }\n" +
                    "        .email-body p {\n" +
                    "            margin: 10px 0;\n" +
                    "            line-height: 1.6;\n" +
                    "        }\n" +
                    "        .email-body a {\n" +
                    "            display: inline-block;\n" +
                    "            margin-top: 20px;\n" +
                    "            padding: 10px 20px;\n" +
                    "            background-color: #007bff;\n" +
                    "            color: #ffffff;\n" +
                    "            text-decoration: none;\n" +
                    "            border-radius: 5px;\n" +
                    "            font-size: 16px;\n" +
                    "        }\n" +
                    "        .email-body a:hover {\n" +
                    "            background-color: #0056b3;\n" +
                    "        }\n" +
                    "        .email-footer {\n" +
                    "            text-align: center;\n" +
                    "            padding: 10px;\n" +
                    "            font-size: 12px;\n" +
                    "            color: #777;\n" +
                    "            border-top: 1px solid #ddd;\n" +
                    "            background-color: #f9f9f9;\n" +
                    "        }\n" +
                    "    </style>\n" +
                    "</head>\n" +
                    "<body>\n" +
                    "    <div class=\"email-container\">\n" +
                    "        <!-- Header -->\n" +
                    "        <div class=\"email-header\">\n" +
                    "            <h1>Kích hoạt tài khoản</h1>\n" +
                    "        </div>\n" +
                    "\n" +
                    "        <!-- Body -->\n" +
                    "        <div class=\"email-body\">\n" +
                    "            <p>Chào bạn,</p>\n" +
                    "            <p>Cảm ơn bạn đã đăng ký tài khoản tại <strong>Website của chúng tôi</strong>.</p>\n" +
                    "            <p>Vui lòng nhấn vào nút bên dưới để kích hoạt tài khoản của bạn:</p>\n" +
                    "            <a href=\"http://localhost:8080/register?action=verify&register&otp="+otp+"&email="+to+"  \">Kích hoạt tài khoản</a>\n" +
                    "            <p>Nếu bạn không thực hiện đăng ký, vui lòng bỏ qua email này.</p>\n" +
                    "            <p>Trân trọng,</p>\n" +
                    "            <p><strong>Đội ngũ hỗ trợ</strong></p>\n" +
                    "        </div>\n" +
                    "\n" +
                    "        <!-- Footer -->\n" +
                    "        <div class=\"email-footer\">\n" +
                    "            &copy; 2025 Website của chúng tôi. Tất cả các quyền được bảo lưu.\n" +
                    "        </div>\n" +
                    "    </div>\n" +
                    "</body>\n" +
                    "</html>\n";
    
            // Properties : khai báo các thuộc tính
            MimeMessage msg = getMimeMessage();

            try {
                // Kiểu nội dung
                msg.addHeader("Content-type", "text/HTML; charset=UTF-8");
    
                // Người gửi
    
                // Người nhận
                msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));
    
                // Tiêu đề email
                msg.setSubject(tieuDe);
    
                // Quy đinh ngày gửi
                msg.setSentDate(new Date());
    
                // Quy định email nhận phản hồi
                // msg.setReplyTo(InternetAddress.parse(from, false))
    
                // Nội dung
                msg.setContent(noiDung, "text/HTML; charset=UTF-8");
    
                // Gửi email
                Transport.send(msg);
                log.info("Send email successful to: {}", to);
                return true;
            } catch (Exception e) {
                log.info("Send email fail to: {}", to);
                e.printStackTrace();
                return false;
            }
        }
        public static void notifyOrderToUser(String toEmail, OrderModel order, List<CartModelHelper> listCartDisplay, AddressModel address){
            log.info("Send email notify order to user: {}", toEmail);
            // Sử dụng NumberFormat với locale cho Việt Nam
            NumberFormat numberFormat = NumberFormat.getInstance(new Locale("vi", "VN"));
    

            StringBuilder items = new StringBuilder();
            for (CartModelHelper cartItem : listCartDisplay) {
                ProductVariant variant = cartItem.getVariant();
                String price = (variant != null) ? numberFormat.format(variant.getPrice()) : numberFormat.format(cartItem.getProduct().getPrice());
                items.append("<tr>\n")
                        .append("                    <td>").append(cartItem.getProduct().getName()).append("</td>\n")
                        .append("                    <td>").append((variant == null)?"sản phẩm gốc":variant.getName()).append("</td>\n")
                        .append("                    <td>").append(cartItem.getQuantity()).append("</td>\n")
                        .append("                    <td>").append(price).append(" VNĐ</td>\n")
                        .append("                </tr>\n");
            }
    
            String template = "<!DOCTYPE html>\n" +
                    "<html lang=\"vi\">\n" +
                    "<head>\n" +
                    "    <meta charset=\"UTF-8\">\n" +
                    "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n" +
                    "    <title>Đặt Hàng Thành Công</title>\n" +
                    "    <style>\n" +
                    "        body {\n" +
                    "            font-family: Arial, sans-serif;\n" +
                    "            background-color: #e3f2fd;\n" +
                    "            padding: 20px;\n" +
                    "        }\n" +
                    "        .container {\n" +
                    "            max-width: 600px;\n" +
                    "            margin: auto;\n" +
                    "            background: #ffffff;\n" +
                    "            padding: 20px;\n" +
                    "            border-radius: 20px;\n" +
                    "            box-shadow: 0px 4px 20px rgba(0, 123, 255, 0.2);\n" +
                    "        }\n" +
                    "        h2 {\n" +
                    "            text-align: center;\n" +
                    "            color: #007bff;\n" +
                    "            border-bottom: 3px solid #90caf9;\n" +
                    "            padding-bottom: 10px;\n" +
                    "        }\n" +
                    "        h3 {\n" +
                    "            color: #0056b3;\n" +
                    "            border-left: 5px solid #90caf9;\n" +
                    "            padding-left: 10px;\n" +
                    "        }\n" +
                    "        .table-container {\n" +
                    "            border-radius: 12px;\n" +
                    "            overflow: hidden;\n" +
                    "            margin-bottom: 20px;\n" +
                    "        }\n" +
                    "        table {\n" +
                    "            width: 100%;\n" +
                    "            border-collapse: collapse;\n" +
                    "        }\n" +
                    "        table, th, td {\n" +
                    "            border: none;\n" +
                    "            padding: 12px;\n" +
                    "            text-align: left;\n" +
                    "        }\n" +
                    "        th {\n" +
                    "            background-color: #bbdefb;\n" +
                    "            color: #0d47a1;\n" +
                    "        }\n" +
                    "        td {\n" +
                    "            background-color: #e3f2fd;\n" +
                    "        }\n" +
                    "    </style>\n" +
                    "</head>\n" +
                    "<body>\n" +
                    "    <div class=\"container\">\n" +
                    "        <h2>Đặt Hàng Thành Công</h2>\n" +
                    "        \n" +
                    "        <div class=\"table-container\">\n" +
                    "            <table>\n" +
                    "                <tr><td><strong>Ghi Chú:</strong></td><td>"+order.getNote()+"</td></tr>\n" +
                    "                <tr><td><strong>Phương Thức Thanh Toán:</strong></td><td>"+order.getPaymentMethod().name()+"</td></tr>\n" +
                    "                <tr><td><strong>Tổng Tiền:</strong></td><td>"+numberFormat.format(order.getTotalPrice())+" VNĐ</td></tr>\n" +
                    "                <tr><td><strong>Ngày Đặt Hàng:</strong></td><td>"+order.getOrderDate().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"))+"</td></tr>\n" +
                    "            </table>\n" +
                    "        </div>\n" +
                    "        \n" +
                    "        <h3>Thông Tin Giao Hàng</h3>\n" +
                    "        <div class=\"table-container\">\n" +
                    "            <table>\n" +
                    "                <tr><td><strong>Người Nhận:</strong></td><td>"+address.getRecipientName()+"</td></tr>\n" +
                    "                <tr><td><strong>Số Điện Thoại:</strong></td><td>"+address.getRecipientPhone()+"</td></tr>\n" +
                    "                <tr><td><strong>Thành Phố:</strong></td><td>"+address.getCity()+"</td></tr>\n" +
                    "                <tr><td><strong>Quận/Huyện:</strong></td><td>"+address.getDistrict()+"</td></tr>\n" +
                    "                <tr><td><strong>Phường/Xã:</strong></td><td>"+address.getWard()+"</td></tr>\n" +
                    "                <tr><td><strong>Ghi Chú Địa Chỉ:</strong></td><td>"+address.getNote()+"</td></tr>\n" +
                    "            </table>\n" +
                    "        </div>\n" +
                    "        \n" +
                    "        <h3>Chi Tiết Đơn Hàng</h3>\n" +
                    "        <div class=\"table-container\">\n" +
                    "            <table>\n" +
                    "                <tr>\n" +
                    "                    <th>Tên Sản Phẩm</th>\n" +
                    "                    <th>Loại</th>\n"+
                    "                    <th>Số Lượng</th>\n" +
                    "                    <th>Đơn Giá</th>\n" +
                    "                </tr>\n" +
                    items +
                    "                \n" +
                    "            </table>\n" +
                    "        </div>\n" +
                    "    </div>\n" +
                    "</body>\n" +
                    "</html>\n";
    
            String tieuDe = "Thông báo đặt đơn hàng #" + order.getId();
            // Properties : khai báo các thuộc tính
            MimeMessage msg = getMimeMessage();

            try {
                // Kiểu nội dung
                msg.addHeader("Content-type", "text/HTML; charset=UTF-8");
                // Người gửi
    
                // Người nhận
                msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(toEmail, false));
    
                // Tiêu đề email
                msg.setSubject(tieuDe, "UTF-8");
    
                // Quy đinh ngày gửi
                msg.setSentDate(new Date());
    
                // Quy định email nhận phản hồi
                // msg.setReplyTo(InternetAddress.parse(from, false))
    
                // Nội dung
                msg.setContent(template, "text/HTML; charset=UTF-8");
    
                // Gửi email
                Transport.send(msg);
                log.info("Send email successful to: " + toEmail);
            } catch (Exception e) {
                log.info("Send email fail to: " + toEmail);
                e.printStackTrace();
            }
        }

        private static MimeMessage getMimeMessage() {
            Properties props = new Properties();
            props.put("mail.smtp.host", "smtp.gmail.com"); // SMTP HOST
            props.put("mail.smtp.port", "587"); // TLS 587 SSL 465
            props.put("mail.smtp.auth", "true");
            props.put("mail.smtp.starttls.enable", "true");

            // create Authenticator
            Authenticator auth = new Authenticator() {
                @Override
                protected PasswordAuthentication getPasswordAuthentication() {
                    // TODO Auto-generated method stub
                    return new PasswordAuthentication(EMAIL, PASSWORD);
                }
            };

            // Phiên làm việc
            Session session = Session.getInstance(props, auth);

            // Tạo một tin nhắn
            MimeMessage msg = new MimeMessage(session);
            return msg;
        }
        public static boolean forgotPassword(String to, String otp) {
            log.info("Sending password reset email to: {}", to);
            String tieuDe = "Khôi phục mật khẩu tài khoản";
            String noiDung = "<!DOCTYPE html>\n" +
                    "<html lang=\"vi\">\n" +
                    "<head>\n" +
                    "    <meta charset=\"UTF-8\">\n" +
                    "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n" +
                    "    <style>\n" +
                    "        body { font-family: Arial, sans-serif; background-color: #f4f4f4; padding: 0; margin: 0; }\n" +
                    "        .email-container { max-width: 600px; margin: 20px auto; background-color: #ffffff; padding: 20px;\n" +
                    "            border-radius: 8px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); }\n" +
                    "        .email-header { background-color: #007bff; color: #ffffff; text-align: center; padding: 20px; }\n" +
                    "        .email-body { padding: 20px; color: #333333; text-align: center; }\n" +
                    "        .email-body p { margin: 10px 0; line-height: 1.6; }\n" +
                    "        .reset-link { display: inline-block; margin-top: 20px; padding: 10px 20px;\n" +
                    "            background-color: #007bff; color: #ffffff; text-decoration: none;\n" +
                    "            border-radius: 5px; font-size: 16px; }\n" +
                    "        .reset-link:hover { background-color: #0056b3; }\n" +
                    "        .email-footer { text-align: center; padding: 10px; font-size: 12px;\n" +
                    "            color: #777; border-top: 1px solid #ddd; background-color: #f9f9f9; }\n" +
                    "    </style>\n" +
                    "</head>\n" +
                    "<body>\n" +
                    "    <div class=\"email-container\">\n" +
                    "        <div class=\"email-header\">\n" +
                    "            <h1>Yêu cầu khôi phục mật khẩu</h1>\n" +
                    "        </div>\n" +
                    "        <div class=\"email-body\">\n" +
                    "            <p>Xin chào,</p>\n" +
                    "            <p>Bạn đã yêu cầu đặt lại mật khẩu cho tài khoản của mình.</p>\n" +
                    "            <p>Vui lòng nhấn vào nút bên dưới để đặt lại mật khẩu:</p>\n" +
                    "            <a class=\"reset-link\" href=\"http://localhost:8080/reset-password?otp=" + otp + "&email=" + to + "\">Đặt lại mật khẩu</a>\n" +
                    "            <p>Nếu bạn không yêu cầu đặt lại mật khẩu, vui lòng bỏ qua email này.</p>\n" +
                    "        </div>\n" +
                    "        <div class=\"email-footer\">\n" +
                    "            &copy; 2025 Website của chúng tôi. Tất cả các quyền được bảo lưu.\n" +
                    "        </div>\n" +
                    "    </div>\n" +
                    "</body>\n" +
                    "</html>\n";

            MimeMessage msg = getMimeMessage();
            try {
                msg.addHeader("Content-type", "text/HTML; charset=UTF-8");
                msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));
                msg.setSubject(tieuDe, "UTF-8");
                msg.setSentDate(new Date());
                msg.setContent(noiDung, "text/HTML; charset=UTF-8");

                Transport.send(msg);
                log.info("Password reset email sent successfully to: {}", to);
                return true;
            } catch (Exception e) {
                log.error("Failed to send password reset email to: {}", to, e);
                return false;
            }
        }

    }

================
File: common/UploadUtil.java
================
package vn.edu.hcmuaf.fit.myphamstore.common;

import jakarta.servlet.http.Part;

public class UploadUtil {
    public static String getFileName(Part part){
        String contentDisp = part.getHeader("content-disposition");

        if(!contentDisp.contains("filename")){
            return null;
        }
        int beginIndex = contentDisp.indexOf("filename=") + 10;
        int endIndex = contentDisp.length() - 1;

        return contentDisp.substring(beginIndex, endIndex);
    }
}

================
File: common/UserStatus.java
================
package vn.edu.hcmuaf.fit.myphamstore.common;

public enum UserStatus {
    ACTIVE, INACTIVE, NONE
}

================
File: controller/admin/AdminController.java
================
package vn.edu.hcmuaf.fit.myphamstore.controller.admin;

import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;

@WebServlet(name = "AdminController", value = "/admin")
public class AdminController extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        RequestDispatcher dispatcher = req.getRequestDispatcher("/admin/admin-dashboard.jsp");
        dispatcher.forward(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        super.doPost(req, resp);
    }
}

================
File: controller/admin/BrandController.java
================
package vn.edu.hcmuaf.fit.myphamstore.controller.admin;

import jakarta.inject.Inject;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import vn.edu.hcmuaf.fit.myphamstore.common.action.AdminAction;
import vn.edu.hcmuaf.fit.myphamstore.service.IBrandService;

import java.io.IOException;

@WebServlet(name = "AdminBrandController", value = "/admin/brands")
public class BrandController extends HttpServlet {
    @Inject
    private IBrandService brandService;

    @Override
        protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String action = request.getParameter("action");
        if (action == null || action.isEmpty() || action.equalsIgnoreCase(AdminAction.DISPLAY) || action.equalsIgnoreCase(AdminAction.SEARCH)) {
            brandService.displayBrand(request, response);
        } else if (action.equalsIgnoreCase(AdminAction.STOP_BUYING)) {
            brandService.stopBuying( request, response);
        }else if (action.equalsIgnoreCase(AdminAction.START_BUYING)) {
            brandService.startBuying(request, response);
        }else if (action.equalsIgnoreCase(AdminAction.ADD)) {
            brandService.addBrand(request, response);
        } else if (action.equalsIgnoreCase(AdminAction.EDIT)) {
            brandService.updateBrand(request, response);
        }
        }

        @Override
        protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

        }
}

================
File: controller/admin/CategoryController.java
================
package vn.edu.hcmuaf.fit.myphamstore.controller.admin;
import jakarta.inject.Inject;
import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.annotation.*;
import vn.edu.hcmuaf.fit.myphamstore.common.action.AdminAction;
import vn.edu.hcmuaf.fit.myphamstore.model.CategoryModel;
import vn.edu.hcmuaf.fit.myphamstore.service.ICategoryService;

import java.io.IOException;
import java.util.List;

@WebServlet(name = "AdminCategoryController", value = "/admin/categories")
public class CategoryController extends HttpServlet {
    @Inject
    private ICategoryService categoryService;
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String action = request.getParameter("action");
        if (action == null || action.isEmpty() || action.equalsIgnoreCase(AdminAction.DISPLAY) || action.equalsIgnoreCase(AdminAction.SEARCH)) {
            categoryService.displayCategory(request, response);
        } else if (action.equalsIgnoreCase(AdminAction.STOP_BUYING)) {
            categoryService.stopBuying( request, response);
        }else if (action.equalsIgnoreCase(AdminAction.START_BUYING)) {
            categoryService.startBuying(request, response);
        }else if (action.equalsIgnoreCase(AdminAction.ADD)) {
            categoryService.addCategory(request, response);
        } else if (action.equalsIgnoreCase(AdminAction.EDIT)) {
            categoryService.updateCategory(request, response);
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

    }
}

================
File: controller/admin/ContactController.java
================
package vn.edu.hcmuaf.fit.myphamstore.controller.admin;

import jakarta.inject.Inject;
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import vn.edu.hcmuaf.fit.myphamstore.common.action.AdminAction;
import vn.edu.hcmuaf.fit.myphamstore.service.IContactService;

import java.io.IOException;
@WebServlet(name = "AdminContactController", value = "/admin/contacts")
public class ContactController extends HttpServlet {
    private static final long serialVersionUID = 1L;

    @Inject
    private IContactService contactService;

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, ServletException, IOException {
        String action = request.getParameter("action");
        if (action == null || action.equalsIgnoreCase(AdminAction.DISPLAY) || action.equalsIgnoreCase(AdminAction.SEARCH)) {
            contactService.displayContact(request, response);
        } else if (action.equalsIgnoreCase(AdminAction.PENDING)) {
            contactService.pending( request, response);
        }else if (action.equalsIgnoreCase(AdminAction.DONE)) {
            contactService.done(request, response);
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

    }
}

================
File: controller/admin/CouponController.java
================
package vn.edu.hcmuaf.fit.myphamstore.controller.admin;

import jakarta.inject.Inject;
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import vn.edu.hcmuaf.fit.myphamstore.common.action.AdminAction;
import vn.edu.hcmuaf.fit.myphamstore.service.ICouponService;

import java.io.IOException;

@WebServlet(name = "AdminCouponController", value = "/admin/coupons")
public class CouponController extends HttpServlet {
    @Inject
    private ICouponService couponService;
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

        String action = request.getParameter("action");
        if (action == null || action.equalsIgnoreCase(AdminAction.DISPLAY) || action.equalsIgnoreCase(AdminAction.SEARCH) || action.isEmpty()) {
            couponService.displayCoupon(request, response);
        } else if (action.equalsIgnoreCase(AdminAction.STOP_BUYING)) {
            couponService.stopBuying( request, response);
        }else if (action.equalsIgnoreCase(AdminAction.START_BUYING)) {
            couponService.startBuying(request, response);
        }else if (action.equalsIgnoreCase(AdminAction.ADD)) {
            couponService.addCoupon(request, response);
        } else if (action.equalsIgnoreCase(AdminAction.EDIT)) {
            couponService.updateCoupon(request, response);
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

    }
}

================
File: controller/admin/OrderController.java
================
package vn.edu.hcmuaf.fit.myphamstore.controller.admin;

import jakarta.inject.Inject;
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import vn.edu.hcmuaf.fit.myphamstore.common.action.AdminAction;
import vn.edu.hcmuaf.fit.myphamstore.service.IOrderService;

import java.io.IOException;

@WebServlet(name = "OrderController", value = "/admin/orders")
public class OrderController extends HttpServlet {
    @Inject
    private IOrderService orderService;

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String action = req.getParameter("action");
        if (action == null || AdminAction.DISPLAY.equals(action)){
            orderService.displayOrders(req, resp);
        }else if(AdminAction.DISPLAY_DETAIL.equals(action)) {
            orderService.displayOrderDetail(req, resp);
        }else if(AdminAction.EDIT.equals(action)){
            orderService.changeStatus(req, resp);
        }
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        doGet(req, resp);
    }
}

================
File: controller/admin/ProductController.java
================
package vn.edu.hcmuaf.fit.myphamstore.controller.admin;

import jakarta.inject.Inject;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import vn.edu.hcmuaf.fit.myphamstore.common.action.AdminAction;
import vn.edu.hcmuaf.fit.myphamstore.service.IProductService;

import java.io.IOException;

@WebServlet(name = "AdminProductManagement", value = "/admin/products")
public class ProductController extends HttpServlet {
    @Inject
    private IProductService productService;
    private static final long serialVersionUID = 1L;
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String action = request.getParameter("action");
        if (action == null || action.equalsIgnoreCase(AdminAction.DISPLAY) || action.equalsIgnoreCase(AdminAction.SEARCH) || action.isEmpty()) {
            productService.displayProduct(request, response);
        } else if (action.equalsIgnoreCase(AdminAction.STOP_BUYING)) {
            productService.stopBuying( request, response);
        }else if (action.equalsIgnoreCase(AdminAction.START_BUYING)) {
            productService.startBuying(request, response);
        }else if (action.equalsIgnoreCase(AdminAction.ADD)) {
            productService.addProduct(request, response);
        } else if (action.equalsIgnoreCase(AdminAction.EDIT)) {
            productService.updateProduct(request, response);
        }
    }
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        //them sua xoa san
        String action = request.getParameter("action");
        if(action.equalsIgnoreCase(AdminAction.INSERT)){
            productService.executeAddProduct(request, response);
        }else if (action.equalsIgnoreCase(AdminAction.EDIT)) {
            productService.executeUpdateProduct(request, response);
        }
    }

}

================
File: controller/admin/SlideController.java
================
package vn.edu.hcmuaf.fit.myphamstore.controller.admin;
import jakarta.inject.Inject;
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.*;
import jakarta.servlet.annotation.*;
import vn.edu.hcmuaf.fit.myphamstore.common.Arlert;
import vn.edu.hcmuaf.fit.myphamstore.model.CategoryModel;
import vn.edu.hcmuaf.fit.myphamstore.model.SlideModel;
import vn.edu.hcmuaf.fit.myphamstore.service.ISlideService;

import java.io.IOException;
import java.util.List;

@WebServlet(name = "SlideController", value = "/admin/slides")
public class SlideController extends HttpServlet {
    @Inject
    private ISlideService slideService;
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        RequestDispatcher dispatcher = request.getRequestDispatcher("/admin/slide/slide-management.jsp");
        List<SlideModel> slides = slideService.findAll();

        request.setAttribute("slides", slides);
        dispatcher.forward(request, response);
    }
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        String[] images = request.getParameterValues("images");
        if(images==null ||  List.of(images).isEmpty()) {
            Arlert alert = new Arlert();
            alert.setMessage("Vui lòng chọn hình ảnh");
            alert.setType(Arlert.TYPE_WARNING);
            request.setAttribute("alert", alert);
            request.getRequestDispatcher("/admin/slide/slide-management.jsp").forward(request, response);
            return;
        }

        //xóa hình ảnh cũ
        slideService.deleteAll();

        //lưu hình anảnh vào db
        for (String image : images) {
            SlideModel slide = new SlideModel();
            slide.setImage(image);
            slideService.save(slide);
        }
        Arlert alert = new Arlert();
        alert.setMessage("Cập nhật slide thành công!");
        alert.setType(Arlert.TYPE_SUCCESS);
        request.setAttribute("alert", alert);
        request.getRequestDispatcher("/admin/slide/slide-management.jsp").forward(request, response);
    }

}

================
File: controller/admin/UserController.java
================
package vn.edu.hcmuaf.fit.myphamstore.controller.admin;
import jakarta.inject.Inject;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import vn.edu.hcmuaf.fit.myphamstore.common.action.AdminAction;
import vn.edu.hcmuaf.fit.myphamstore.model.UserModel;
import vn.edu.hcmuaf.fit.myphamstore.service.impl.UserServiceImpl;

import java.io.IOException;
import java.util.List;

@WebServlet(name = "User-Management", value = "/admin/users")
public class UserController extends HttpServlet {
    @Inject
    private UserServiceImpl userService;
    private static final long serialVersionUID = 1L;
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
       String action = request.getParameter("action");
        System.out.println(request.getParameter("totalPages"));
       if (action == null || action.isEmpty() || AdminAction.DISPLAY.equals(action) ||action.equalsIgnoreCase(AdminAction.SEARCH)) {
           userService.displayListUsers(request, response);
       } else if (action.equalsIgnoreCase(AdminAction.LOCK_USER)) {
           userService.lockUser(request, response);
       } else if (action.equalsIgnoreCase(AdminAction.UNLOCK_USER)) {
           userService.unlockUser(request, response);
       } else if(action.equalsIgnoreCase(AdminAction.DISPLAY_DETAIL)){
           userService.detailUser(request, response);
       }
    }
}

================
File: controller/frontend/ActivityLogController.java
================
package vn.edu.hcmuaf.fit.myphamstore.controller.frontend;

import vn.edu.hcmuaf.fit.myphamstore.dao.IActivityLogDAO;
import vn.edu.hcmuaf.fit.myphamstore.dao.daoimpl.ActivityLogDAOImpl;
import vn.edu.hcmuaf.fit.myphamstore.model.ActivityLogModel;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;

@WebServlet("/activity-log")
public class ActivityLogController extends HttpServlet {
    private final IActivityLogDAO activityLogDAO = new ActivityLogDAOImpl();

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        try {

            List<ActivityLogModel> activityLogs = activityLogDAO.findAll();
            activityLogs.forEach(System.out::println); // In ra console

            response.getWriter().write("Activity logs have been printed to the server console.");
        } catch (Exception e) {
            e.printStackTrace();
            response.getWriter().write("An error occurred while retrieving activity logs.");
        }
    }
}

================
File: controller/frontend/BrandController.java
================
package vn.edu.hcmuaf.fit.myphamstore.controller.frontend;

import vn.edu.hcmuaf.fit.myphamstore.dao.IBrandDAO;
import vn.edu.hcmuaf.fit.myphamstore.dao.daoimpl.BrandDAOImpl;
import vn.edu.hcmuaf.fit.myphamstore.model.BrandModel;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;

@WebServlet(name = "BrandController", value = "/thuong-hieu")
public class BrandController extends HttpServlet {
    private IBrandDAO brandDAO = new BrandDAOImpl();

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        List<BrandModel> brands = brandDAO.getAllBrands();
        request.setAttribute("brands", brands);
        request.getRequestDispatcher("/frontend/brand.jsp").forward(request, response);
    }
}

================
File: controller/frontend/CategoryController.java
================
package vn.edu.hcmuaf.fit.myphamstore.controller.frontend;

import jakarta.inject.Inject;
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import vn.edu.hcmuaf.fit.myphamstore.model.BrandModel;
import vn.edu.hcmuaf.fit.myphamstore.model.CategoryModel;
import vn.edu.hcmuaf.fit.myphamstore.model.ProductModel;
import vn.edu.hcmuaf.fit.myphamstore.service.IBrandService;
import vn.edu.hcmuaf.fit.myphamstore.service.ICategoryService;
import vn.edu.hcmuaf.fit.myphamstore.service.IProductService;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;

@WebServlet(name = "CategoryController", value = "/danh-muc")
public class CategoryController extends HttpServlet {
    @Inject
    private IProductService productService;

    @Inject
    private IBrandService brandService;

    @Inject
    private ICategoryService categoryService;

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        try {
            String keyword = request.getParameter("keyword");
            String orderBy = request.getParameter("orderBy");
            String[] selectedCategoriesArray = request.getParameterValues("selectedCategories");
            String[] selectedBrandsArray = request.getParameterValues("selectedBrands");
            String priceRange = request.getParameter("priceRange");

            int currentPage = 1;
            int pageSize = 6;

            if (request.getParameter("currentPage") != null) {
                currentPage = Integer.parseInt(request.getParameter("currentPage"));
            }
            if (request.getParameter("pageSize") != null) {
                pageSize = Integer.parseInt(request.getParameter("pageSize"));
            }

            List<String> selectedCategories = selectedCategoriesArray != null ? Arrays.asList(selectedCategoriesArray) : null;
            List<String> selectedBrands = selectedBrandsArray != null ? Arrays.asList(selectedBrandsArray) : null;

            List<ProductModel> products = productService.getFilteredProducts(keyword, selectedCategories, selectedBrands, priceRange, currentPage, pageSize, orderBy);
            Long totalPages = productService.getTotalPage(pageSize);

            List<BrandModel> brands = brandService.getAllBrands();
            request.setAttribute("brands", brands);

            List<CategoryModel> categories = categoryService.getAllCategories();
            request.setAttribute("categories", categories);

            request.setAttribute("products", products);
            request.setAttribute("totalPages", totalPages);
            request.setAttribute("currentPage", currentPage);
            request.setAttribute("pageSize", pageSize);
            request.setAttribute("keyword", keyword);
            request.setAttribute("orderBy", orderBy);
            request.setAttribute("selectedCategories", selectedCategories);
            request.setAttribute("selectedBrands", selectedBrands);
            request.setAttribute("priceRange", priceRange);

            if (products.isEmpty()) {
                request.setAttribute("noProductsFound", "No products found for the given search criteria.");
            }

            RequestDispatcher dispatcher = request.getRequestDispatcher("/frontend/category.jsp");
            dispatcher.forward(request, response);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

================
File: controller/frontend/ChangePassController.java
================
package vn.edu.hcmuaf.fit.myphamstore.controller.frontend;

import jakarta.inject.Inject;
import vn.edu.hcmuaf.fit.myphamstore.dao.IUserDAO;
import vn.edu.hcmuaf.fit.myphamstore.dao.daoimpl.UserDAOImp;
import vn.edu.hcmuaf.fit.myphamstore.model.UserModel;
import vn.edu.hcmuaf.fit.myphamstore.common.PasswordUtils;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import vn.edu.hcmuaf.fit.myphamstore.service.IUserService;

import java.io.IOException;

@WebServlet("/change-password")
public class ChangePassController extends HttpServlet {
    @Inject
    private IUserService userService;

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();
        UserModel user = (UserModel) session.getAttribute("user");

        if (user == null) {
            response.sendRedirect("/login");
            return;
        }

        String oldPassword = request.getParameter("password");
        String newPassword = request.getParameter("new-password");
        String reNewPassword = request.getParameter("re-new-password");

        if (oldPassword == null || newPassword == null || reNewPassword == null ||
                oldPassword.isEmpty() || newPassword.isEmpty() || reNewPassword.isEmpty()) {
            request.setAttribute("errorMessage", "All fields are required.");
            request.getRequestDispatcher("/frontend/change-password.jsp").forward(request, response);
            return;
        }

        if (!PasswordUtils.verifyPassword(oldPassword, user.getPassword())) {
            request.setAttribute("errorMessage", "Old password is incorrect.");
            request.getRequestDispatcher("/frontend/change-password.jsp").forward(request, response);
            return;
        }

        if (!newPassword.equals(reNewPassword)) {
            request.setAttribute("errorMessage", "New passwords do not match.");
            request.getRequestDispatcher("/frontend/change-password.jsp").forward(request, response);
            return;
        }

        // Update the password in the database
        user.setPassword(PasswordUtils.hashPassword(newPassword));
        boolean isUpdated = userService.updateUserPassword(user);

        if (isUpdated) {
            request.setAttribute("successMessage", "Your password has been changed successfully.");
        } else {
            request.setAttribute("errorMessage", "Password change failed. Please try again.");
        }
        request.getRequestDispatcher("/frontend/change-password.jsp").forward(request, response);
    }

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        if (req.getSession().getAttribute("user") == null) {
            resp.sendRedirect("/login");
            return;
        }
        req.getRequestDispatcher("/frontend/change-password.jsp").forward(req, resp);
    }
}

================
File: controller/frontend/CheckoutController.java
================
package vn.edu.hcmuaf.fit.myphamstore.controller.frontend;

import jakarta.inject.Inject;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import vn.edu.hcmuaf.fit.myphamstore.model.CouponModel;
import vn.edu.hcmuaf.fit.myphamstore.service.ICheckoutService;
import vn.edu.hcmuaf.fit.myphamstore.service.ICouponService;

import java.io.IOException;
import java.util.List;

@WebServlet(name = "CheckoutController", value = "/checkout")
public class CheckoutController extends HttpServlet {
    private static final long serialVersionUID = 1L;
    @Inject
    private ICheckoutService checkoutService;
    @Inject
    private ICouponService couponService;
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String action = request.getParameter("action");
        if ("display".equals(action)) {
            checkoutService.displayCheckout(request, response);
        } else if ("checkout".equals(action)) {
            checkoutService.checkout(request, response);
        }
        // Fetch available coupons and set as request attribute
        List<CouponModel> availableCoupons = couponService.findAvailableCoupons();
        request.setAttribute("availableCoupons", availableCoupons);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doGet(request, response);
    }

}

================
File: controller/frontend/ContactController.java
================
package vn.edu.hcmuaf.fit.myphamstore.controller.frontend;
import jakarta.inject.Inject;
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import vn.edu.hcmuaf.fit.myphamstore.service.IContactService;

import java.io.IOException;

@WebServlet(name = "ContactController", value = "/lien-he")
public class ContactController extends HttpServlet {
    private static final long serialVersionUID = 1L;



    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        RequestDispatcher dispatcher = request.getRequestDispatcher("/frontend/contact.jsp");
        dispatcher.forward(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

    }
}

================
File: controller/frontend/ForgotPassController.java
================
package vn.edu.hcmuaf.fit.myphamstore.controller.frontend;

import jakarta.inject.Inject;
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import vn.edu.hcmuaf.fit.myphamstore.dao.IOtpDAO;
import vn.edu.hcmuaf.fit.myphamstore.dao.daoimpl.OtpDAOImpl;
import vn.edu.hcmuaf.fit.myphamstore.service.IUserService;

import java.io.IOException;
import java.util.UUID;

@WebServlet("/forgot-password")
public class ForgotPassController extends HttpServlet {
    @Inject
    private IUserService userService;
    @Inject
    private IOtpDAO otpDAO;

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        request.getRequestDispatcher("/frontend/forgot-password.jsp").forward(request, response);
    }
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String email = request.getParameter("email").trim();
        System.out.println(email);
        // Tạo mã OTP
        String otp = "";

        // Lưu OTP vào database hoặc cache (Redis, session...)
        boolean emailSent = userService.forgotPassword(email, otp);

        if (emailSent) {
            request.setAttribute("successMessage", "Email đặt lại mật khẩu đã được gửi!");
        } else {
            request.setAttribute("errorMessage", "Không thể gửi email, vui lòng thử lại.");
        }
        RequestDispatcher dispatcher = request.getRequestDispatcher("/frontend/forgot-password.jsp");
        dispatcher.forward(request, response);
    }
}

================
File: controller/frontend/HomeController.java
================
package vn.edu.hcmuaf.fit.myphamstore.controller.frontend;

import jakarta.inject.Inject;
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import vn.edu.hcmuaf.fit.myphamstore.model.*;
import vn.edu.hcmuaf.fit.myphamstore.service.IBrandService;
import vn.edu.hcmuaf.fit.myphamstore.service.ICategoryService;
import vn.edu.hcmuaf.fit.myphamstore.service.IProductService;
import vn.edu.hcmuaf.fit.myphamstore.service.ISlideService;

import java.io.IOException;
import java.util.List;

@WebServlet(name = "HomeController", value = "/trang-chu")
public class HomeController extends HttpServlet {
    @Inject
    private ISlideService slideService;
    @Inject
    private IProductService productService;
    @Inject
    private IBrandService brandService;
    @Inject
    private ICategoryService categoryService;

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        try {
            UserModel user = (UserModel) request.getSession().getAttribute("user");
            if (user != null) {
                request.setAttribute("user", user);
            }
            // Lấy các tham số từ request
            String keyword = request.getParameter("keyword");
            String orderBy = request.getParameter("orderBy");

            // Xử lý giá trị null cho currentPage và pageSize
            int currentPage = 1;
            int pageSize = 5;

            if (request.getParameter("currentPage") != null) {
                currentPage = Integer.parseInt(request.getParameter("currentPage"));
            }
            if (request.getParameter("pageSize") != null) {
                pageSize = Integer.parseInt(request.getParameter("pageSize"));
            }

            // Lấy danh sách sản phẩm và số trang
            List<ProductModel> products = productService.getProductsWithPaging(keyword, currentPage, pageSize, orderBy);
            Long totalPages = productService.getTotalPage(pageSize);

            // Lấy danh sách sản phẩm mới nhất
            List<ProductModel> latestProducts = productService.getLatestProducts();
            request.setAttribute("latestProducts", latestProducts);

            // Lấy danh sách thương hiệu
            List<BrandModel> brands = brandService.getAllBrands();

            // lấy danh sách các loại sản phẩm
            List<CategoryModel> categories = categoryService.getAllCategories();

            List<ProductModel>skinCare = productService.getProductsByCategory(1);

            List<ProductModel>bodyCare = productService.getProductsByCategory(2);

            List<ProductModel>makeUp = productService.getProductsByCategory(3);

            // Lấy danh sách slide
            List<SlideModel> slides = slideService.findAll();

            request.setAttribute("slides", slides);

            // Set các attribute để gửi đến JSP
            request.setAttribute("products", products);
            request.setAttribute("totalPages", totalPages);
            request.setAttribute("currentPage", currentPage);
            request.setAttribute("pageSize", pageSize);
            request.setAttribute("keyword", keyword);
            request.setAttribute("orderBy", orderBy);
            request.setAttribute("latestProducts", latestProducts);
            request.setAttribute("brands", brands);
            request.setAttribute("categories", categories);
            request.setAttribute("skinCare", skinCare);
            request.setAttribute("bodyCare", bodyCare);
            request.setAttribute("makeUp", makeUp);

            // Chuyển hướng đến trang JSP
            RequestDispatcher dispatcher = request.getRequestDispatcher("/frontend/home.jsp");
            dispatcher.forward(request, response);

        } catch (NoClassDefFoundError e) {
            e.printStackTrace();
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Lỗi khi khởi tạo lớp: " + e.getMessage());
        } catch (Exception e) {
            e.printStackTrace();
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Lỗi khi xử lý yêu cầu: " + e.getMessage());
        }

    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doGet(request, response);
    }
}

================
File: controller/frontend/LoginController.java
================
package vn.edu.hcmuaf.fit.myphamstore.controller.frontend;

import jakarta.inject.Inject;
import vn.edu.hcmuaf.fit.myphamstore.dao.IUserDAO;
import vn.edu.hcmuaf.fit.myphamstore.dao.daoimpl.UserDAOImp;
import vn.edu.hcmuaf.fit.myphamstore.model.UserModel;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import vn.edu.hcmuaf.fit.myphamstore.service.IUserService;

import java.io.IOException;

@WebServlet("/login")
public class LoginController extends HttpServlet {
    @Inject
    private  IUserService userService;

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String action = request.getParameter("action");
        if (action != null && action.equals("login")) {
            userService.login(request, response);
        } else if (action != null && action.equals("logout")) {
            userService.logout(request, response);

        }

    }
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        request.getRequestDispatcher("/frontend/login.jsp").forward(request, response);
    }
}

================
File: controller/frontend/OrderHistoryController.java
================
package vn.edu.hcmuaf.fit.myphamstore.controller.frontend;

import jakarta.inject.Inject;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import vn.edu.hcmuaf.fit.myphamstore.model.OrderDetailModel;
import vn.edu.hcmuaf.fit.myphamstore.model.OrderModel;
import vn.edu.hcmuaf.fit.myphamstore.model.ProductModel;
import vn.edu.hcmuaf.fit.myphamstore.model.UserModel;
import vn.edu.hcmuaf.fit.myphamstore.service.IOrderService;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@WebServlet(name = "OrderHistoryController", value = "/order-history")
public class OrderHistoryController extends HttpServlet {
    @Inject
    private IOrderService orderService;

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        UserModel user = (UserModel) request.getSession().getAttribute("user");
        if (user == null) {
            response.sendRedirect(request.getContextPath() + "/login");
            return;
        }

        Long userId = user.getId();
        int currentPage = 1;
        int pageSize = 10;

        if (request.getParameter("currentPage") != null) {
            currentPage = Integer.parseInt(request.getParameter("currentPage"));
        }
        if (request.getParameter("pageSize") != null) {
            pageSize = Integer.parseInt(request.getParameter("pageSize"));
        }

        List<OrderModel> orderHistory = orderService.getOrderHistoryByUserId(userId, currentPage, pageSize);
        Map<Long, List<OrderDetailModel>> orderDetailsMap = new HashMap<>();
        Map<Long, List<ProductModel>> productsMap = new HashMap<>();

        for (OrderModel order : orderHistory) {
            List<OrderDetailModel> orderDetails = orderService.getOrderDetailsByOrderId(order.getId());
            orderDetailsMap.put(order.getId(), orderDetails);

            List<ProductModel> products = new ArrayList<>();
            for (OrderDetailModel orderDetail : orderDetails) {
                List<ProductModel> productList = orderService.getProductByOrderDetail(orderDetail);
                products.addAll(productList);  // Lưu tất cả sản phẩm thay vì ghi đè
            }
            productsMap.put(order.getId(), products);
        }
        request.setAttribute("orderHistory", orderHistory);
        request.setAttribute("orderDetailsMap", orderDetailsMap);
        request.setAttribute("productsMap", productsMap);

        request.getRequestDispatcher("/frontend/history.jsp").forward(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        doGet(req, resp);
    }
}

================
File: controller/frontend/ProductController.java
================
package vn.edu.hcmuaf.fit.myphamstore.controller.frontend;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import vn.edu.hcmuaf.fit.myphamstore.dao.IProductDAO;
import vn.edu.hcmuaf.fit.myphamstore.dao.daoimpl.ProductDAOImpl;
import vn.edu.hcmuaf.fit.myphamstore.model.ProductModel;

import java.io.IOException;
import java.util.List;

public class ProductController extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

    }
}

================
File: controller/frontend/ProductDetailController.java
================
package vn.edu.hcmuaf.fit.myphamstore.controller.frontend;

import jakarta.inject.Inject;
import vn.edu.hcmuaf.fit.myphamstore.dao.IProductDAO;
import vn.edu.hcmuaf.fit.myphamstore.dao.daoimpl.ProductDAOImpl;
import vn.edu.hcmuaf.fit.myphamstore.model.*;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import vn.edu.hcmuaf.fit.myphamstore.service.IProductService;
import vn.edu.hcmuaf.fit.myphamstore.service.IReviewService;
import vn.edu.hcmuaf.fit.myphamstore.service.IUserService;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@WebServlet(name = "ProductDetailController", value = "/product-detail")
public class ProductDetailController extends HttpServlet {
    @Inject
    private IProductService productService;
    @Inject
    private IReviewService reviewService;
    @Inject
    private IUserService userService;
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        double totalReview = 0.0;
        double totalReview1 = 0.0;
        double totalReview2= 0.0;
        double totalReview3 = 0.0;
        double totalReview4 = 0.0;
        double totalReview5 = 0.0;
        String productId = request.getParameter("id");
        Long id = Long.parseLong(productId);
        ProductModel product = productService.getProductDetail(id);
        request.setAttribute("product", product);
        BrandModel brand = productService.getBrandById(product.getBrandId());
        request.setAttribute("brand", brand);
        List<ProductImageModel> productImages = productService.getProductImageById(id);
        request.setAttribute("productImages", productImages);
        List<ReviewModel> reviews = productService.getReviewsByProductId(id);
        request.setAttribute("reviewCount", reviews.size());
        request.setAttribute("reviews", reviews);
        List<UserModel> users = new ArrayList<>();
        for (ReviewModel review : reviews) {
            UserModel user = userService.findUserById(review.getUserId());
            users.add(user);
        }
        request.setAttribute("users", users);
        List<ProductVariant> productVariants = productService.getProductVariantsByProductId(id);
        request.setAttribute("variants", productVariants);
        System.out.println(productVariants);
        for (ReviewModel review : reviews) {
            totalReview += review.getRating();
            switch (review.getRating()) {
                case 5:
                    totalReview5 += 1;
                    break;
                case 4:
                    totalReview4 += 1;
                    break;
                case 3:
                    totalReview3 += 1;
                    break;
                case 2:
                    totalReview2 += 1;
                    break;
                case 1:
                    totalReview1 += 1;
                    break;
            }
        }

        int reviewCount = reviews.size();
        if (reviewCount > 0) {
            totalReview = Math.round((totalReview / reviewCount) * 100.0) / 100.0;
            totalReview5 = (totalReview5 / reviewCount) * 100;
            totalReview4 = (totalReview4 / reviewCount) * 100;
            totalReview3 = (totalReview3 / reviewCount) * 100;
            totalReview2 = (totalReview2 / reviewCount) * 100;
            totalReview1 = (totalReview1 / reviewCount) * 100;
        } else {
            totalReview = 0;
            totalReview5 = 0;
            totalReview4 = 0;
            totalReview3 = 0;
            totalReview2 = 0;
            totalReview1 = 0;
        }
        request.setAttribute("total", totalReview);
        request.setAttribute("total1", totalReview1);
        request.setAttribute("total2", totalReview2);
        request.setAttribute("total3", totalReview3);
        request.setAttribute("total4", totalReview4);
        request.setAttribute("total5", totalReview5);
        request.getRequestDispatcher("/frontend/product_detail.jsp").forward(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String action = req.getParameter("action");
        if ("addReview".equalsIgnoreCase(action)) {
            reviewService.addReview(req, resp);
        } else {
            doGet(req, resp);
        }
    }
}

================
File: controller/frontend/ProfileController.java
================
package vn.edu.hcmuaf.fit.myphamstore.controller.frontend;

import jakarta.inject.Inject;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.MultipartConfig;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.Part;
import vn.edu.hcmuaf.fit.myphamstore.service.IUserService;

import java.io.IOException;

@WebServlet(name = "ProfileController", value = "/profile")
@MultipartConfig(   // Cấu hình upload file
        fileSizeThreshold = 1024 * 1024 * 2, // 2MB
        maxFileSize = 1024 * 1024 * 5, // 5MB
        maxRequestSize = 1024 * 1024 * 10 // 10MB
)
public class ProfileController extends HttpServlet {
    @Inject
    private IUserService userService;

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String action = request.getParameter("action");
        if ("edit".equalsIgnoreCase(action)) {
            userService.updateProfile(request, response);
        } else if ("addAddress".equalsIgnoreCase(action)) {
            userService.addAddress(request, response);
        } else if ("showAvatar".equalsIgnoreCase(action)) {
           userService.showAvatar(request, response);
        }else {
            userService.profile(request, response);
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String action = request.getParameter("action");

        if ("uploadAvatar".equalsIgnoreCase(action)) {
            Part filePart = request.getPart("avatar"); // Lấy file từ form
            userService.uploadAvatar(request, response, filePart);
        } else {
            doGet(request, response);
        }
    }
}

================
File: controller/frontend/RegisterController.java
================
package vn.edu.hcmuaf.fit.myphamstore.controller.frontend;

import jakarta.inject.Inject;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import vn.edu.hcmuaf.fit.myphamstore.service.IUserService;

import java.io.IOException;

@WebServlet("/register")
public class RegisterController extends HttpServlet {
    private static final long serialVersionUID = 1L;
    @Inject
    private IUserService userService;
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String action = req.getParameter("action");
        if (action != null && action.equals("register")) {
            req.getRequestDispatcher("/frontend/register.jsp").forward(req, resp);
        } else if (action.equals("verify")) {
            userService.verifyOtp(req, resp);
        }
    }
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
       userService.register(request, response);
    }
}

================
File: controller/frontend/ResetPasswordController.java
================
package vn.edu.hcmuaf.fit.myphamstore.controller.frontend;

import jakarta.inject.Inject;
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import vn.edu.hcmuaf.fit.myphamstore.common.PasswordUtils;
import vn.edu.hcmuaf.fit.myphamstore.dao.IOtpDAO;
import vn.edu.hcmuaf.fit.myphamstore.model.UserModel;
import vn.edu.hcmuaf.fit.myphamstore.service.IUserService;

import java.io.IOException;

@WebServlet("/reset-password")
public class ResetPasswordController extends HttpServlet {
    @Inject
    private IUserService userService;
    @Inject
    private IOtpDAO otpDAO;

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        RequestDispatcher dispatcher = req.getRequestDispatcher("/frontend/reset-password.jsp");
        dispatcher.forward(req, resp);
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String email = request.getParameter("email");
        String otp = request.getParameter("otp");
        String newPassword = request.getParameter("new-password");
        String confirmPassword = request.getParameter("confirm-password");

        if (!newPassword.equals(confirmPassword)) {
            request.setAttribute("errorMessage", "Mật khẩu không khớp!");
            request.getRequestDispatcher("/frontend/reset-password.jsp").forward(request, response);
            return;
        }

        // Kiểm tra OTP trong database hoặc cache
        boolean isValidOTP = userService.verifyOTPHash(request, response);
        System.out.println(isValidOTP);

        if (!isValidOTP) {
            request.setAttribute("errorMessage", "OTP không hợp lệ hoặc đã hết hạn!");
            request.getRequestDispatcher("/frontend/reset-password.jsp").forward(request, response);
            return;
        }

        // Cập nhật mật khẩu mới
        UserModel user = userService.findUserByEmail(email);
        boolean updateSuccess = userService.updateUserPassword(user);

        if (updateSuccess) {
            request.setAttribute("successMessage", "Đặt lại mật khẩu thành công!");
            response.sendRedirect("/login");
        } else {
            request.setAttribute("errorMessage", "Lỗi hệ thống, vui lòng thử lại!");
            request.getRequestDispatcher("/frontend/reset-password.jsp").forward(request, response);
        }
    }
}

================
File: controller/frontend/ShoppingCartController.java
================
package vn.edu.hcmuaf.fit.myphamstore.controller.frontend;

import jakarta.inject.Inject;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import vn.edu.hcmuaf.fit.myphamstore.service.ICartService;
import vn.edu.hcmuaf.fit.myphamstore.service.IProductService;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

@WebServlet(name = "ShoppingCartController", value = "/gio-hang")
public class ShoppingCartController extends HttpServlet {
    private static final long serialVersionUID = 1L;

    @Inject
    private ICartService cartService;

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String action = request.getParameter("action");
        if ("count".equals(action)) {
            cartService.getCartCount(request, response);
        } else {
            cartService.displayCart(request, response);
        }
    }


    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String action = request.getParameter("action");
        if ("add".equals(action)) {
            cartService.addToCart(request, response);
        } else if ("updateCart".equals(action)) {
            cartService.updateCart(request, response);
        } else if ("remove".equals(action)) {
            cartService.removeCartItem(request, response);
        } else if ("clear".equals(action)) {
            cartService.clearCart(request, response);
        } else if ("applyDiscount".equals(action)) {
            String discountCode = request.getParameter("discountCode");
            cartService.applyDiscountCode(request, response, discountCode);
        } else {
            cartService.displayCart(request, response);
        }
    }

}

================
File: controller/frontend/WishlistController.java
================
package vn.edu.hcmuaf.fit.myphamstore.controller.frontend;

import jakarta.inject.Inject;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import vn.edu.hcmuaf.fit.myphamstore.model.ProductModel;
import vn.edu.hcmuaf.fit.myphamstore.model.UserModel;
import vn.edu.hcmuaf.fit.myphamstore.service.IProductService;
import vn.edu.hcmuaf.fit.myphamstore.service.impl.WishlistServiceImpl;

import java.io.IOException;
import java.util.List;

@WebServlet(name = "WishlistController", value = "/wishlist")
public class WishlistController extends HttpServlet {
    @Inject
    private WishlistServiceImpl wishlistService;
    @Inject
    private IProductService productService;

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        UserModel user = (UserModel) request.getSession().getAttribute("user");
        if (user == null) {
            response.sendRedirect(request.getContextPath() + "/login");
            return;
        }
        int currentPage = 1;
        int pageSize = 4;
        if (request.getParameter("currentPage") != null) {
            currentPage = Integer.parseInt(request.getParameter("currentPage"));
        }
        if (request.getParameter("pageSize") != null) {
            pageSize = Integer.parseInt(request.getParameter("pageSize"));
        }
        List<ProductModel> productsWishlist = wishlistService.getWishlistByUserId(user.getId(), currentPage, pageSize);
        System.out.println(productsWishlist.size());
        int totalItems = wishlistService.getWishlistCountByUserId(user.getId());

        int totalPages = (int) Math.ceil((double) totalItems / pageSize);

        request.setAttribute("productsWishlist", productsWishlist);
        request.setAttribute("currentPage", currentPage);
        request.setAttribute("totalPages", totalPages);
        request.getRequestDispatcher("/frontend/wishlist.jsp").forward(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        UserModel user = (UserModel) request.getSession().getAttribute("user");
        if (user == null) {
            response.sendRedirect(request.getContextPath() + "/login");
            return;
        }
        String action = request.getParameter("action");
        long productId = Long.parseLong(request.getParameter("productId"));

        if ("add".equals(action)) {
            wishlistService.addToWishlist(user.getId(), productId);
        } else if ("remove".equals(action)) {
            wishlistService.removeFromWishlist(user.getId(), productId);
        }

        response.sendRedirect(request.getHeader("Referer"));
    }

    @Override
    protected void doDelete(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // Xóa sản phẩm khỏi wishlist
        UserModel user = (UserModel) request.getSession().getAttribute("user");
        if (user == null) {
            response.sendRedirect(request.getContextPath() + "/login");
            return;
        }
        long productId = Long.parseLong(request.getParameter("productId"));
        wishlistService.removeFromWishlist(user.getId(), productId);

        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");
        response.getWriter().write("{\"success\": true}");
    }
}

================
File: dao/daoimpl/ActivityLogDAOImpl.java
================
package vn.edu.hcmuaf.fit.myphamstore.dao.daoimpl;

import vn.edu.hcmuaf.fit.myphamstore.dao.IActivityLogDAO;
import vn.edu.hcmuaf.fit.myphamstore.model.ActivityLogModel;
import vn.edu.hcmuaf.fit.myphamstore.common.JDBIConnector;

import java.util.List;

public class ActivityLogDAOImpl implements IActivityLogDAO {

    @Override
    public void save(ActivityLogModel activityLog) {
        String sql = "INSERT INTO activity_logs (user_id, level, action, old_data, new_data, location, created_at) " +
                "VALUES (:user_id, :level, :action, :old_data, :new_data, :location, :created_at)";
        try {
            JDBIConnector.getJdbi().useHandle(handle -> handle.createUpdate(sql)
                    .bind("user_id", activityLog.getUserId())
                    .bind("level", activityLog.getLevel())
                    .bind("action", activityLog.getAction())
                    .bind("old_data", activityLog.getOldData())
                    .bind("new_data", activityLog.getNewData())
                    .bind("location", activityLog.getLocation())
                    .bind("created_at", activityLog.getCreatedAt())
                    .execute());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public ActivityLogModel findById(int id) {
        String sql = "SELECT * FROM activity_logs WHERE id = :id";
        try {
            return JDBIConnector.getJdbi().withHandle(handle -> handle.createQuery(sql)
                    .bind("id", id)
                    .mapToBean(ActivityLogModel.class)
                    .one());
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public List<ActivityLogModel> findAll() {
        String sql = "SELECT * FROM activity_logs ORDER BY created_at DESC";
        try {
            return JDBIConnector.getJdbi().withHandle(handle -> handle.createQuery(sql)
                    .mapToBean(ActivityLogModel.class)
                    .list());
        } catch (Exception e) {
            e.printStackTrace();
            return List.of();
        }
    }

    @Override
    public void update(ActivityLogModel activityLog) {
        String sql = "UPDATE activity_log SET user_id = :user_id, level = :level, action = :action, old_data = :old_data, new_data = :new_data, location = :location, created_at = :created_at WHERE id = :id";
        try {
            JDBIConnector.getJdbi().useHandle(handle -> handle.createUpdate(sql)
                    .bind("user_id", activityLog.getUserId())
                    .bind("level", activityLog.getLevel())
                    .bind("action", activityLog.getAction())
                    .bind("old_data", activityLog.getOldData())
                    .bind("new_data", activityLog.getNewData())
                    .bind("location", activityLog.getLocation())
                    .bind("created_at", activityLog.getCreatedAt())
                    .bind("id", activityLog.getId())
                    .execute());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void delete(int id) {
        String sql = "DELETE FROM activity_log WHERE id = :id";
        try {
            JDBIConnector.getJdbi().useHandle(handle -> handle.createUpdate(sql)
                    .bind("id", id)
                    .execute());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

================
File: dao/daoimpl/AddressDAOImpl.java
================
package vn.edu.hcmuaf.fit.myphamstore.dao.daoimpl;

import jakarta.enterprise.context.ApplicationScoped;
import vn.edu.hcmuaf.fit.myphamstore.common.JDBIConnector;
import vn.edu.hcmuaf.fit.myphamstore.dao.IAddressDAO;
import vn.edu.hcmuaf.fit.myphamstore.model.AddressModel;

import java.time.LocalDateTime;
import java.util.List;
@ApplicationScoped
public class AddressDAOImpl implements IAddressDAO {


    @Override
    public List<AddressModel> findByUserId(Long userId) {
        String sql = "SELECT * FROM address WHERE user_id = :user_id AND is_active = 1";
        try {
            return JDBIConnector.getJdbi().withHandle(handle -> handle.createQuery(sql)
                    .bind("user_id", userId)
                    .mapToBean(AddressModel.class)
                    .list());
        } catch (Exception e) {
            return List.of();
        }
    }

    @Override
    public boolean checkAddressIsExist(AddressModel addressModel, Long userId) {
        //get all address of user
        List<AddressModel> addressList = findByUserId((long) Integer.parseInt(userId.toString()));
        for (AddressModel address : addressList) {
            if (address.getRecipientName().equals(addressModel.getRecipientName()) &&
                    address.getRecipientPhone().equals(addressModel.getRecipientPhone()) &&
                    address.getCity().equals(addressModel.getCity()) &&
                    address.getDistrict().equals(addressModel.getDistrict()) &&
                    address.getWard().equals(addressModel.getWard()) &&
                    address.getNote().equals(addressModel.getNote())) {
                return true;
            }
        }
        return false;
    }

    @Override
    public AddressModel findAddressById(Long addressId) {
        String sql = "SELECT * FROM address WHERE id = :id";
        try {
            return JDBIConnector.getJdbi().withHandle(handle -> handle.createQuery(sql)
                    .bind("id", addressId)
                    .mapToBean(AddressModel.class)
                    .one());
        } catch (Exception e) {
            return null;
        }
    }

    @Override
    public Long save(AddressModel entity) {
        String sql = "INSERT INTO address (user_id, recipient_name, recipient_phone, city, district, ward, note, is_default, is_active, created_at, updated_at) " +
                "VALUES(:user_id, :recipient_name, :recipient_phone, :city, :district, :ward, :note, :is_default, :is_active, :created_at, :updated_at)";
        try {
            return JDBIConnector.getJdbi().withHandle(handle -> handle.createUpdate(sql)
                    .bind("user_id", entity.getUserId())
                    .bind("recipient_name", entity.getRecipientName()   == null ? "" : entity.getRecipientName())
                    .bind("recipient_phone", entity.getRecipientPhone() == null ? "" : entity.getRecipientPhone())
                    .bind("city", entity.getCity()  == null ? "" : entity.getCity())
                    .bind("district", entity.getDistrict()  == null ? "" : entity.getDistrict())
                    .bind("ward", entity.getWard() == null ? "" : entity.getWard())
                    .bind("note", entity.getNote() == null ? "" : entity.getNote())
                    .bind("is_default", entity.getIsDefault() == null ? 0 : entity.getIsDefault())
                    .bind("is_active", entity.getIsActive() == null ? 1 : entity.getIsActive())
                    .bind("created_at", entity.getCreatedAt() == null ? LocalDateTime.now() : entity.getCreatedAt())
                    .bind("updated_at", entity.getUpdatedAt() == null ? LocalDateTime.now() : entity.getUpdatedAt())
                    .executeAndReturnGeneratedKeys()
                    .mapTo(Long.class)
                    .one());
        } catch (Exception e) {
            return null;
        }
    }

    @Override
    public AddressModel update(AddressModel entity) {
        String sql = "UPDATE address SET recipient_name = :recipient_name, recipient_phone = :recipient_phone, city = :city, district = :district, ward = :ward, note = :note, is_default = :is_default, is_active = :is_active, updated_at = :updated_at WHERE id = :id";
        try {
            JDBIConnector.getJdbi().withHandle(handle -> handle.createUpdate(sql)
                    .bind("recipient_name", entity.getRecipientName())
                    .bind("recipient_phone", entity.getRecipientPhone())
                    .bind("city", entity.getCity())
                    .bind("district", entity.getDistrict())
                    .bind("ward", entity.getWard())
                    .bind("note", entity.getNote())
                    .bind("is_default", entity.getIsDefault())
                    .bind("is_active", entity.getIsActive())
                    .bind("updated_at", entity.getUpdatedAt())
                    .bind("id", entity.getId())
                    .execute());
            return entity;
        } catch (Exception e) {
            return null;
        }
    }

    @Override
    public void delete(AddressModel entity) {
        String sql = "UPDATE address SET is_active = 0 WHERE id = :id";
        try {
            JDBIConnector.getJdbi().withHandle(handle -> handle.createUpdate(sql)
                    .bind("id", entity.getId())
                    .execute());
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    @Override
    public List<AddressModel> findAll(String keyword, int currentPage, int pageSize, String orderBy) {
        return List.of();
    }

    @Override
    public Long getTotalPage(int numOfItems) {
        return 0L;
    }
}

================
File: dao/daoimpl/BrandDAOImpl.java
================
package vn.edu.hcmuaf.fit.myphamstore.dao.daoimpl;

import vn.edu.hcmuaf.fit.myphamstore.common.JDBIConnector;
import vn.edu.hcmuaf.fit.myphamstore.dao.IBrandDAO;
import vn.edu.hcmuaf.fit.myphamstore.model.BrandModel;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import static java.rmi.server.LogStream.log;

public class BrandDAOImpl implements IBrandDAO {
    @Override
    public BrandModel findBrandById(Long id) {
        String query = "SELECT * FROM brand WHERE id = :id";
        try {
            BrandModel result = JDBIConnector.getJdbi().withHandle(handle -> handle.createQuery(query)
                    .bind("id", id)
                    .mapToBean(BrandModel.class)
                    .one());
            return result;
        } catch (Exception e) {
            log("category not found");
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public BrandModel getBrandDetail(Long id) {
        String sql = "select * from brand where id=?";
        try{
            return JDBIConnector.getJdbi().withHandle(h-> h.select(sql, id).mapToBean(BrandModel.class).one());
        }catch (Exception e){
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public List<BrandModel> getAllBrands() {
        String sql = "SELECT * FROM brand";
        try {
            return JDBIConnector.getJdbi().withHandle(handle ->
                    handle.createQuery(sql).mapToBean(BrandModel.class).list()
            );
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }



    @Override
    public Long save(BrandModel entity) {
        String sql = "INSERT INTO brand (  name, logo,is_available, created_at, updated_at) " +
                "VALUES ( :name, :logo, :createdAt, :updatedAt)";
        try {
            return JDBIConnector.getJdbi().withHandle(handle -> {
                // Thực hiện câu lệnh INSERT và lấy id tự động sinh
                return handle.createUpdate(sql)
                        .bind("name", entity.getName().trim())
                        .bind("logo", entity.getLogo().trim())
                        .bind("is_available", entity.getIsAvailable())
                        .bind("createdAt", LocalDateTime.now())
                        .bind("updatedAt", LocalDateTime.now())
                        .executeAndReturnGeneratedKeys("id") // Lấy giá trị khóa chính tự động sinh
                        .mapTo(Long.class) // Ánh xạ giá trị trả về thành Long
                        .one();
            });
        }
        catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public BrandModel update(BrandModel entity) {
        BrandModel brandExisted = findBrandById(entity.getId());
        if (brandExisted == null) {
            log("Contact not found");
            return null;
        }
        String sql = "UPDATE brand SET name = :name, logo = :logo,is_available = :isAvailable , updated_at = :updatedAt WHERE id = :id";
        try {
            int result = JDBIConnector.getJdbi().withHandle(handle -> {
                return handle.createUpdate(sql)
                        .bind("name", entity.getName() == null ? brandExisted.getName() : entity.getName().trim())
                        .bind("logo", entity.getLogo() == null ? brandExisted.getLogo() : entity.getLogo())
                        .bind("isAvailable", entity.getIsAvailable() == null ? brandExisted.getIsAvailable() : entity.getIsAvailable())
                        .bind("updatedAt", LocalDateTime.now())
                        .bind("id", entity.getId())
                        .execute();
            });

            if(result > 0){
                return entity;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public void delete(BrandModel entity) {

    }

    @Override
    public List<BrandModel> findAll(String keyword, int currentPage, int pageSize, String orderBy) {
        // Sàng lọc dữ liệu đầu vào
        if (currentPage < 1) currentPage = 1;

        // Tránh SQL Injection bằng cách kiểm tra cột hợp lệ
        List<String> allowedColumns = Arrays.asList("id", "name", "logo","is_available","created_at", "updated_at");
        if (!allowedColumns.contains(orderBy)) {
            orderBy = "id";
        }

        // Xây dựng câu lệnh SQL
        String sql = "SELECT * FROM brand ";
        if (keyword != null && !keyword.trim().isEmpty()) {
            sql += "WHERE CONCAT(id, name, logo,is_available, created_at, updated_at) LIKE :keyword ";
        }
        sql += "ORDER BY " + orderBy + " " +
                "LIMIT :limit " +
                "OFFSET :offset";
        // Sử dụng JDBI để thực hiện truy vấn
        int finalCurrentPage = currentPage;
        String finalSql = sql;


        List<BrandModel> brandModels = JDBIConnector.getJdbi().withHandle(handle -> {
            // Tạo truy vấn và gán các tham số
            var query = handle.createQuery(finalSql)
                    .bind("limit", pageSize)
                    .bind("offset", (finalCurrentPage - 1) * pageSize);

            if (keyword != null && !keyword.trim().isEmpty()) {
                query.bind("keyword", "%" + keyword + "%");
            }

            // Ánh xạ kết quả truy vấn thành đối tượng UserModel
            return query.mapToBean(BrandModel.class).list();
        });
        return brandModels;
    }

    @Override
    public Long getTotalPage(int numOfItems) {
        String query = "SELECT COUNT(*) FROM brand";

        try {
            // Dùng withHandle để thực hiện câu lệnh SQL
            Long totalUser = JDBIConnector.getJdbi().withHandle(handle -> {
                return handle.createQuery(query)
                        .mapTo(Long.class)  // Ánh xạ kết quả thành kiểu Long
                        .one();  // Chỉ lấy một kết quả duy nhất
            });

            // Tính toán số trang
            if (totalUser != null) {
                long countPage = totalUser / numOfItems;
                if (totalUser % numOfItems != 0) {
                    countPage++;
                }
                return countPage;
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        return null;
    }


}

================
File: dao/daoimpl/CategoryDAOImpl.java
================
package vn.edu.hcmuaf.fit.myphamstore.dao.daoimpl;

import jakarta.enterprise.context.ApplicationScoped;
import lombok.extern.slf4j.Slf4j;
import vn.edu.hcmuaf.fit.myphamstore.common.JDBIConnector;
import vn.edu.hcmuaf.fit.myphamstore.dao.ICategoryDAO;
import vn.edu.hcmuaf.fit.myphamstore.model.CategoryModel;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import static java.rmi.server.LogStream.log;

@Slf4j
@ApplicationScoped
public class CategoryDAOImpl implements ICategoryDAO {
    @Override
    public List<CategoryModel> getAllCategories() {
        String sql = "SELECT * FROM category";
        try {
            return JDBIConnector.getJdbi().withHandle(handle ->
                    handle.createQuery(sql).mapToBean(CategoryModel.class).list()
            );
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
    @Override
    public CategoryModel findCategoryById(Long id) {
        String query = "SELECT * FROM category WHERE id = :id";
        try {
            CategoryModel result = JDBIConnector.getJdbi().withHandle(handle -> handle.createQuery(query)
                    .bind("id", id)
                    .mapToBean(CategoryModel.class)
                    .one());
            return result;
        } catch (Exception e) {
            log("category not found");
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public Long save(CategoryModel entity) {

        String sql = "INSERT INTO category ( parent_id, name, is_available, created_at, updated_at) " +
            "VALUES (:parent_id, :name, :is_available, :createdAt, :updatedAt)";
            try {
            return JDBIConnector.getJdbi().withHandle(handle -> {
            // Thực hiện câu lệnh INSERT và lấy id tự động sinh
            return handle.createUpdate(sql)
                    .bind("parent_id", entity.getParentId())
                    .bind("name", entity.getName().trim())
                    .bind("is_available", entity.getIsAvailable())
                    .bind("createdAt", LocalDateTime.now())
                    .bind("updatedAt", LocalDateTime.now())
                    .executeAndReturnGeneratedKeys("id") // Lấy giá trị khóa chính tự động sinh
                    .mapTo(Long.class) // Ánh xạ giá trị trả về thành Long
                    .one();
                });
            }
            catch (Exception e) {
                e.printStackTrace();
                return null;
            }
    }
    @Override
    public CategoryModel update(CategoryModel entity) {
    CategoryModel categoryExisted = findCategoryById(entity.getId());
        if (categoryExisted == null) {
        log("Contact not found");
            return null;
    }
        System.out.println(categoryExisted);

    String sql = "UPDATE category SET parent_id = :parent_id, name = :name, is_available = :is_available , updated_at = :updatedAt WHERE id = :id";
        try {
        int result = JDBIConnector.getJdbi().withHandle(handle -> {
            return handle.createUpdate(sql)
                    .bind("parent_id", entity.getParentId() == null ? categoryExisted.getParentId() : entity.getParentId())
                    .bind("name", entity.getName() == null ? categoryExisted.getName() : entity.getName().trim())
                    .bind("is_available", entity.getIsAvailable() == null ? categoryExisted.getIsAvailable() : entity.getIsAvailable())
                    .bind("updatedAt", LocalDateTime.now())
                    .bind("id", entity.getId())
                    .execute();
        });

        if(result > 0){
            return entity;
        }
    } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public void delete(CategoryModel entity) {

    }



    @Override
    public List<CategoryModel> findAll(String keyword, int currentPage, int pageSize, String orderBy) {
        // Sàng lọc dữ liệu đầu vào
        if (currentPage < 1) currentPage = 1;

        // Tránh SQL Injection bằng cách kiểm tra cột hợp lệ
        List<String> allowedColumns = Arrays.asList("id", "parent_id", "name","description","created_at", "updated_at");
        if (!allowedColumns.contains(orderBy)) {
            orderBy = "id";
        }

        // Xây dựng câu lệnh SQL
        String sql = "SELECT * FROM category ";
        if (keyword != null && !keyword.trim().isEmpty()) {
            sql += "WHERE CONCAT(id, parent_id, name, description, created_at, updated_at) LIKE :keyword ";
        }
        sql += "ORDER BY " + orderBy + " " +
                "LIMIT :limit " +
                "OFFSET :offset";
        // Sử dụng JDBI để thực hiện truy vấn
        int finalCurrentPage = currentPage;
        String finalSql = sql;


        List<CategoryModel> categoryModels = JDBIConnector.getJdbi().withHandle(handle -> {
            // Tạo truy vấn và gán các tham số
            var query = handle.createQuery(finalSql)
                    .bind("limit", pageSize)
                    .bind("offset", (finalCurrentPage - 1) * pageSize);

            if (keyword != null && !keyword.trim().isEmpty()) {
                query.bind("keyword", "%" + keyword + "%");
            }

            // Ánh xạ kết quả truy vấn thành đối tượng UserModel
            return query.mapToBean(CategoryModel.class).list();
        });
        return categoryModels;
    }

    @Override
    public List<CategoryModel> findAll(String keyword, int currentPage, int pageSize, String orderBy, List<Long> selectedBrands) {
        return null;
    }

    @Override
    public Long getTotalPage(int numOfItems) {
        String query = "SELECT COUNT(*) FROM category";

        try {
            // Dùng withHandle để thực hiện câu lệnh SQL
            Long totalUser = JDBIConnector.getJdbi().withHandle(handle -> {
                return handle.createQuery(query)
                        .mapTo(Long.class)  // Ánh xạ kết quả thành kiểu Long
                        .one();  // Chỉ lấy một kết quả duy nhất
            });

            // Tính toán số trang
            if (totalUser != null) {
                long countPage = totalUser / numOfItems;
                if (totalUser % numOfItems != 0) {
                    countPage++;
                }
                return countPage;
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        return null;
    }
}

================
File: dao/daoimpl/ContactDAOImpl.java
================
package vn.edu.hcmuaf.fit.myphamstore.dao.daoimpl;

import jakarta.enterprise.context.ApplicationScoped;
import lombok.extern.slf4j.Slf4j;
import vn.edu.hcmuaf.fit.myphamstore.common.ContactStatus;
import vn.edu.hcmuaf.fit.myphamstore.common.JDBIConnector;
import vn.edu.hcmuaf.fit.myphamstore.dao.IContactDAO;
import vn.edu.hcmuaf.fit.myphamstore.model.ContactModel;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import static java.rmi.server.LogStream.log;

@Slf4j
@ApplicationScoped
public class ContactDAOImpl implements IContactDAO {
    @Override
    public ContactModel findContactById(Long id) {
    String sql = "SELECT * FROM contact WHERE id = :id";
    try {
        return JDBIConnector.getJdbi().withHandle(handle -> {
            return handle.createQuery(sql)
                    .bind("id", id)
                    .mapToBean(ContactModel.class)
                    .one();
        });
    }catch (Exception e) {
        e.printStackTrace();
    }
        return null;
    }

    @Override
    public Long save(ContactModel entity) {
        String sql = "INSERT INTO contact (  email, title,content,status, created_at, updated_at) " +
                "VALUES ( :email, :title,:content,:status, :createdAt, :updatedAt)";
        try {
            return JDBIConnector.getJdbi().withHandle(handle -> {
                // Thực hiện câu lệnh INSERT và lấy id tự động sinh
                return handle.createUpdate(sql)
                        .bind("email", entity.getEmail())
                        .bind("title", entity.getTitle())
                        .bind("content", entity.getContent())
                        .bind("status", ContactStatus.PENDING)
                        .bind("createdAt", LocalDateTime.now())
                        .bind("updatedAt", LocalDateTime.now())
                        .executeAndReturnGeneratedKeys("id") // Lấy giá trị khóa chính tự động sinh
                        .mapTo(Long.class) // Ánh xạ giá trị trả về thành Long
                        .one();
            });
        }
        catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public ContactModel update(ContactModel entity) {
        ContactModel contactExisted = findContactById(entity.getId());
        if (contactExisted == null) {
            log("Contact not found");
            return null;
        }
        String sql = "UPDATE contact SET email=:email, title=:title ,content=:content,status=:status , updated_at = :updatedAt WHERE id = :id";
        try {
            int result = JDBIConnector.getJdbi().withHandle(handle -> {
                return handle.createUpdate(sql)
                        .bind("email", entity.getEmail() == null ? contactExisted.getEmail() : entity.getEmail())
                        .bind("title", entity.getTitle() == null ? contactExisted.getTitle() : entity.getTitle())
                        .bind("content", entity.getContent() == null ? contactExisted.getContent() : entity.getContent())
                        .bind("status", entity.getStatus() == null ? contactExisted.getStatus() : entity.getStatus())
                        .bind("updatedAt", LocalDateTime.now())
                        .bind("id", entity.getId())
                        .execute();
            });

            if(result > 0){
                return entity;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public void delete(ContactModel entity) {

    }

    @Override
    public List<ContactModel> findAll(String keyword, int currentPage, int pageSize, String orderBy) {
        // Sàng lọc dữ liệu đầu vào
        if (currentPage < 1) currentPage = 1;

        // Tránh SQL Injection bằng cách kiểm tra cột hợp lệ
        List<String> allowedColumns = Arrays.asList("id", "email", "title","content","status","created_at", "updated_at");
        if (!allowedColumns.contains(orderBy)) {
            orderBy = "id";
        }

        // Xây dựng câu lệnh SQL
        String sql = "SELECT * FROM brand ";
        if (keyword != null && !keyword.trim().isEmpty()) {
            sql += "WHERE CONCAT(id, email, title,content,status, created_at, updated_at) LIKE :keyword ";
        }
        sql += "ORDER BY " + orderBy + " " +
                "LIMIT :limit " +
                "OFFSET :offset";
        // Sử dụng JDBI để thực hiện truy vấn
        int finalCurrentPage = currentPage;
        String finalSql = sql;


        List<ContactModel> contactModels = JDBIConnector.getJdbi().withHandle(handle -> {
            // Tạo truy vấn và gán các tham số
            var query = handle.createQuery(finalSql)
                    .bind("limit", pageSize)
                    .bind("offset", (finalCurrentPage - 1) * pageSize);

            if (keyword != null && !keyword.trim().isEmpty()) {
                query.bind("keyword", "%" + keyword + "%");
            }

            // Ánh xạ kết quả truy vấn thành đối tượng UserModel
            return query.mapToBean(ContactModel.class).list();
        });
        return contactModels;
    }

    @Override
    public Long getTotalPage(int numOfItems) {
        String query = "SELECT COUNT(*) FROM contact";

        try {
            // Dùng withHandle để thực hiện câu lệnh SQL
            Long totalUser = JDBIConnector.getJdbi().withHandle(handle -> {
                return handle.createQuery(query)
                        .mapTo(Long.class)  // Ánh xạ kết quả thành kiểu Long
                        .one();  // Chỉ lấy một kết quả duy nhất
            });

            // Tính toán số trang
            if (totalUser != null) {
                long countPage = totalUser / numOfItems;
                if (totalUser % numOfItems != 0) {
                    countPage++;
                }
                return countPage;
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        return null;
    }
}

================
File: dao/daoimpl/CouponDAOImpl.java
================
package vn.edu.hcmuaf.fit.myphamstore.dao.daoimpl;

import vn.edu.hcmuaf.fit.myphamstore.common.JDBIConnector;
import vn.edu.hcmuaf.fit.myphamstore.dao.ICouponDAO;
import vn.edu.hcmuaf.fit.myphamstore.model.CouponModel;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static java.rmi.server.LogStream.log;

public class CouponDAOImpl implements ICouponDAO {

    @Override
    public CouponModel getCouponDetail(Long id) {
        String sql = "select * from coupon where id=?";
        try{
            return JDBIConnector.getJdbi().withHandle(h-> h.select(sql, id).mapToBean(CouponModel.class).one());
        }catch (Exception e){
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public CouponModel findCouponById(Long id) {
        String query = "SELECT * FROM coupon WHERE id = :id";
        try {
            CouponModel result = JDBIConnector.getJdbi().withHandle(handle -> handle.createQuery(query)
                    .bind("id", id)
                    .mapToBean(CouponModel.class)
                    .one());
            return result;
        } catch (Exception e) {
            log("category not found");
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public List<CouponModel> findAvailableCoupons() {
        String sql = "SELECT * FROM coupon WHERE is_available = 1 AND start_date <= NOW() AND end_date >= NOW()";
        try {
            return JDBIConnector.getJdbi().withHandle(handle ->
                    handle.createQuery(sql)
                            .mapToBean(CouponModel.class)
                            .list()
            );
        } catch (Exception e) {
            e.printStackTrace();
            return Collections.emptyList();
        }
    }


    @Override
    public Long save(CouponModel entity) {
        String sql = "INSERT INTO coupon (  code, min_order_value, discount_type,discount_value,max_discount_value,start_date,end_date,current_usage,max_usage, created_at, is_available) " +
                "VALUES (  :code, :min_order_value, :discount_type,:discount_value,:max_discount_value,:start_date,:end_date,:current_usage,:max_usage, :created_at,is_available)";
        try {
            return JDBIConnector.getJdbi().withHandle(handle -> {
                // Thực hiện câu lệnh INSERT và lấy id tự động sinh
                return handle.createUpdate(sql)
                        .bind("code", entity.getCode().trim())
                        .bind("min_order_value", entity.getMinOrderValue())
                        .bind("discount_type", entity.getDiscountType().toString())
                        .bind("discount_value", entity.getDiscountValue())
                        .bind("max_discount_value", entity.getMaxDiscountValue())
                        .bind("start_date", entity.getStartDate())
                        .bind("end_date", entity.getEndDate())
                        .bind("current_usage", entity.getCurrentUsage())
                        .bind("max_usage", entity.getMaxUsage())
                        .bind("created_at", LocalDateTime.now())
                        .executeAndReturnGeneratedKeys("id") // Lấy giá trị khóa chính tự động sinh
                        .mapTo(Long.class) // Ánh xạ giá trị trả về thành Long
                        .one();
            });
        }
        catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public CouponModel update(CouponModel entity) {
        CouponModel couponExisted = findCouponById(entity.getId());
        if (couponExisted == null) {
            log("Coupon not found");
            return null;
        }

        String sql = "UPDATE coupon SET  code = :code,min_order_value = :min_order_value,discount_type=:discount_type" +
                ",discount_value=:discount_value,max_discount_value=:max_discount_value,start_date=:start_date,end_date=:end_date,current_usage=:current_usage" +
                ",max_usage=:max_usage, created_at=:created_at,is_available = :isAvailable WHERE id = :id";
        try {
            int result = JDBIConnector.getJdbi().withHandle(handle -> {
                return handle.createUpdate(sql)
                        .bind("code", entity.getCode() == null ? couponExisted.getCode() : entity.getCode().trim())
                        .bind("min_order_value", entity.getMinOrderValue() == null ? couponExisted.getMinOrderValue() : entity.getMinOrderValue())
                        .bind("discount_type", entity.getDiscountType() == null ? couponExisted.getDiscountType().toString() : entity.getDiscountType().toString())
                        .bind("discount_value", entity.getDiscountValue() == null ? couponExisted.getDiscountValue() : entity.getDiscountValue())
                        .bind("max_discount_value", entity.getMaxDiscountValue() == null ? couponExisted.getMaxDiscountValue() : entity.getMaxDiscountValue())
                        .bind("start_date", entity.getStartDate() == null ? couponExisted.getStartDate() : entity.getStartDate())
                        .bind("end_date", entity.getEndDate() == null ? couponExisted.getEndDate() : entity.getEndDate())
                        .bind("current_usage", entity.getCurrentUsage() == null ? couponExisted.getCurrentUsage() : entity.getCurrentUsage())
                        .bind("max_usage", entity.getMaxUsage() == null ? couponExisted.getMaxUsage() : entity.getMaxUsage())
                        .bind("created_at", couponExisted.getCreatedAt())
                        .bind("isAvailable", entity.getIsAvailable() == null ? couponExisted.getIsAvailable() : entity.getIsAvailable())
                        .bind("id", entity.getId())
                        .execute();
            });

            if(result > 0){
                return entity;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public void delete(CouponModel entity) {

    }

    @Override
    public List<CouponModel> findAll(String keyword, int currentPage, int pageSize, String orderBy) {
        // Sàng lọc dữ liệu đầu vào
        if (currentPage < 1) currentPage = 1;

        // Tránh SQL Injection bằng cách kiểm tra cột hợp lệ
        List<String> allowedColumns = Arrays.asList("id", "brand_id", "code", "min_order_value", "discount_type","discount_value","max_discount_value","start_date","end_date","current_usage","created_at","is_available");
        if (!allowedColumns.contains(orderBy)) {
            orderBy = "id";
        }

        // Xây dựng câu lệnh SQL
        String sql = "SELECT * FROM coupon ";
        if (keyword != null && !keyword.trim().isEmpty()) {
            sql += "WHERE CONCAT(id, code, min_order_value, discount_type,discount_value,max_discount_value,start_date,end_date,current_usage,max_usage, created_at, is_available) LIKE :keyword ";
        }
        sql += "ORDER BY " + orderBy + " " +
                "LIMIT :limit " +
                "OFFSET :offset";
        // Sử dụng JDBI để thực hiện truy vấn
        int finalCurrentPage = currentPage;
        String finalSql = sql;


        List<CouponModel> couponModels = JDBIConnector.getJdbi().withHandle(handle -> {
            // Tạo truy vấn và gán các tham số
            var query = handle.createQuery(finalSql)
                    .bind("limit", pageSize)
                    .bind("offset", (finalCurrentPage - 1) * pageSize);

            if (keyword != null && !keyword.trim().isEmpty()) {
                query.bind("keyword", "%" + keyword + "%");
            }

            // Ánh xạ kết quả truy vấn thành đối tượng UserModel
            return query.mapToBean(CouponModel.class).list();
        });
        return couponModels;
    }

    @Override
    public Long getTotalPage(int numOfItems) {
        String query = "SELECT COUNT(*) FROM coupon";

        try {
            // Dùng withHandle để thực hiện câu lệnh SQL
            Long totalUser = JDBIConnector.getJdbi().withHandle(handle -> {
                return handle.createQuery(query)
                        .mapTo(Long.class)  // Ánh xạ kết quả thành kiểu Long
                        .one();  // Chỉ lấy một kết quả duy nhất
            });

            // Tính toán số trang
            if (totalUser != null) {
                long countPage = totalUser / numOfItems;
                if (totalUser % numOfItems != 0) {
                    countPage++;
                }
                return countPage;
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        return null;
    }

    @Override
    public CouponModel findCouponByCode(String code) {
        String sql = "SELECT * FROM coupon WHERE code = :code";
        try {
            return JDBIConnector.getJdbi().withHandle(handle ->
                    handle.createQuery(sql)
                            .bind("code", code)
                            .mapToBean(CouponModel.class)
                            .one()
            );
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
    @Override
    public int getRemainingQuantity(String code) {
        String sql = "SELECT max_usage - current_usage FROM coupon WHERE code = :code";
        try {
            return JDBIConnector.getJdbi().withHandle(handle -> handle.createQuery(sql)
                    .bind("code", code)
                    .mapTo(Integer.class)
                    .one());
        } catch (Exception e) {
            e.printStackTrace();
            return 0;
        }
    }

    @Override
    public double getDiscount(String code) {
        String sql = "SELECT discount_value FROM coupon WHERE code = :code";
        try {
            return JDBIConnector.getJdbi().withHandle(handle -> handle.createQuery(sql)
                    .bind("code", code)
                    .mapTo(Double.class)
                    .one());
        } catch (Exception e) {
            e.printStackTrace();
            return 0;
        }
    }

}

================
File: dao/daoimpl/OrderDAOImpl.java
================
package vn.edu.hcmuaf.fit.myphamstore.dao.daoimpl;

import jakarta.enterprise.context.ApplicationScoped;
import vn.edu.hcmuaf.fit.myphamstore.common.JDBIConnector;
import vn.edu.hcmuaf.fit.myphamstore.common.OrderStatus;
import vn.edu.hcmuaf.fit.myphamstore.common.PaymentMethod;
import vn.edu.hcmuaf.fit.myphamstore.dao.IOrderDAO;
import vn.edu.hcmuaf.fit.myphamstore.model.OrderDetailModel;
import vn.edu.hcmuaf.fit.myphamstore.model.OrderModel;

import java.time.LocalDateTime;
import java.util.List;
@ApplicationScoped
public class OrderDAOImpl implements IOrderDAO {
    @Override
    public Long saveOrder(OrderModel orderModel) {
        String sql = "INSERT INTO orders (address_id, user_id, status, shipping_fee, note, payment_method, total_price, order_date, confirmed_at) " +
                "VALUES(:addressId, :userId, :status, :shippingFee, :note, :paymentMethod, :totalPrice, :orderDate, :confirmedAt)";
        try{
            return JDBIConnector.getJdbi().withHandle(handle -> handle.createUpdate(sql)
                    .bind("addressId", orderModel.getAddressId())
                    .bind("userId", orderModel.getUserId())
                    .bind("status", orderModel.getStatus() == null ? OrderStatus.PENDING.name() : orderModel.getStatus().name())
                    .bind("shippingFee", orderModel.getShippingFee() == null ? 0 : orderModel.getShippingFee())
                    .bind("note", orderModel.getNote() == null ? "" : orderModel.getNote())
                    .bind("paymentMethod", orderModel.getPaymentMethod() == null ? PaymentMethod.COD : orderModel.getPaymentMethod())
                    .bind("totalPrice", orderModel.getTotalPrice() == null ? 0 : orderModel.getTotalPrice())
                    .bind("orderDate", orderModel.getOrderDate() == null ? LocalDateTime.now() : orderModel.getOrderDate())
                    .bind("confirmedAt", orderModel.getConfirmedAt() )
                    .executeAndReturnGeneratedKeys("id")
                    .mapTo(Long.class)
                    .one());
        }catch (Exception e){
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public void saveOrderDetail(OrderDetailModel orderDetailModel) {
        String sql = "INSERT INTO order_details (order_id, product_id, quantity, total_price) " +
                "VALUES(:orderId, :productId, :quantity, :totalPrice)";
        try{
            JDBIConnector.getJdbi().withHandle(handle -> handle.createUpdate(sql)
                    .bind("orderId", orderDetailModel.getOrderId())
                    .bind("productId", orderDetailModel.getProductId())
                    .bind("quantity", orderDetailModel.getQuantity())
                    .bind("totalPrice", orderDetailModel.getTotalPrice())
                    .execute());
        }catch (Exception e){
            e.printStackTrace();
        }
    }

    @Override
    public void updateOrder(OrderModel orderModel) {

        String sql = "UPDATE orders SET " +
                "address_id = :addressId, " +
                "user_id = :userId, " +
                "status = :status, " +
                "shipping_fee = :shippingFee, " +
                "note = :note, " +
                "payment_method = :paymentMethod, " +
                "total_price = :totalPrice, " +
                "order_date = :orderDate, " +
                "confirmed_at = :confirmedAt WHERE id = :id";
        try{
            JDBIConnector.getJdbi().withHandle(handle -> handle.createUpdate(sql)
                    .bind("addressId", orderModel.getAddressId())
                    .bind("userId", orderModel.getUserId())
                    .bind("status", orderModel.getStatus() == null ? OrderStatus.PENDING.name() : orderModel.getStatus().name())
                    .bind("shippingFee", orderModel.getShippingFee() == null ? 0 : orderModel.getShippingFee())
                    .bind("note", orderModel.getNote() == null ? "" : orderModel.getNote())
                    .bind("paymentMethod", orderModel.getPaymentMethod() == null ? PaymentMethod.COD : orderModel.getPaymentMethod())
                    .bind("totalPrice", orderModel.getTotalPrice() == null ? 0 : orderModel.getTotalPrice())
                    .bind("orderDate", orderModel.getOrderDate() == null ? LocalDateTime.now() : orderModel.getOrderDate())
                    .bind("confirmedAt", orderModel.getConfirmedAt()  == null ? LocalDateTime.now() : orderModel.getConfirmedAt())
                    .bind("id", orderModel.getId())
                    .execute());
        }   catch (Exception e){
            e.printStackTrace();
        }
    }

    @Override
    public OrderModel findOrderByUserId(Long userId) {
        String sql = "SELECT * FROM orders WHERE user_id = :userId";
        try{
            return JDBIConnector.getJdbi().withHandle(handle -> handle.createQuery(sql)
                    .bind("userId", userId)
                    .mapToBean(OrderModel.class)
                    .findFirst()
                    .orElse(null));
        }catch (Exception e){
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public OrderModel findOrderById(Long orderId) {
        String sql  = "SELECT * FROM orders WHERE id = :orderId";
        try{
            return JDBIConnector.getJdbi().withHandle(handle -> handle.createQuery(sql)
                    .bind("orderId", orderId)
                    .mapToBean(OrderModel.class)
                    .findFirst()
                    .orElse(null));
        }catch (Exception e){
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public List<OrderDetailModel> findOrderDetailByOrderId(Long orderId) {
        String sql = "SELECT * FROM order_details WHERE order_id = :orderId";
        try{
            return JDBIConnector.getJdbi().withHandle(handle -> handle.createQuery(sql)
                    .bind("orderId", orderId)
                    .mapToBean(OrderDetailModel.class)
                    .list());
        }catch (Exception e){
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public void updateOrderDetail(OrderDetailModel orderDetailModel) {
        String sql = "UPDATE order_details SET " +
                "order_id = :orderId, " +
                "product_id = :productId, " +
                "quantity = :quantity, " +
                "total_price = :totalPrice WHERE id = :id";
        try{
            JDBIConnector.getJdbi().withHandle(handle -> handle.createUpdate(sql)
                    .bind("orderId", orderDetailModel.getOrderId())
                    .bind("productId", orderDetailModel.getProductId())
                    .bind("quantity", orderDetailModel.getQuantity())
                    .bind("totalPrice", orderDetailModel.getTotalPrice())
                    .bind("id", orderDetailModel.getId())
                    .execute());
        }catch (Exception e){
            e.printStackTrace();
        }
    }

    @Override
    public void changeStatus(Long orderId, OrderStatus status) {
        String sql = "UPDATE orders SET status = :status WHERE id = :orderId";
        try{
            JDBIConnector.getJdbi().withHandle(handle -> handle.createUpdate(sql)
                    .bind("status", status.name())
                    .bind("orderId", orderId)
                    .execute());
        }catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public Long countAllProducts() {
        String query = "SELECT COUNT(*) FROM orders";
        try {
            return JDBIConnector.getJdbi().withHandle(handle -> handle.createQuery(query)
                    .mapTo(Long.class)
                    .one());
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public List<OrderModel> findByUserId(Long userId, int currentPage, int pageSize) {
        String sql = "SELECT * FROM `orders` WHERE user_id = :userId LIMIT :limit OFFSET :offset";
        try {
            return JDBIConnector.getJdbi().withHandle(handle -> handle.createQuery(sql)
                    .bind("userId", userId)
                    .bind("limit", pageSize)
                    .bind("offset", (currentPage - 1) * pageSize)
                    .mapToBean(OrderModel.class)
                    .list());
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public Long save(OrderModel entity) {
        return 0L;
    }

    @Override
    public OrderModel update(OrderModel entity) {
        return null;
    }

    @Override
    public void delete(OrderModel entity) {

    }

    @Override
    public List<OrderModel> findAll(String keyword, int currentPage, int pageSize, String orderBy) {
        // Sàng lọc dữ liệu đầu vào
        if (currentPage < 1) currentPage = 1;
        // Tránh SQL Injection bằng cách kiểm tra cột hợp lệ
        if (orderBy == null || !List.of("id", "address_id", "user_id", "status", "shipping_fee", "note", "payment_method", "total_price", "order_date", "confirmed_at").contains(orderBy)) {
            orderBy = "order_date, status";
        }
        // Xây dựng câu lệnh SQL
        String sql = "SELECT * FROM orders ";
        if (keyword != null && !keyword.trim().isEmpty()) {
            sql += "WHERE id LIKE :keyword OR address_id LIKE :keyword OR user_id LIKE :keyword OR status LIKE :keyword OR shipping_fee LIKE :keyword OR note LIKE :keyword OR payment_method LIKE :keyword OR total_price LIKE :keyword OR order_date LIKE :keyword OR confirmed_at LIKE :keyword ";
        }
        sql += "ORDER BY " + orderBy + " LIMIT :limit OFFSET :offset";
        // Sử dụng JDBI để thực hiện truy vấn
        int finalCurrentPage = currentPage;
        String finalSql = sql;
        List<OrderModel> orders = JDBIConnector.getJdbi().withHandle(handle -> {
            // Tạo truy vấn và gán các tham số
            var query = handle.createQuery(finalSql)
                    .bind("limit", pageSize)
                    .bind("offset", (finalCurrentPage - 1) * pageSize);

            if (keyword != null && !keyword.trim().isEmpty()) {
                query.bind("keyword", "%" + keyword + "%");
            }

            // Ánh xạ kết quả truy vấn thành đối tượng OrderModel
            return query.mapToBean(OrderModel.class).list();
        });

        return orders;
    }

    @Override
    public Long getTotalPage(int numOfItems) {
        String query = "SELECT COUNT(*) FROM orders";

        try {
            // Dùng withHandle để thực hiện câu lệnh SQL
            Long totalOrder = JDBIConnector.getJdbi().withHandle(handle -> {
                return handle.createQuery(query)
                        .mapTo(Long.class)  // Ánh xạ kết quả thành kiểu Long
                        .one();  // Chỉ lấy một kết quả duy nhất
            });
            // Tính toán số trang
            if (totalOrder != null) {
                long countPage = totalOrder / numOfItems;
                if (countPage % numOfItems != 0) {
                    countPage++;
                }
                return countPage;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
}

================
File: dao/daoimpl/OtpDAOImpl.java
================
package vn.edu.hcmuaf.fit.myphamstore.dao.daoimpl;

import jakarta.enterprise.context.ApplicationScoped;
import vn.edu.hcmuaf.fit.myphamstore.common.JDBIConnector;
import vn.edu.hcmuaf.fit.myphamstore.common.PasswordUtils;
import vn.edu.hcmuaf.fit.myphamstore.dao.IOtpDAO;

import java.time.LocalDateTime;

@ApplicationScoped
public class OtpDAOImpl implements IOtpDAO {
    @Override
    public void saveOtp(String email, String otp) {
        System.out.println(otp);
        String sql = "INSERT INTO otp (email, otp, time_expire) VALUES (?, ?, ?)";
        try{
            JDBIConnector.getJdbi().useHandle(handle -> {
                handle.createUpdate(sql)
                        .bind(0, email)
                        .bind(1, otp)
                        .bind(2, LocalDateTime.now().plusMinutes(15))
                        .execute();
            });
        }catch (Exception e){
            e.printStackTrace();
        }
    }

    @Override
    public Boolean verifyOtp(String email, String otp) {
        String sql = "SELECT * FROM otp WHERE email = ? AND otp = ?";
        try {
            return JDBIConnector.getJdbi().withHandle(handle -> {
                return handle.createQuery(sql)
                        .bind(0, email)
                        .bind(1, otp)
                        .mapTo(Boolean.class)
                        .findFirst()
                        .orElse(false);
            });
        }catch (Exception e){
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public Boolean verifyOtpHash(String email, String otp) {
        String sql = "SELECT otp FROM otp WHERE email = ?";
        try {

            String hashedOtp = JDBIConnector.getJdbi().withHandle(handle ->
                    handle.createQuery(sql)
                            .bind(0, email)
                            .mapTo(String.class)
                            .findFirst()
                            .orElse(null)
            );
            System.out.println(hashedOtp);
            System.out.println(otp);
            System.out.println("Hihi"+PasswordUtils.verifyPassword(otp.trim(),hashedOtp.trim()));
            if (hashedOtp != null) {
                return PasswordUtils.verifyPassword(hashedOtp.trim(),otp.trim());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }

    @Override
    public String generateOtp() {
        //tao ra chuoi ngau nhien 6 ky tu
        String otp = "";
        for (int i = 0; i < 6; i++) {
            otp += (int) (Math.random() * 10);
        }
        System.out.println("otp moi tao ne"+otp);
        return otp;
    }
}

================
File: dao/daoimpl/ProductDAOImpl.java
================
package vn.edu.hcmuaf.fit.myphamstore.dao.daoimpl;

import jakarta.enterprise.context.ApplicationScoped;
import vn.edu.hcmuaf.fit.myphamstore.common.FormatMoney;
import vn.edu.hcmuaf.fit.myphamstore.common.JDBIConnector;
import vn.edu.hcmuaf.fit.myphamstore.dao.IProductDAO;
import vn.edu.hcmuaf.fit.myphamstore.model.ProductModel;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

@ApplicationScoped
public class ProductDAOImpl implements IProductDAO {

    @Override
    public List<ProductModel> getFilteredProducts(String keyword, String[] selectedCategories, String[] selectedBrands, String priceRange, int currentPage, int pageSize, String orderBy) {
        // Input validation
        if (currentPage < 1) currentPage = 1;

        // Prevent SQL Injection by validating the orderBy column
        List<String> allowedColumns = Arrays.asList("id", "name", "price", "stock", "soldQuantity", "description", "isAvailable", "thumbnail", "created_at", "updated_at", "categoryId", "brandId");
        if (!allowedColumns.contains(orderBy)) {
            orderBy = "id";
        }

        // Build the SQL query
        StringBuilder sql = new StringBuilder("SELECT * FROM product WHERE 1=1 ");
        if (keyword != null && !keyword.trim().isEmpty()) {
            sql.append("AND CONCAT(id, name, price, stock, sold_quantity, description, is_available, thumbnail, category_id, brand_id, created_at, updated_at) LIKE :keyword ");
        }
        if (selectedCategories != null && selectedCategories.length > 0) {
            sql.append("AND category_id IN (<categories>) ");
        }
        if (selectedBrands != null && selectedBrands.length > 0) {
            sql.append("AND brand_id IN (<brands>) ");
        }
        if (priceRange != null && !priceRange.trim().isEmpty()) {
            String[] prices = priceRange.split("-");
            if (prices.length == 2) {
                try {
                    int minPrice = Integer.parseInt(prices[0].trim().replaceAll("[^\\d]", ""));
                    int maxPrice = Integer.parseInt(prices[1].trim().replaceAll("[^\\d]", ""));
                    sql.append("AND price BETWEEN :minPrice AND :maxPrice ");
                } catch (NumberFormatException e) {
                    e.printStackTrace();
                }
            }
        }
        sql.append("ORDER BY ").append(orderBy).append(" LIMIT :limit OFFSET :offset");

        // Use JDBI to execute the query
        int finalCurrentPage = currentPage;
        String finalSql = sql.toString();

        List<ProductModel> products = JDBIConnector.getJdbi().withHandle(handle -> {
            var query = handle.createQuery(finalSql)
                    .bind("limit", pageSize)
                    .bind("offset", (finalCurrentPage - 1) * pageSize);

            if (keyword != null && !keyword.trim().isEmpty()) {
                query.bind("keyword", "%" + keyword + "%");
            }
            if (selectedCategories != null && selectedCategories.length > 0) {
                query.bindList("categories", Arrays.asList(selectedCategories));
            }
            if (selectedBrands != null && selectedBrands.length > 0) {
                query.bindList("brands", Arrays.asList(selectedBrands));
            }
            if (priceRange != null && !priceRange.trim().isEmpty()) {
                String[] prices = priceRange.split("-");
                if (prices.length == 2) {
                    try {
                        int minPrice = Integer.parseInt(prices[0].trim().replaceAll("[^\\d]", ""));
                        int maxPrice = Integer.parseInt(prices[1].trim().replaceAll("[^\\d]", ""));
                        query.bind("minPrice", minPrice);
                        query.bind("maxPrice", maxPrice);
                    } catch (NumberFormatException e) {
                        e.printStackTrace();
                    }
                }
            }

            return query.mapToBean(ProductModel.class).list();
        });
        return products;
    }

    @Override
    public ProductModel getProductDetail(Long id) {
        String sql = "select * from product where id=?";
        try{
            return JDBIConnector.getJdbi().withHandle(h-> h.select(sql, id).mapToBean(ProductModel.class).one());
        }catch (Exception e){
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public List<ProductModel> getProductsByCategory(Long categoryId) {
        String sql = "SELECT * FROM product WHERE category_id = ?";
        try {
            return JDBIConnector.getJdbi().withHandle(handle ->
                    handle.select(
                                    sql,categoryId
                            ).mapToBean(ProductModel.class)
                            .list());
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public List<ProductModel> getLatestProductsByCategory(Long categoryId, int limit) {
        String sql = "SELECT * FROM product WHERE category_id = :categoryId ORDER BY created_at DESC LIMIT :limit";
        return JDBIConnector.getJdbi().withHandle(handle ->
                handle.createQuery(sql)
                        .bind("categoryId", categoryId)
                        .bind("limit", limit)
                        .mapToBean(ProductModel.class)
                        .list()
        );
    }

    @Override
    public Long save(ProductModel entity) {
        String sql = "INSERT INTO product (name, price, cost_price, stock, sold_quantity, description, is_available, thumbnail, brand_id, category_id, created_at, updated_at) " +
                "VALUES (:name, :price, :costPrice, :stock, :soldQuantity, :description, :isAvailable, :thumbnail, :brandId, :categoryId, :createdAt, :updatedAt)";
        try{
            return JDBIConnector.getJdbi().withHandle(handle -> {
                return handle.createUpdate(sql)
                        .bind("name", entity.getName() != null ? entity.getName().trim() : "")
                        .bind("price", entity.getPrice() != null ? FormatMoney.formatCurrency(entity.getPrice()) : FormatMoney.formatCurrency(0L))
                        .bind("costPrice", entity.getCostPrice() != null ? FormatMoney.formatCurrency(entity.getCostPrice()) : FormatMoney.formatCurrency(0L))
                        .bind("stock", entity.getStock() != null ? entity.getStock() : 0)
                        .bind("soldQuantity", entity.getSoldQuantity() != null ? entity.getSoldQuantity() : 0)
                        .bind("description", entity.getDescription() != null ? entity.getDescription().trim() : "")
                        .bind("isAvailable", entity.getIsAvailable() != null ? entity.getIsAvailable() : true)
                        .bind("thumbnail", entity.getThumbnail() != null ? entity.getThumbnail().trim() : "")
                        .bind("brandId", entity.getBrandId() != null ? entity.getBrandId() : 1)
                        .bind("categoryId", entity.getCategoryId() != null ? entity.getCategoryId() : 1)
                        .bind("createdAt", new Timestamp(System.currentTimeMillis()))
                        .bind("updatedAt", new Timestamp(System.currentTimeMillis()))
                        .executeAndReturnGeneratedKeys("id")
                        .mapTo(Long.class)
                        .one();
            });
        }catch (Exception e){
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public ProductModel update(ProductModel entity) {
        // Kiểm tra sự tồn tại của người dùng
        ProductModel productModel = this.getProductDetail(entity.getId());
        if (productModel == null) return null;

        // SQL để cập nhật thông tin người dùng
        String sql = "UPDATE product SET name = :name, price = :price, cost_price = :costPrice, stock = :stock, " +
                "sold_quantity = :soldQuantity, description = :description, is_available = :isAvailable, thumbnail = :thumbnail, brand_id = :brandId," +
                "category_id = :categoryId, created_at = :createdAt, updated_at = :updatedAt WHERE id = :id";

        try {
            int result = JDBIConnector.getJdbi().withHandle(handle -> {
                return handle.createUpdate(sql)
                        .bind("name", entity.getName() != null ? entity.getName().trim() : productModel.getName())
                        .bind("price", entity.getPrice() != null ? FormatMoney.formatCurrency(entity.getPrice()) : FormatMoney.formatCurrency(productModel.getPrice()))
                        .bind("costPrice", entity.getCostPrice() != null ? FormatMoney.formatCurrency(entity.getCostPrice()) : FormatMoney.formatCurrency(productModel.getCostPrice()))
                        .bind("stock", entity.getStock() != null ? entity.getStock() : productModel.getStock())
                        .bind("soldQuantity", entity.getSoldQuantity() != null ? entity.getSoldQuantity() : productModel.getSoldQuantity())
                        .bind("description", entity.getDescription() != null ? entity.getDescription().trim() : productModel.getDescription())
                        .bind("isAvailable", entity.getIsAvailable() != null ? entity.getIsAvailable() : productModel.getIsAvailable())
                        .bind("thumbnail", entity.getThumbnail() != null ? entity.getThumbnail().trim() : productModel.getThumbnail())
                        .bind("brandId", entity.getBrandId() != null ? entity.getBrandId() : productModel.getBrandId())
                        .bind("categoryId", entity.getCategoryId() != null ? entity.getCategoryId() : productModel.getCategoryId())
                        .bind("createdAt", productModel.getCreatedAt())
                        .bind("updatedAt", new Timestamp(System.currentTimeMillis()))
                        .bind("id", productModel.getId())
                        .execute(); // Thực thi câu lệnh UPDATE và trả về số bản ghi bị ảnh hưởng
            });

            if (result > 0) {
                return entity; // Nếu có bản ghi bị cập nhật, trả về đối tượng người dùng đã cập nhật
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        return null; // Nếu không có bản ghi nào được cập nhật
    }

    @Override
    public void delete(ProductModel entity) {

    }
    @Override
    public List<ProductModel> getAllProducts() {
        String sql = "SELECT * FROM product";
        return JDBIConnector.getJdbi().withHandle(handle ->
                handle.createQuery(sql).mapToBean(ProductModel.class).list()
        );
    }

    @Override
    public List<ProductModel> findVariantsByProductId(Long productId) {
        String sql = "SELECT * FROM product_variant WHERE product_id = :productId";
        return JDBIConnector.getJdbi().withHandle(handle ->
                handle.createQuery(sql)
                        .bind("product_id", productId)
                        .mapToBean(ProductModel.class)
                        .list()
        );
    }
    @Override
    public List<ProductModel> getLatestProducts() {
        String sql = "SELECT * FROM product ORDER BY created_at DESC LIMIT 5";
        return JDBIConnector.getJdbi().withHandle(handle ->
                handle.createQuery(sql)
                        .mapToBean(ProductModel.class)
                        .list()
        );
    }

    @Override
    public Long countAllProducts() {
        String query = "SELECT COUNT(*) FROM product";
        try {
            return JDBIConnector.getJdbi().withHandle(handle -> {
                return handle.createQuery(query)
                        .mapTo(Long.class)
                        .one();
            });
        } catch (Exception e) {
            e.printStackTrace();
        }
        return 0L;
    }

    @Override
    public List<ProductModel> findProduct(Long productId) {
        String sql = "SELECT * FROM product WHERE id = :productId";
        return JDBIConnector.getJdbi().withHandle(handle ->
                handle.createQuery(sql)
                        .bind("productId", productId)
                        .mapToBean(ProductModel.class)
                        .list()
        );
    }

    @Override
    public List<ProductModel> findAll(String keyword, int currentPage, int pageSize, String orderBy) {
        // Sàng lọc dữ liệu đầu vào
        if (currentPage < 1) currentPage = 1;

        // Tránh SQL Injection bằng cách kiểm tra cột hợp lệ
        List<String> allowedColumns = Arrays.asList("id", "name", "price", "stock", "soldQuantity", "description", "isAvailable", "thumbnail", "created_at", "updated_at", "categoryId", "brandId");
        if (!allowedColumns.contains(orderBy)) {
            orderBy = "id";
        }

        // Xây dựng câu lệnh SQL
        String sql = "SELECT * FROM product ";
        if (keyword != null && !keyword.trim().isEmpty()) {
            sql += "WHERE CONCAT(id, name, price, stock, sold_quantity, description, is_available, thumbnail,  category_id, brand_id,created_at, updated_at) LIKE :keyword ";
        }
        sql += "ORDER BY " + orderBy + " " +
                "LIMIT :limit " +
                "OFFSET :offset";
        // Sử dụng JDBI để thực hiện truy vấn
        int finalCurrentPage = currentPage;
        String finalSql = sql;


        List<ProductModel> products = JDBIConnector.getJdbi().withHandle(handle -> {
            // Tạo truy vấn và gán các tham số
            var query = handle.createQuery(finalSql)
                    .bind("limit", pageSize)
                    .bind("offset", (finalCurrentPage - 1) * pageSize);

            if (keyword != null && !keyword.trim().isEmpty()) {
                query.bind("keyword", "%" + keyword + "%");
            }

            // Ánh xạ kết quả truy vấn thành đối tượng UserModel
            return query.mapToBean(ProductModel.class).list();
        });
        return products;
    }

    @Override
    public Long getTotalPage(int numOfItems) {
        String query = "SELECT COUNT(*) FROM product";

        try {
            // Dùng withHandle để thực hiện câu lệnh SQL
            Long totalUser = JDBIConnector.getJdbi().withHandle(handle -> {
                return handle.createQuery(query)
                        .mapTo(Long.class)  // Ánh xạ kết quả thành kiểu Long
                        .one();  // Chỉ lấy một kết quả duy nhất
            });

            // Tính toán số trang
            if (totalUser != null) {
                long countPage = totalUser / numOfItems;
                if (totalUser % numOfItems != 0) {
                    countPage++;
                }
                return countPage;
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        return null;
    }

}

================
File: dao/daoimpl/ProductImageDAOImpl.java
================
package vn.edu.hcmuaf.fit.myphamstore.dao.daoimpl;

import vn.edu.hcmuaf.fit.myphamstore.common.JDBIConnector;
import vn.edu.hcmuaf.fit.myphamstore.dao.IProductImageDAO;
import vn.edu.hcmuaf.fit.myphamstore.model.ProductImageModel;

import java.util.Arrays;
import java.util.List;

import static java.rmi.server.LogStream.log;

public class ProductImageDAOImpl implements IProductImageDAO {
    @Override
    public List<ProductImageModel> getProductImageById(Long productId) {
        String query = "SELECT * FROM product_image WHERE product_id = :productId";
        try {
            List<ProductImageModel> result = JDBIConnector.getJdbi().withHandle(handle -> handle.createQuery(query)
                    .bind("productId", productId)
                    .mapToBean(ProductImageModel.class)
                    .list());
            return result;
        } catch (Exception e) {
            log("category not found");
            e.printStackTrace();
        return null;
        }
    }

    @Override
    public ProductImageModel findProductImageById(Long id) {
        String query = "SELECT * FROM review WHERE id = :id";
        try {
            ProductImageModel result = JDBIConnector.getJdbi().withHandle(handle -> handle.createQuery(query)
                    .bind("id", id)
                    .mapToBean(ProductImageModel.class)
                    .one());
            return result;
        } catch (Exception e) {
            log("category not found");
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public Long save(ProductImageModel entity) {
        String sql = "INSERT INTO product_image (url, product_id) " +
                "VALUES ( :url, :productId)";
        try {
            return JDBIConnector.getJdbi().withHandle(handle -> {
                // Thực hiện câu lệnh INSERT và lấy id tự động sinh
                return handle.createUpdate(sql)
                        .bind("url", entity.getUrl())
                        .bind("productId", entity.getProductId())
                        .executeAndReturnGeneratedKeys("id") // Lấy giá trị khóa chính tự động sinh
                        .mapTo(Long.class) // Ánh xạ giá trị trả về thành Long
                        .one();
            });
        }
        catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public ProductImageModel update(ProductImageModel entity) {
        ProductImageModel productImageExisted = findProductImageById(entity.getId());
        if (productImageExisted == null) {
            log("Contact not found");
            return null;
        }
        String sql = "UPDATE product_image SET product_id = :productId, url=:url WHERE id = :id";
        try {
            int result = JDBIConnector.getJdbi().withHandle(handle -> {
                return handle.createUpdate(sql)
                        .bind("productId", entity.getProductId())
                        .bind("url", entity.getUrl() == null ? productImageExisted.getUrl() : entity.getUrl())
                        .bind("id", entity.getId())
                        .execute();
            });

            if(result > 0){
                return entity;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public void delete(ProductImageModel entity) {
        String query = "DELETE FROM product_image WHERE id = :id";
        try{
            JDBIConnector.getJdbi().useHandle(handle -> {
                handle.createUpdate(query)
                        .bind("id", entity.getId())
                        .execute();
            });
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public List<ProductImageModel> findAll(String keyword, int currentPage, int pageSize, String orderBy) {
        // Sàng lọc dữ liệu đầu vào
        if (currentPage < 1) currentPage = 1;

        // Tránh SQL Injection bằng cách kiểm tra cột hợp lệ
        List<String> allowedColumns = Arrays.asList("id", "product_id","url");
        if (!allowedColumns.contains(orderBy)) {
            orderBy = "id";
        }

        // Xây dựng câu lệnh SQL
        String sql = "SELECT * FROM product_image ";
        if (keyword != null && !keyword.trim().isEmpty()) {
            sql += "WHERE CONCAT(id,  product_id, url) LIKE :keyword ";
        }
        sql += "ORDER BY " + orderBy + " " +
                "LIMIT :limit " +
                "OFFSET :offset";
        // Sử dụng JDBI để thực hiện truy vấn
        int finalCurrentPage = currentPage;
        String finalSql = sql;


        List<ProductImageModel> productImageModels = JDBIConnector.getJdbi().withHandle(handle -> {
            // Tạo truy vấn và gán các tham số
            var query = handle.createQuery(finalSql)
                    .bind("limit", pageSize)
                    .bind("offset", (finalCurrentPage - 1) * pageSize);

            if (keyword != null && !keyword.trim().isEmpty()) {
                query.bind("keyword", "%" + keyword + "%");
            }

            // Ánh xạ kết quả truy vấn thành đối tượng UserModel
            return query.mapToBean(ProductImageModel.class).list();
        });
        return productImageModels;
    }

    @Override
    public Long getTotalPage(int numOfItems) {
        String query = "SELECT COUNT(*) FROM product_image";

        try {
            // Dùng withHandle để thực hiện câu lệnh SQL
            Long totalUser = JDBIConnector.getJdbi().withHandle(handle -> {
                return handle.createQuery(query)
                        .mapTo(Long.class)  // Ánh xạ kết quả thành kiểu Long
                        .one();  // Chỉ lấy một kết quả duy nhất
            });

            // Tính toán số trang
            if (totalUser != null) {
                long countPage = totalUser / numOfItems;
                if (totalUser % numOfItems != 0) {
                    countPage++;
                }
                return countPage;
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        return null;
    }
}

================
File: dao/daoimpl/ProductVariantDAOImpl.java
================
package vn.edu.hcmuaf.fit.myphamstore.dao.daoimpl;

import vn.edu.hcmuaf.fit.myphamstore.common.JDBIConnector;
import vn.edu.hcmuaf.fit.myphamstore.dao.IProductVariantDAO;
import vn.edu.hcmuaf.fit.myphamstore.model.ProductModel;
import vn.edu.hcmuaf.fit.myphamstore.model.ProductVariant;

import java.util.List;

public class ProductVariantDAOImpl implements IProductVariantDAO {
    @Override
    public Long save(ProductVariant entity) {
        String sql = "INSERT INTO product_variant (product_id, name, price, cost_price, stock, sold_quantity, is_available) " +
                "VALUES ( :productId, :name, :price, :costPrice, :stock, :soldQuantity, :isAvailable)";
        try{
         return JDBIConnector.getJdbi().withHandle(handle -> handle.createUpdate(sql)
                .bind("productId", entity.getProductId() == null ? 0 : entity.getProductId())
                 .bind("name", entity.getName() == null ? "" : entity.getName())
                    .bind("price", entity.getPrice() == null ? 0 : entity.getPrice())
                    .bind("costPrice", entity.getCostPrice() == null ? 0 : entity.getCostPrice())
                    .bind("stock", entity.getStock() == null ? 0 : entity.getStock())
                    .bind("soldQuantity", entity.getSoldQuantity() == null ? 0 : entity.getSoldQuantity())
                    .bind("isAvailable", entity.getIsAvailable() == null || entity.getIsAvailable())
                .executeAndReturnGeneratedKeys("id")
                .mapTo(Long.class)
                .one());
        }catch (Exception e){
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public ProductVariant update(ProductVariant entity) {
        return null;
    }

    @Override
    public void delete(ProductVariant entity) {
        String sql = "DELETE FROM product_variant WHERE id = :id";
        try{
            JDBIConnector.getJdbi().withHandle(handle -> handle.createUpdate(sql)
                    .bind("id", entity.getId())
                    .execute());
        }catch (Exception e){
            e.printStackTrace();
        }
    }

    @Override
    public List<ProductVariant> findAll(String keyword, int currentPage, int pageSize, String orderBy) {
        return List.of();
    }

    @Override
    public Long getTotalPage(int numOfItems) {
        return 0L;
    }

    @Override
    public List<ProductVariant> findAllByProduct(ProductModel productModel) {
        String sql = "SELECT * FROM product_variant WHERE product_id = :productId";
        try{
            return JDBIConnector.getJdbi().withHandle(handle -> handle.createQuery(sql)
                    .bind("productId", productModel.getId())
                    .mapToBean(ProductVariant.class)
                    .list());
        }catch (Exception e){
            e.printStackTrace();
            return List.of();
        }
    }
}

================
File: dao/daoimpl/ReviewDAOImpl.java
================
package vn.edu.hcmuaf.fit.myphamstore.dao.daoimpl;

import vn.edu.hcmuaf.fit.myphamstore.common.JDBIConnector;
import vn.edu.hcmuaf.fit.myphamstore.dao.IReviewDAO;
import vn.edu.hcmuaf.fit.myphamstore.model.ReviewModel;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import static java.rmi.server.LogStream.log;

public class ReviewDAOImpl implements IReviewDAO {
    @Override
    public ReviewModel findReviewById(Long id) {
        String query = "SELECT * FROM review WHERE id = :id";
        try {
            ReviewModel result = JDBIConnector.getJdbi().withHandle(handle -> handle.createQuery(query)
                    .bind("id", id)
                    .mapToBean(ReviewModel.class)
                    .one());
            return result;
        } catch (Exception e) {
            log("category not found");
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public ReviewModel getReviewDetail(Long id) {
        String sql = "select * from review where id=?";
        try{
            return JDBIConnector.getJdbi().withHandle(h-> h.select(sql, id).mapToBean(ReviewModel.class).one());
        }catch (Exception e){
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public List<ReviewModel> getAllReviewsByProductId(Long id) {
        String sql = "SELECT * FROM review WHERE product_id = :id";
        try {
            return JDBIConnector.getJdbi().withHandle(handle -> handle.createQuery(sql)
                    .bind("id", id)
                    .mapToBean(ReviewModel.class)
                    .list());
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }

    }

    @Override
    public Long save(ReviewModel entity) {
        String sql = "INSERT INTO review ( user_id, product_id,rating,comment, created_at, updated_at) " +
                "VALUES ( :userId, :productId,:rating,:comment, :createdAt, :updatedAt)";
        try {
            return JDBIConnector.getJdbi().withHandle(handle -> {
                // Thực hiện câu lệnh INSERT và lấy id tự động sinh
                return handle.createUpdate(sql)
                        .bind("user_id", entity.getUserId())
                        .bind("product_id", entity.getProductId())
                        .bind("rating", entity.getRating())
                        .bind("comment", entity.getComment())
                        .bind("createdAt", LocalDateTime.now())
                        .bind("updatedAt", LocalDateTime.now())
                        .executeAndReturnGeneratedKeys("id") // Lấy giá trị khóa chính tự động sinh
                        .mapTo(Long.class) // Ánh xạ giá trị trả về thành Long
                        .one();
            });
        }
        catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
    @Override
    public Long saveReview(ReviewModel entity, Long userId, Long productId) {
        String sql = "INSERT INTO review (user_id, product_id, rating, comment, created_at, updated_at) " +
                "VALUES (:userId, :productId, :rating, :comment, :createdAt, :updatedAt)";
        try {
            return JDBIConnector.getJdbi().withHandle(handle -> {
                return handle.createUpdate(sql)
                        .bind("userId", userId)  // Đúng tên tham số trong SQL
                        .bind("productId", productId)  // Đúng tên tham số trong SQL
                        .bind("rating", entity.getRating())
                        .bind("comment", entity.getComment())
                        .bind("createdAt", LocalDateTime.now())
                        .bind("updatedAt", LocalDateTime.now())
                        .executeAndReturnGeneratedKeys("id")
                        .mapTo(Long.class)
                        .one();
            });
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public ReviewModel update(ReviewModel entity) {
        ReviewModel reviewExisted = findReviewById(entity.getId());
        if (reviewExisted == null) {
            log("Contact not found");
            return null;
        }


        String sql = "UPDATE review SET user_id = :userId, product_id = :productId,rating = :rating,comment=:comment , updated_at = :updatedAt WHERE id = :id";
        try {
            int result = JDBIConnector.getJdbi().withHandle(handle -> {
                return handle.createUpdate(sql)
                        .bind("userId", entity.getUserId())
                        .bind("productId", entity.getProductId())
                        .bind("rating", entity.getRating() == null ? reviewExisted.getRating() : entity.getRating())
                        .bind("comment", entity.getComment()== null ? reviewExisted.getComment() : entity.getComment())
                        .bind("updatedAt", LocalDateTime.now())
                        .bind("id", entity.getId())
                        .execute();
            });

            if(result > 0){
                return entity;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public void delete(ReviewModel entity) {

    }

    @Override
    public List<ReviewModel> findAll(String keyword, int currentPage, int pageSize, String orderBy) {
        // Sàng lọc dữ liệu đầu vào
        if (currentPage < 1) currentPage = 1;

        // Tránh SQL Injection bằng cách kiểm tra cột hợp lệ
        List<String> allowedColumns = Arrays.asList("id", "user_id", "product_id","rating","comment","created_at", "updated_at");
        if (!allowedColumns.contains(orderBy)) {
            orderBy = "id";
        }

        // Xây dựng câu lệnh SQL
        String sql = "SELECT * FROM review ";
        if (keyword != null && !keyword.trim().isEmpty()) {
            sql += "WHERE CONCAT(id, user_id, product_id,rating,comment, created_at, updated_at) LIKE :keyword ";
        }
        sql += "ORDER BY " + orderBy + " " +
                "LIMIT :limit " +
                "OFFSET :offset";
        // Sử dụng JDBI để thực hiện truy vấn
        int finalCurrentPage = currentPage;
        String finalSql = sql;


        List<ReviewModel> reviewModels = JDBIConnector.getJdbi().withHandle(handle -> {
            // Tạo truy vấn và gán các tham số
            var query = handle.createQuery(finalSql)
                    .bind("limit", pageSize)
                    .bind("offset", (finalCurrentPage - 1) * pageSize);

            if (keyword != null && !keyword.trim().isEmpty()) {
                query.bind("keyword", "%" + keyword + "%");
            }

            // Ánh xạ kết quả truy vấn thành đối tượng UserModel
            return query.mapToBean(ReviewModel.class).list();
        });
        return reviewModels;
    }

    @Override
    public Long getTotalPage(int numOfItems) {
        String query = "SELECT COUNT(*) FROM review";

        try {
            // Dùng withHandle để thực hiện câu lệnh SQL
            Long totalUser = JDBIConnector.getJdbi().withHandle(handle -> {
                return handle.createQuery(query)
                        .mapTo(Long.class)  // Ánh xạ kết quả thành kiểu Long
                        .one();  // Chỉ lấy một kết quả duy nhất
            });

            // Tính toán số trang
            if (totalUser != null) {
                long countPage = totalUser / numOfItems;
                if (totalUser % numOfItems != 0) {
                    countPage++;
                }
                return countPage;
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        return null;
    }
}

================
File: dao/daoimpl/RoleDAOImpl.java
================
package vn.edu.hcmuaf.fit.myphamstore.dao.daoimpl;

import jakarta.enterprise.context.ApplicationScoped;
import vn.edu.hcmuaf.fit.myphamstore.common.JDBIConnector;
import vn.edu.hcmuaf.fit.myphamstore.common.RoleType;
import vn.edu.hcmuaf.fit.myphamstore.dao.IRoleDAO;
import vn.edu.hcmuaf.fit.myphamstore.model.RoleModel;

import java.util.ArrayList;
import java.util.List;
@ApplicationScoped
public class RoleDAOImpl implements IRoleDAO {
    @Override
    public List<RoleModel> findListRoleByUserId(Long userId) {
        String sql = "SELECT r.* FROM user AS u " +
                "JOIN user_has_role AS u_r ON u.id = u_r.user_id " +
                "JOIN role AS r ON r.id = u_r.role_id " +
                "WHERE u.id = :userId";

       try {
            List<RoleModel> roles = JDBIConnector.getJdbi().withHandle(handle ->
                    handle.createQuery(sql)
                            .bind("userId", userId)
                            .mapToBean(RoleModel.class)
                            .list()
            );
            return roles;
        } catch (Exception e) {
            e.printStackTrace();
            return new ArrayList<>(); // Trả về danh sách rỗng thay vì null để tránh lỗi NPE
        }
    }

    @Override
    public void setRoleToUser(String roleType, Long userId) {
        System.out.println(userId);
        RoleModel roleModel = this.findRoleByName(roleType);
        System.out.println(roleModel);
        String sql = "INSERT INTO user_has_role (role_id, user_id) VALUES (:role_id, :user_id)";
        try{
            JDBIConnector.getJdbi().useHandle(handle ->{
                handle.createUpdate(sql)
                        .bind("role_id", roleModel.getId())
                        .bind("user_id", userId)
                        .execute()
                        ;
            });
        }catch (Exception e){
            e.printStackTrace();
        }
    }

    @Override
    public RoleModel findRoleByName(String roleType) {
        String sql = "SELECT * FROM role WHERE name = :roleName";
        try{
            return JDBIConnector.getJdbi().withHandle(handle ->{
                return handle.createQuery(sql)
                        .bind("roleName", roleType.trim())
                        .mapToBean(RoleModel.class)
                        .one();
            });
        }catch (Exception e){
        return null;
        }
    }

}

================
File: dao/daoimpl/SlideDAOImpl.java
================
package vn.edu.hcmuaf.fit.myphamstore.dao.daoimpl;

import vn.edu.hcmuaf.fit.myphamstore.common.JDBIConnector;
import vn.edu.hcmuaf.fit.myphamstore.dao.ISlideDAO;

import vn.edu.hcmuaf.fit.myphamstore.model.SlideModel;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import static java.rmi.server.LogStream.log;

public class SlideDAOImpl implements ISlideDAO {

    @Override
    public Long save(SlideModel entity) {
        String sql = "INSERT INTO slide ( image, created_at, updated_at) " +
                "VALUES ( :image, :createdAt, :updatedAt)";
        try {
            return JDBIConnector.getJdbi().withHandle(handle -> {
                // Thực hiện câu lệnh INSERT và lấy id tự động sinh
                return handle.createUpdate(sql)
                        .bind("image", entity.getImage().trim())
                        .bind("createdAt", LocalDateTime.now())
                        .bind("updatedAt", LocalDateTime.now())
                        .executeAndReturnGeneratedKeys("id") // Lấy giá trị khóa chính tự động sinh
                        .mapTo(Long.class) // Ánh xạ giá trị trả về thành Long
                        .one();
            });
        }
        catch (Exception e) {
            e.printStackTrace();
            return null;}
    }

    @Override
    public SlideModel update(SlideModel entity) {
        SlideModel slideExisted = findSlideById(entity.getId());
        if (slideExisted == null) {
            log("Contact not found");
            return null;
        }
        String sql = "UPDATE slide SET updated_at = :updatedAt WHERE id = :id";
        try {
            int result = JDBIConnector.getJdbi().withHandle(handle -> {
                return handle.createUpdate(sql)
                        .bind("name", entity.getImage() == null ? slideExisted.getImage() : entity.getImage().trim())
                        .bind("updatedAt", LocalDateTime.now())
                        .bind("id", entity.getId())
                        .execute();
            });

            if(result > 0){
                return entity;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    @Override
    public void delete(SlideModel entity) {
        String sql = "DELETE FROM slide WHERE id = :id";
        try {
            JDBIConnector.getJdbi().withHandle(handle -> {
                return handle.createUpdate(sql)
                        .bind("id", entity.getId())
                        .execute();
            });
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public List<SlideModel> findAll(String keyword, int currentPage, int pageSize, String orderBy) {
        // Sàng lọc dữ liệu đầu vào
        if (currentPage < 1) currentPage = 1;

        // Tránh SQL Injection bằng cách kiểm tra cột hợp lệ
        List<String> allowedColumns = Arrays.asList("id", "image","created_at", "updated_at");
        if (!allowedColumns.contains(orderBy)) {
            orderBy = "id";
        }

        // Xây dựng câu lệnh SQL
        String sql = "SELECT * FROM slide ";
        if (keyword != null && !keyword.trim().isEmpty()) {
            sql += "WHERE CONCAT(id, created_at, updated_at) LIKE :keyword ";
        }
        sql += "ORDER BY " + orderBy + " " +
                "LIMIT :limit " +
                "OFFSET :offset";
        // Sử dụng JDBI để thực hiện truy vấn
        int finalCurrentPage = currentPage;
        String finalSql = sql;


        List<SlideModel> slideModels = JDBIConnector.getJdbi().withHandle(handle -> {
            // Tạo truy vấn và gán các tham số
            var query = handle.createQuery(finalSql)
                    .bind("limit", pageSize)
                    .bind("offset", (finalCurrentPage - 1) * pageSize);

            if (keyword != null && !keyword.trim().isEmpty()) {
                query.bind("keyword", "%" + keyword + "%");
            }

            // Ánh xạ kết quả truy vấn thành đối tượng UserModel
            return query.mapToBean(SlideModel.class).list();
        });
        return slideModels;
    }

    @Override
    public Long getTotalPage(int numOfItems) {

        return null;

    }

    @Override
    public SlideModel findSlideById(Long id) {
        String query = "SELECT * FROM slide WHERE id = :id";
        try {
            SlideModel result = JDBIConnector.getJdbi().withHandle(handle -> handle.createQuery(query)
                    .bind("id", id)
                    .mapToBean(SlideModel.class)
                    .one());
            return result;
        } catch (Exception e) {
            log("slide not found");
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public List<SlideModel> findAll() {
        String query = "SELECT * FROM slide";
        try {
            List<SlideModel> result = JDBIConnector.getJdbi().withHandle(handle -> handle.createQuery(query)
                    .mapToBean(SlideModel.class)
                    .list());
            return result;
        } catch (Exception e) {
            log("slide not found");
            e.printStackTrace();
        }
        return List.of();
    }

    @Override
    public void deleteAll() {
        String query = "DELETE FROM slide";
        try {
            JDBIConnector.getJdbi().withHandle(handle -> handle.createUpdate(query).execute());
        } catch (Exception e) {
            log("slide not found");
            e.printStackTrace();
        }
    }
}

================
File: dao/daoimpl/UserDAOImp.java
================
package vn.edu.hcmuaf.fit.myphamstore.dao.daoimpl;

import jakarta.enterprise.context.ApplicationScoped;
import lombok.extern.slf4j.Slf4j;
import org.jdbi.v3.core.Jdbi;
import vn.edu.hcmuaf.fit.myphamstore.common.*;
import vn.edu.hcmuaf.fit.myphamstore.dao.IUserDAO;
import vn.edu.hcmuaf.fit.myphamstore.exception.UserNotActiveException;
import vn.edu.hcmuaf.fit.myphamstore.model.UserModel;

import java.sql.*;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;



@Slf4j
@ApplicationScoped
public class UserDAOImp implements IUserDAO {
    private final Jdbi jdbi = JDBIConnector.getJdbi();
    @Override
    public Long save(UserModel entity) {
        String sql = "INSERT INTO user (email, full_name, phone, date_of_birth, gender, status, created_at, updated_at, avatar, password, last_login) " +
                "VALUES (:email, :fullName, :phone, :dateOfBirth, :gender, :status, :createdAt, :updatedAt, :avatar, :password, :lastLogin)";

        try {
            return JDBIConnector.getJdbi().withHandle(handle -> {
                // Hash password trước khi lưu
                System.out.println("Password before hash: " + entity.getPassword());
                String hashedPassword = PasswordUtils.hashPassword(entity.getPassword()) ;
                System.out.println("Hashed password: " + hashedPassword);
                // Thực hiện câu lệnh INSERT và lấy id tự động sinh
                return handle.createUpdate(sql)
                        .bind("email", entity.getEmail().trim())
                        .bind("fullName", entity.getFullName().trim())
                        .bind("phone", entity.getPhone().trim())
                        .bind("dateOfBirth", entity.getDateOfBirth())
                        .bind("gender", entity.getGender() == null ? null : entity.getGender().name().toUpperCase())
                        .bind("status", entity.getStatus() == null ? UserStatus.NONE.toString() : entity.getStatus().toString().toUpperCase())
                        .bind("createdAt", LocalDateTime.now())
                        .bind("updatedAt", LocalDateTime.now())
                        .bind("avatar", entity.getAvatar())
                        .bind("password", hashedPassword)
                        .bind("lastLogin", LocalDateTime.now())
                        .executeAndReturnGeneratedKeys("id") // Lấy giá trị khóa chính tự động sinh
                        .mapTo(Long.class) // Ánh xạ giá trị trả về thành Long
                        .one();
            });
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public UserModel update(UserModel entity) {
        // Kiểm tra sự tồn tại của người dùng
        UserModel user = getUserById(entity.getId());
        if (user == null) return null;

        // SQL để cập nhật thông tin người dùng
        String sql = "UPDATE user SET email = :email, full_name = :fullName, phone = :phone, date_of_birth = :dateOfBirth, " +
                "gender = :gender, status = :status, last_login = :lastLogin, avatar = :avatar, password = :password WHERE id = :id";

        try {
            // Dùng withHandle để quản lý kết nối và giao dịch
            int result = JDBIConnector.getJdbi().withHandle(handle -> {
                return handle.createUpdate(sql)
                        .bind("email", entity.getEmail() != null ? entity.getEmail().trim() : user.getEmail())
                        .bind("fullName", entity.getFullName() != null ? entity.getFullName().trim() : user.getFullName())
                        .bind("phone", entity.getPhone() != null ? entity.getPhone().trim() : user.getPhone())
                        .bind("dateOfBirth", entity.getDateOfBirth() != null ? Date.valueOf(entity.getDateOfBirth()) : Date.valueOf(user.getDateOfBirth()))
                        .bind("gender", entity.getGender() != null ? entity.getGender().toString().toUpperCase() : user.getGender().toString().toUpperCase())
                        .bind("status", entity.getStatus() != null ? entity.getStatus().name() : user.getStatus().name())
                        .bind("lastLogin", Timestamp.valueOf(user.getLastLogin()))
                        .bind("avatar", entity.getAvatar() != null ? entity.getAvatar() : user.getAvatar())
                        .bind("password", (entity.getPassword() != null && !entity.getPassword().startsWith("$2a$"))
                                ? PasswordUtils.hashPassword(entity.getPassword())
                                : user.getPassword())
                        .bind("id", entity.getId())
                        .execute(); // Thực thi câu lệnh UPDATE và trả về số bản ghi bị ảnh hưởng
            });

            if (result > 0) {
                return entity; // Nếu có bản ghi bị cập nhật, trả về đối tượng người dùng đã cập nhật
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        return null; // Nếu không có bản ghi nào được cập nhật
    }

    @Override
    public void delete(UserModel entity) {
        entity.setStatus(UserStatus.NONE);
        update(entity);
    }

    /**
     * phương thức phân tranguser
     *
     * @param currentPage
     * @param pageSize
     * @return
     */
    @Override
    public List<UserModel> findAll(String keyword, int currentPage, int pageSize, String orderBy) {
        // Sàng lọc dữ liệu đầu vào
        if (currentPage < 1) currentPage = 1;

        // Tránh SQL Injection bằng cách kiểm tra cột hợp lệ
        List<String> allowedColumns = Arrays.asList("id", "email", "full_name", "phone", "date_of_birth", "gender", "status", "last_login", "created_at", "updated_at", "avatar");
        if (!allowedColumns.contains(orderBy)) {
            orderBy = "id";
        }

        // Xây dựng câu lệnh SQL
        String sql = "SELECT * FROM user ";
        if (keyword != null && !keyword.trim().isEmpty()) {
            sql += "WHERE CONCAT(id, email, full_name, phone, date_of_birth, gender, status, last_login, created_at, updated_at, avatar) LIKE :keyword ";
        }
        sql += "ORDER BY " + orderBy + " " +
                "LIMIT :limit " +
                "OFFSET :offset";

        // Sử dụng JDBI để thực hiện truy vấn
        int finalCurrentPage = currentPage;
        String finalSql = sql;
        List<UserModel> users = JDBIConnector.getJdbi().withHandle(handle -> {
            // Tạo truy vấn và gán các tham số
            var query = handle.createQuery(finalSql)
                    .bind("limit", pageSize)
                    .bind("offset", (finalCurrentPage - 1) * pageSize);

            if (keyword != null && !keyword.trim().isEmpty()) {
                query.bind("keyword", "%" + keyword + "%");
            }

            // Ánh xạ kết quả truy vấn thành đối tượng UserModel
            return query.mapToBean(UserModel.class).list();
        });

        return users;
    }

    @Override
    public boolean checkLogin(String email, String password) {
        String sql = "SELECT password, status FROM user WHERE email = :email"; // Chỉ lấy cột cần thiết
        try {
            return JDBIConnector.getJdbi().withHandle(handle -> {
                UserModel user = handle.createQuery(sql)
                        .bind("email", email)
                        .mapToBean(UserModel.class)
                        .findOne() // Dùng findOne() thay vì one()
                        .orElse(null);
                log.info(user.toString());
                // Kiểm tra xem user có tồn tại không
                if (user == null) {
                    return false; // Email không tồn tại
                }

                // Kiểm tra trạng thái tài khoản
                if (user.getStatus() == null || user.getStatus() == UserStatus.NONE) {
                    throw new UserNotActiveException("Vui lòng kiểm tra email và xác nhận tài khoản!");
                }
                // Kiểm tra trạng thái tài khoản
                if (user.getStatus() == null || user.getStatus() == UserStatus.INACTIVE) {
                    throw new UserNotActiveException("Tài khoản của bạn đã bị khóa !");
                }

                // Kiểm tra mật khẩu
                if (user.getPassword() == null) {
                    return false; // Mật khẩu không hợp lệ
                }

                return PasswordUtils.verifyPassword(password, user.getPassword());
            });
        } catch (UserNotActiveException e) {
            throw e; // Ném lại ngoại lệ để xử lý ở tầng trên
        } catch (Exception e) {
            e.printStackTrace(); // Nên thay bằng logging framework
            return false; // Xử lý lỗi chung
        }
    }


    @Override
    public boolean checkEmailExist(String email) {
        String sql = "SELECT COUNT(email) FROM user WHERE email = :email";

        try {
            // Dùng withHandle để thực thi truy vấn
            return JDBIConnector.getJdbi().withHandle(handle ->
                    handle.createQuery(sql)
                            .bind("email", email)
                            .mapTo(Integer.class)
                            .one() > 0
            );
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    @Override
    public boolean checkPhoneExist(String phone) {
        return false;
    }

    @Override
    public UserModel getUserByEmail(String email) {
        String sql = "SELECT * FROM user WHERE email = :email";
        try {
            return JDBIConnector.getJdbi().withHandle(handle ->
                    handle.createQuery(sql)
                            .bind("email", email)
                            .mapToBean(UserModel.class)
                            .one()
            );
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }



    @Override
    public UserModel getUserById(Long id) {
        try {
            UserModel user = JDBIConnector
                    .getJdbi()
                    .withHandle(handle -> {
                        return handle.select("SELECT * FROM user WHERE id = ?", id).mapToBean(UserModel.class).one();
                    });
            return user;
        }catch (Exception e) {
            return null;
        }
    }

    @Override
    public boolean updateUserPassword(UserModel user) {
        String sql = "UPDATE user SET password = ? WHERE id = ?";
        try {
            int result = JDBIConnector.getJdbi().withHandle(handle ->
                    handle.createUpdate(sql)
                            .bind(0, user.getPassword())
                            .bind(1, user.getId())
                            .execute()
            );
            return result > 0;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
    @Override
    public Long getUserIdByEmailAndPassword(String email, String password) {
        return jdbi.withHandle(handle ->
                handle.createQuery("SELECT id FROM user WHERE email = :email AND password = :password")
                        .bind("email", email)
                        .bind("password", password)
                        .mapTo(Long.class)
                        .findOne()
                        .orElse(null)
        );
    }

    @Override
    public void updateAvatar(Long id, String avatarBase64) {
        String sql = "UPDATE user SET avatar = :avatar WHERE id = :id";
        try {
            JDBIConnector.getJdbi().withHandle(handle ->
                    handle.createUpdate(sql)
                            .bind("avatar", avatarBase64)
                            .bind("id", id)
                            .execute()
            );
        } catch (Exception e) {
            e.printStackTrace();
    }}

    @Override
    public String getAvatar(int userId) {
        String sql = "SELECT avatar FROM user WHERE id = :id";
        try {
            return JDBIConnector.getJdbi().withHandle(handle ->
                    handle.createQuery(sql)
                            .bind("id", userId)
                            .mapTo(String.class)
                            .findOne()
                            .orElse(null)
            );
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * Lấy số lượng page dựa trên số lượng item cần hiển thị
     * @param numOfItems
     * @return
     */
    @Override
    public Long getTotalPage(int numOfItems) {
        String query = "SELECT COUNT(*) FROM user u JOIN user_has_role ur ON u.id = ur.user_id JOIN role r ON ur.role_id = r.id WHERE r.name = :roleName ";

        try {
            // Dùng withHandle để thực hiện câu lệnh SQL
            Long totalUser = JDBIConnector.getJdbi().withHandle(handle -> {
                return handle.createQuery(query)
                        .bind("roleName", "CUSTOMER") // Gắn giá trị cho tham số :roleName
                        .mapTo(Long.class)           // Ánh xạ kết quả thành kiểu Long
                        .one();                      // Chỉ lấy một kết quả duy nhất
            });

            // Tính toán số trang
            if (totalUser != null) {
                long countPage = totalUser / numOfItems;
                if (totalUser % numOfItems != 0) {
                    countPage++;
                }
                return countPage;
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        return null;
    }


}

================
File: dao/daoimpl/WishlistDAOImpl.java
================
package vn.edu.hcmuaf.fit.myphamstore.dao.daoimpl;

import vn.edu.hcmuaf.fit.myphamstore.common.JDBIConnector;
import vn.edu.hcmuaf.fit.myphamstore.dao.IWishlistDAO;
import vn.edu.hcmuaf.fit.myphamstore.model.ProductModel;
import vn.edu.hcmuaf.fit.myphamstore.model.WishlistModel;

import java.util.Arrays;
import java.util.List;

public class WishlistDAOImpl implements IWishlistDAO {

    @Override
    public void addToWishlist(long userId, long productId) {
        String sql = "INSERT INTO wishlist (user_id, product_id) VALUES (:userId, :productId)";
        try {
            JDBIConnector.getJdbi().useHandle(handle ->
                    handle.createUpdate(sql)
                            .bind("userId", userId)
                            .bind("productId", productId)
                            .execute()
            );
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void removeFromWishlist(Long userId, long productId) {
        String sql = "DELETE FROM wishlist WHERE user_id = :userId AND product_id = :productId";
        try {
            JDBIConnector.getJdbi().useHandle(handle ->
                    handle.createUpdate(sql)
                            .bind("userId", userId)
                            .bind("productId", productId)
                            .execute()
            );
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public List<ProductModel> getWishlistByUserId(Long userId) {
        String sql = "SELECT p.* FROM product p JOIN wishlist w ON p.id = w.product_id WHERE w.user_id = :userId";
        try {
            return JDBIConnector.getJdbi().withHandle(handle ->
                    handle.createQuery(sql)
                            .bind("userId", userId)
                            .mapToBean(ProductModel.class)
                            .list()
            );
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public List<WishlistModel> findByUserId(Long userId) {
        String sql = "SELECT * FROM wishlist WHERE user_id = :userId";
        try {
            return JDBIConnector.getJdbi().withHandle(handle ->
                    handle.createQuery(sql)
                            .bind("userId", userId)
                            .mapToBean(WishlistModel.class)
                            .list()
            );
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public WishlistModel findWishlistById(Long id) {
        String sql = "SELECT * FROM wishlist WHERE id = :id";
        try {
            return JDBIConnector.getJdbi().withHandle(handle ->
                    handle.createQuery(sql)
                            .bind("id", id)
                            .mapToBean(WishlistModel.class)
                            .one()
            );
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public WishlistModel getWishlistDetail(Long id) {
        String sql = "SELECT * FROM wishlist WHERE id = :id";
        try {
            return JDBIConnector.getJdbi().withHandle(handle ->
                    handle.createQuery(sql)
                            .bind("id", id)
                            .mapToBean(WishlistModel.class)
                            .one()
            );
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public Long save(WishlistModel entity) {
        String sql = "INSERT INTO wishlist (user_id, product_id) VALUES (:userId, :productId)";
        try {
            return JDBIConnector.getJdbi().withHandle(handle ->
                    handle.createUpdate(sql)
                            .bind("userId", entity.getUserId())
                            .bind("productId", entity.getProductId())
                            .executeAndReturnGeneratedKeys("id")
                            .mapTo(Long.class)
                            .one()
            );
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public WishlistModel update(WishlistModel entity) {
        WishlistModel wishlistExisted = findWishlistById(entity.getId());
        if (wishlistExisted == null) {
            return null;
        }
        String sql = "UPDATE wishlist SET user_id = :userId, product_id = :productId WHERE id = :id";
        try {
            int result = JDBIConnector.getJdbi().withHandle(handle ->
                    handle.createUpdate(sql)
                            .bind("userId", entity.getUserId() != null ? entity.getUserId() : wishlistExisted.getUserId())
                            .bind("productId", entity.getProductId() != null ? entity.getProductId() : wishlistExisted.getProductId())
                            .bind("id", entity.getId())
                            .execute()
            );
            if (result > 0) {
                return entity;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public void delete(WishlistModel entity) {
        String sql = "DELETE FROM wishlist WHERE id = :id";
        try {
            JDBIConnector.getJdbi().useHandle(handle ->
                    handle.createUpdate(sql)
                            .bind("id", entity.getId())
                            .execute()
            );
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public List<WishlistModel> findAll(String keyword, int currentPage, int pageSize, String orderBy) {
        if (currentPage < 1) currentPage = 1;
        List<String> allowedColumns = Arrays.asList("id", "user_id", "product_id");
        if (!allowedColumns.contains(orderBy)) {
            orderBy = "id";
        }
        String sql = "SELECT * FROM wishlist ";
        if (keyword != null && !keyword.trim().isEmpty()) {
            sql += "WHERE CONCAT(id, user_id, product_id) LIKE :keyword ";
        }
        sql += "ORDER BY " + orderBy + " LIMIT :limit OFFSET :offset";
        int finalCurrentPage = currentPage;
        String finalSql = sql;
        try {
            return JDBIConnector.getJdbi().withHandle(handle -> {
                var query = handle.createQuery(finalSql)
                        .bind("limit", pageSize)
                        .bind("offset", (finalCurrentPage - 1) * pageSize);
                if (keyword != null && !keyword.trim().isEmpty()) {
                    query.bind("keyword", "%" + keyword + "%");
                }
                return query.mapToBean(WishlistModel.class).list();
            });
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public Long getTotalPage(int numOfItems) {
        String query = "SELECT COUNT(*) FROM wishlist";
        try {
            Long totalItems = JDBIConnector.getJdbi().withHandle(handle ->
                    handle.createQuery(query)
                            .mapTo(Long.class)
                            .one()
            );
            if (totalItems != null) {
                long countPage = totalItems / numOfItems;
                if (totalItems % numOfItems != 0) {
                    countPage++;
                }
                return countPage;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
    @Override
    public List<ProductModel> getWishlistByUserId(Long userId, int limit, int offset) {
        String sql = "SELECT p.* FROM product p JOIN wishlist w ON p.id = w.product_id WHERE w.user_id = ? LIMIT ? OFFSET ?";
        try {
            return JDBIConnector.getJdbi().withHandle(handle ->
                    handle.createQuery(sql)
                            .bind(0, userId)
                            .bind(1, limit)
                            .bind(2, offset)
                            .mapToBean(ProductModel.class)
                            .list()
            );
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }


    @Override
    public int getWishlistCountByUserId(Long userId) {
        String sql = "SELECT COUNT(*) FROM wishlist WHERE user_id = ?";
        try {
            return JDBIConnector.getJdbi().withHandle(handle ->
                    handle.createQuery(sql)
                            .bind(0, userId)
                            .mapTo(Integer.class)
                            .one()
            );
        } catch (Exception e) {
            e.printStackTrace();
            return 0;
        }
    }
}

================
File: dao/GenericDAO.java
================
package vn.edu.hcmuaf.fit.myphamstore.dao;

import java.util.List;

public interface GenericDAO <T>{
    //CRUD (Create, Read, Update, Delete)
     Long save(T entity);
     T update(T entity);
     void delete(T entity);
     List<T> findAll(String keyword,int currentPage, int pageSize, String orderBy);
    Long getTotalPage(int numOfItems);
}

================
File: dao/IActivityLogDAO.java
================
package vn.edu.hcmuaf.fit.myphamstore.dao;

import vn.edu.hcmuaf.fit.myphamstore.model.ActivityLogModel;

import java.util.List;

public interface IActivityLogDAO {
    void save(ActivityLogModel activityLog);
    ActivityLogModel findById(int id);
    List<ActivityLogModel> findAll();
    void update(ActivityLogModel activityLog);
    void delete(int id);
}

================
File: dao/IAddressDAO.java
================
package vn.edu.hcmuaf.fit.myphamstore.dao;

import vn.edu.hcmuaf.fit.myphamstore.model.AddressModel;

import java.util.List;

public interface IAddressDAO extends GenericDAO<AddressModel> {
    List<AddressModel> findByUserId(Long userId);
    boolean checkAddressIsExist(AddressModel addressModel, Long userId);

    AddressModel findAddressById(Long addressId);
}

================
File: dao/IBrandDAO.java
================
package vn.edu.hcmuaf.fit.myphamstore.dao;

import vn.edu.hcmuaf.fit.myphamstore.model.BrandModel;
import vn.edu.hcmuaf.fit.myphamstore.model.ProductModel;

import java.util.List;

public interface IBrandDAO extends GenericDAO<BrandModel> {
    BrandModel findBrandById(Long id);
    BrandModel getBrandDetail(Long id);
    List<BrandModel> getAllBrands();


}

================
File: dao/ICategoryDAO.java
================
package vn.edu.hcmuaf.fit.myphamstore.dao;

import vn.edu.hcmuaf.fit.myphamstore.model.CategoryModel;

import java.util.List;

public interface ICategoryDAO {
    Long save(CategoryModel entity);

    CategoryModel update(CategoryModel entity);

    void delete(CategoryModel entity);

    List<CategoryModel> findAll(String keyword, int currentPage, int pageSize, String orderBy);

    List<CategoryModel> findAll(String keyword, int currentPage, int pageSize, String orderBy, List<Long> selectedBrands);
    Long getTotalPage(int numOfItem);
    CategoryModel findCategoryById(Long id);
    List<CategoryModel> getAllCategories();
}

================
File: dao/IContactDAO.java
================
package vn.edu.hcmuaf.fit.myphamstore.dao;

import vn.edu.hcmuaf.fit.myphamstore.model.ContactModel;

public interface IContactDAO extends GenericDAO<ContactModel> {
    ContactModel findContactById(Long id);
}

================
File: dao/ICouponDAO.java
================
package vn.edu.hcmuaf.fit.myphamstore.dao;

import vn.edu.hcmuaf.fit.myphamstore.model.CategoryModel;
import vn.edu.hcmuaf.fit.myphamstore.model.CouponModel;
import vn.edu.hcmuaf.fit.myphamstore.model.SlideModel;

import java.util.List;
import java.util.Set;

public interface ICouponDAO extends GenericDAO<CouponModel> {
    CouponModel getCouponDetail(Long id);
    CouponModel findCouponById(Long id);

    List<CouponModel> findAvailableCoupons();


    CouponModel findCouponByCode(String code);
    int getRemainingQuantity(String code);
    double getDiscount(String code);
}

================
File: dao/IOrderDAO.java
================
package vn.edu.hcmuaf.fit.myphamstore.dao;

import vn.edu.hcmuaf.fit.myphamstore.common.OrderStatus;
import vn.edu.hcmuaf.fit.myphamstore.model.OrderDetailModel;
import vn.edu.hcmuaf.fit.myphamstore.model.OrderModel;

import java.util.List;

public interface IOrderDAO extends GenericDAO<OrderModel> {
    Long saveOrder(OrderModel orderModel);
    void saveOrderDetail(OrderDetailModel orderDetailModel);
    void updateOrder(OrderModel orderModel);
    OrderModel findOrderByUserId(Long userId);
    OrderModel findOrderById(Long orderId);
    List<OrderDetailModel> findOrderDetailByOrderId(Long orderId);
    void updateOrderDetail(OrderDetailModel orderDetailModel);
    void changeStatus(Long orderId, OrderStatus status);

    Long countAllProducts();

    List<OrderModel> findByUserId(Long userId, int currentPage, int pageSize);
}

================
File: dao/IOtpDAO.java
================
package vn.edu.hcmuaf.fit.myphamstore.dao;

public interface IOtpDAO {
    void saveOtp(String email, String otp);
    Boolean verifyOtp(String email, String otp);
    String generateOtp();
    Boolean verifyOtpHash(String email, String otp);
}

================
File: dao/IProductDAO.java
================
package vn.edu.hcmuaf.fit.myphamstore.dao;

import vn.edu.hcmuaf.fit.myphamstore.model.ProductModel;

import java.util.List;

public interface IProductDAO extends GenericDAO<ProductModel> {

    List<ProductModel> getFilteredProducts(String keyword, String[] selectedCategories, String[] selectedBrands, String priceRange, int currentPage, int pageSize, String orderBy);

    ProductModel getProductDetail(Long id);
    List<ProductModel> getProductsByCategory(Long categoryId);
    List<ProductModel> getLatestProductsByCategory(Long categoryId, int limit);
    List<ProductModel> getAllProducts();
    List<ProductModel> findVariantsByProductId(Long productId);
    List<ProductModel> getLatestProducts();
     Long countAllProducts();

    List<ProductModel> findProduct(Long productId);
}

================
File: dao/IProductImageDAO.java
================
package vn.edu.hcmuaf.fit.myphamstore.dao;

import vn.edu.hcmuaf.fit.myphamstore.model.ProductImageModel;

import java.util.List;

public interface IProductImageDAO extends GenericDAO<ProductImageModel> {
    List<ProductImageModel> getProductImageById(Long productId);
    ProductImageModel findProductImageById(Long id);
}

================
File: dao/IProductVariantDAO.java
================
package vn.edu.hcmuaf.fit.myphamstore.dao;

import vn.edu.hcmuaf.fit.myphamstore.model.ProductModel;
import vn.edu.hcmuaf.fit.myphamstore.model.ProductVariant;

import java.util.List;

public interface IProductVariantDAO extends GenericDAO<ProductVariant> {
    List<ProductVariant> findAllByProduct(ProductModel productModel);
}

================
File: dao/IReviewDAO.java
================
package vn.edu.hcmuaf.fit.myphamstore.dao;


import vn.edu.hcmuaf.fit.myphamstore.model.ReviewModel;

import java.util.List;

public interface IReviewDAO extends GenericDAO<ReviewModel> {
    ReviewModel findReviewById(Long id);
    ReviewModel getReviewDetail(Long id);

    List<ReviewModel> getAllReviewsByProductId(Long id);

    Long saveReview(ReviewModel entity, Long userId, Long productId);
}

================
File: dao/IRoleDAO.java
================
package vn.edu.hcmuaf.fit.myphamstore.dao;

import vn.edu.hcmuaf.fit.myphamstore.common.RoleType;
import vn.edu.hcmuaf.fit.myphamstore.model.RoleModel;

import java.util.List;

public interface IRoleDAO {
    List<RoleModel> findListRoleByUserId(Long userId);
    void setRoleToUser(String roleType, Long userId);
    RoleModel findRoleByName(String roleType);
}

================
File: dao/ISlideDAO.java
================
package vn.edu.hcmuaf.fit.myphamstore.dao;

import vn.edu.hcmuaf.fit.myphamstore.model.SlideModel;

import java.util.List;

public interface ISlideDAO extends GenericDAO<SlideModel> {
    public SlideModel findSlideById(Long id);
    List<SlideModel> findAll();

    void deleteAll();
}

================
File: dao/IUserDAO.java
================
package vn.edu.hcmuaf.fit.myphamstore.dao;

import vn.edu.hcmuaf.fit.myphamstore.model.UserModel;

public interface IUserDAO extends GenericDAO<UserModel> {
    boolean checkLogin(String username, String password);
    boolean checkEmailExist(String email);
    boolean checkPhoneExist(String phone);
    UserModel getUserByEmail(String email);
    UserModel getUserById(Long id);
    boolean updateUserPassword(UserModel user);
    Long getUserIdByEmailAndPassword(String email, String password);

    void updateAvatar(Long id, String newAvatarUrl);

    String getAvatar(int userId);
}

================
File: dao/IWishlistDAO.java
================
package vn.edu.hcmuaf.fit.myphamstore.dao;

import vn.edu.hcmuaf.fit.myphamstore.model.ProductModel;
import vn.edu.hcmuaf.fit.myphamstore.model.WishlistModel;

import java.util.List;

public interface IWishlistDAO {
    void addToWishlist(long userId, long productId);
    List<ProductModel> getWishlistByUserId(Long userId);
    void removeFromWishlist(Long userId, long productId);

    List<WishlistModel> findByUserId(Long userId);

    WishlistModel findWishlistById(Long id);

    WishlistModel getWishlistDetail(Long id);

    Long save(WishlistModel entity);

    WishlistModel update(WishlistModel entity);

    void delete(WishlistModel entity);

    List<WishlistModel> findAll(String keyword, int currentPage, int pageSize, String orderBy);

    Long getTotalPage(int numOfItems);

    List<ProductModel> getWishlistByUserId(Long userId, int page, int size);

    int getWishlistCountByUserId(Long userId);
}

================
File: exception/UserNotActiveException.java
================
package vn.edu.hcmuaf.fit.myphamstore.exception;

public class UserNotActiveException extends RuntimeException {
  public UserNotActiveException(String message) {
    super(message);
  }
}

================
File: filter/AutFilter.java
================
package vn.edu.hcmuaf.fit.myphamstore.filter;

import jakarta.servlet.*;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import vn.edu.hcmuaf.fit.myphamstore.common.RoleType;
import vn.edu.hcmuaf.fit.myphamstore.model.RoleModel;
import vn.edu.hcmuaf.fit.myphamstore.model.UserModel;

import java.io.IOException;
import java.util.List;

public class AutFilter implements Filter {
    private ServletContext context;
    private String[] requireLogin ;

    @Override
    public void init(FilterConfig filterConfig) throws ServletException {
        this.context = filterConfig.getServletContext();
        requireLogin = new String[]{
                "/change-password",
                "/profile",
                "/order-history",
                "/order-detail",
                "/logout",
                "/checkout",
                "/wishlist",
                "/admin"
        };
    }

    @Override
    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
        HttpServletRequest req = (HttpServletRequest) servletRequest;
        HttpServletResponse res = (HttpServletResponse) servletResponse;
        String currentURL = req.getRequestURI();
        UserModel user = (UserModel) req.getSession().getAttribute("user");
        if(user == null){//chua login
            for (String url : requireLogin){
                if(currentURL.contains(url)){
                    System.out.println("Require login");
                    res.sendRedirect(req.getContextPath() + "/login");
                    return;
                }
            }
        }else{//da login
            //check role admin
            List<RoleModel> roles = user.getRoles();
            boolean isAdmin = false;
            for (RoleModel role : roles){
                if(role.getName().equals(RoleType.ADMIN)){
                    isAdmin = true;
                    break;
                }
            }
            if(!isAdmin && currentURL.contains("/admin")){
                res.sendRedirect(req.getContextPath() + "/trang-chu");
                return;
            }
        }


        filterChain.doFilter(servletRequest, servletResponse);
    }
}

================
File: model/ActivityLogModel.java
================
package vn.edu.hcmuaf.fit.myphamstore.model;

import lombok.*;
import lombok.experimental.SuperBuilder;

import java.sql.Timestamp;
import java.util.Objects;

@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@ToString(callSuper = true)
@Getter
@Setter
public class ActivityLogModel extends BaseModel {
    private int userId;
    private String level;
    private String action;
    private String oldData;
    private String newData;
    private String location;

}

================
File: model/AddressModel.java
================
package vn.edu.hcmuaf.fit.myphamstore.model;

import lombok.*;
import lombok.experimental.SuperBuilder;

import java.util.Objects;

@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@ToString(callSuper = true)
@Getter
@Setter
public class AddressModel extends BaseModel {
    /*
    CREATE TABLE `address` (
  `id` int PRIMARY KEY AUTO_INCREMENT,
  `user_id` int, //không cần lấy ra vì ko thể từ địa chỉ truy vấn ra user nào được
  `recipient_name` nvarchar(255) NOT NULL,
  `recipient_phone` varchar(15) NOT NULL,
  `city` nvarchar(255) NOT NULL,
  `district` nvarchar(255) NOT NULL,
  `ward` nvarchar(255) NOT NULL,
  `note` nvarchar(255),
  `is_default` boolean DEFAULT false,
  `is_active` boolean DEFAULT true,
  `created_at` datetime DEFAULT (now()),
  `updated_at` datetime DEFAULT (now())
);
     */
    private Long userId;
    private String recipientName;
    private String recipientPhone;
    private String city;
    private String district;
    private String ward;
    private String note;
    private Boolean isDefault;
    private Boolean isActive;

    @Override
    public boolean equals(Object o) {
        if (o == null || getClass() != o.getClass()) return false;
        AddressModel that = (AddressModel) o;
        return Objects.equals(recipientName, that.recipientName)
                && Objects.equals(recipientPhone, that.recipientPhone)
                && Objects.equals(city, that.city)
                && Objects.equals(district, that.district)
                && Objects.equals(ward, that.ward) &&
                Objects.equals(note, that.note);
    }
}

================
File: model/BaseModel.java
================
package vn.edu.hcmuaf.fit.myphamstore.model;

import lombok.*;
import lombok.experimental.SuperBuilder;

import java.io.Serializable;
import java.time.LocalDateTime;
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@ToString
@Setter
@Getter
public class BaseModel implements Serializable {
    protected Long id;
    protected LocalDateTime createdAt;
    protected LocalDateTime updatedAt;
}

================
File: model/BrandModel.java
================
package vn.edu.hcmuaf.fit.myphamstore.model;

import lombok.*;
import lombok.experimental.SuperBuilder;

@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@ToString(callSuper = true)
@Getter
@Setter
public class BrandModel extends  BaseModel{
    private String name;
    private String logo;
    private Boolean isAvailable;
}

================
File: model/CartModel.java
================
package vn.edu.hcmuaf.fit.myphamstore.model;

import lombok.*;
import lombok.experimental.SuperBuilder;

import java.io.Serializable;
import java.util.Objects;

@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@ToString
@Setter
@Getter
public class CartModel  implements Serializable {
    private Long productId;
    private Integer quantity;
    private Long brandId;
    private Long variantId;

    @Override
    public boolean equals(Object o) {
        if (o == null || getClass() != o.getClass()) return false;
        CartModel cartModel = (CartModel) o;
        return Objects.equals(productId, cartModel.productId) && Objects.equals(variantId, cartModel.variantId);
    }
}

================
File: model/CartModelHelper.java
================
package vn.edu.hcmuaf.fit.myphamstore.model;

import lombok.*;
import lombok.experimental.SuperBuilder;

import java.io.Serializable;

@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@ToString
@Setter
@Getter
public class CartModelHelper implements Serializable {
    private ProductModel product;
    private Integer quantity;
    private ProductVariant variant;
    public CartModelHelper(ProductModel product, Integer quantity) {}
}

================
File: model/CategoryModel.java
================
package vn.edu.hcmuaf.fit.myphamstore.model;

import lombok.*;
import lombok.experimental.SuperBuilder;

@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@ToString(callSuper = true)
@Setter
@Getter
public class CategoryModel extends BaseModel{
    private Long parentId;// -> JDbi parentId -> parent_id
    private String name;
    private String description;
    private Boolean isAvailable; //wrapper class -> Boolean

}

================
File: model/ContactModel.java
================
package vn.edu.hcmuaf.fit.myphamstore.model;

import lombok.*;
import lombok.experimental.SuperBuilder;
import vn.edu.hcmuaf.fit.myphamstore.common.ContactStatus;

@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@ToString(callSuper = true)
@Setter
@Getter
public class ContactModel extends BaseModel{
    private String email;
    private String title;
    private String content;
    private ContactStatus status;
}

================
File: model/CouponModel.java
================
package vn.edu.hcmuaf.fit.myphamstore.model;

import lombok.*;
import lombok.experimental.SuperBuilder;
import vn.edu.hcmuaf.fit.myphamstore.common.DiscountType;

import java.time.LocalDateTime;

@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@ToString(callSuper = true)
@Getter
@Setter
public class CouponModel extends BaseModel{
    private String code;
    private Long minOrderValue;
    private DiscountType discountType;
    private Long discountValue;
    private Long maxDiscountValue;
    private LocalDateTime startDate;
    private LocalDateTime endDate;
    private Long currentUsage;
    private Long maxUsage;
    private Boolean isAvailable;
}

================
File: model/OrderDetailModel.java
================
package vn.edu.hcmuaf.fit.myphamstore.model;

import lombok.*;
import lombok.experimental.SuperBuilder;

@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@ToString
@Setter
@Getter
public class OrderDetailModel extends BaseModel{
    private Long orderId;
    private Long productId;
    private Integer quantity;
    private Double totalPrice;
}

================
File: model/OrderModel.java
================
package vn.edu.hcmuaf.fit.myphamstore.model;

import lombok.*;
import lombok.experimental.SuperBuilder;
import vn.edu.hcmuaf.fit.myphamstore.common.OrderStatus;
import vn.edu.hcmuaf.fit.myphamstore.common.PaymentMethod;

import java.time.LocalDateTime;

@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@ToString
@Setter
@Getter
public class OrderModel extends BaseModel{
    private Long addressId;
    private Long userId;
    private OrderStatus status;
    private Integer shippingFee;
    private String note;
    private PaymentMethod paymentMethod;
    private Double totalPrice;
    private LocalDateTime orderDate;
    private LocalDateTime confirmedAt;
}

================
File: model/OtpModel.java
================
package vn.edu.hcmuaf.fit.myphamstore.model;

import lombok.*;
import lombok.experimental.SuperBuilder;

import java.time.LocalDateTime;
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@ToString
@Setter
@Getter
public class OtpModel extends BaseModel{
    private String email;
    private String otp;
    private LocalDateTime expiredTime;
}

================
File: model/ProductImageModel.java
================
package vn.edu.hcmuaf.fit.myphamstore.model;

import lombok.*;
import lombok.experimental.SuperBuilder;

@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@ToString(callSuper = true)
@Getter
@Setter
public class ProductImageModel extends BaseModel{
    private String url;
    private Long productId;
}

================
File: model/ProductModel.java
================
package vn.edu.hcmuaf.fit.myphamstore.model;

import lombok.*;
import lombok.experimental.SuperBuilder;

import java.util.HashSet;
import java.util.Set;

@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@ToString
@Setter
@Getter
public class ProductModel extends BaseModel{

    private String name;
    private Long price;
    private Long costPrice;
    private Integer stock;
    private Integer soldQuantity;
    private String description;
    private Boolean isAvailable;
    private String thumbnail;
    private Long categoryId;
    private Long brandId;


}

================
File: model/ProductVariant.java
================
package vn.edu.hcmuaf.fit.myphamstore.model;

import lombok.*;
import lombok.experimental.SuperBuilder;

@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@ToString
@Setter
@Getter
public class ProductVariant extends BaseModel{
    private Long id;
    private Long productId;
    private String name;
    private Double price;
    private Double costPrice;
    private Integer stock;
    private Integer soldQuantity;
    private Boolean isAvailable;
}

================
File: model/ReviewModel.java
================
package vn.edu.hcmuaf.fit.myphamstore.model;

import lombok.*;
import lombok.experimental.SuperBuilder;

@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@ToString
@Setter
@Getter
public class ReviewModel extends BaseModel{
    private Long userId;
    private Long productId;
    private String comment;
    private Integer rating;
    private Boolean isAvailable;
}

================
File: model/RoleModel.java
================
package vn.edu.hcmuaf.fit.myphamstore.model;

import lombok.*;
import lombok.experimental.SuperBuilder;

@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@ToString
@Setter
@Getter
public class RoleModel extends BaseModel{
    private String name;
    private String description;
}

================
File: model/SlideModel.java
================
package vn.edu.hcmuaf.fit.myphamstore.model;

import lombok.*;
import lombok.experimental.SuperBuilder;
import vn.edu.hcmuaf.fit.myphamstore.common.ContactStatus;

@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@ToString(callSuper = true)
@Setter
@Getter
public class SlideModel {
    private Long id;
    private String image;
}

================
File: model/UserModel.java
================
package vn.edu.hcmuaf.fit.myphamstore.model;

import lombok.*;
import lombok.experimental.SuperBuilder;
import vn.edu.hcmuaf.fit.myphamstore.common.Gender;
import vn.edu.hcmuaf.fit.myphamstore.common.UserStatus;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;

@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@ToString(callSuper = true, exclude = "password")
@Getter
@Setter
public class UserModel extends BaseModel{
    private String fullName;
    private String email;
    private String password;
    private String phone;
    private LocalDate dateOfBirth;
    private Gender gender;
    private String avatar;
    private UserStatus status;
    private LocalDateTime lastLogin;
    private List<RoleModel> roles;
}

================
File: model/WishlistModel.java
================
package vn.edu.hcmuaf.fit.myphamstore.model;

import lombok.*;
import lombok.experimental.SuperBuilder;

@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@ToString(callSuper = true)
@Getter
@Setter
public class WishlistModel extends BaseModel{

    private Long productId;
    private Long userId;



}

================
File: service/IBrandService.java
================
package vn.edu.hcmuaf.fit.myphamstore.service;


import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import vn.edu.hcmuaf.fit.myphamstore.model.BrandModel;

import java.io.IOException;
import java.util.List;

public interface IBrandService {
    BrandModel findBrandById(Long id);
    List<BrandModel> getBrandsWithPaging(String keyword,int currentPage, int pageSize, String orderBy);
    Long getTotalPage(int numOfItem);
    List<BrandModel> getAllBrands();

    void displayBrand(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;

    void stopBuying(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;

    void startBuying(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;

    void addBrand(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;

    void updateBrand(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;
}

================
File: service/ICartService.java
================
package vn.edu.hcmuaf.fit.myphamstore.service;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;

public interface ICartService {
    void addToCart(HttpServletRequest request, HttpServletResponse response) throws IOException;
    void updateCart(HttpServletRequest request, HttpServletResponse response) throws IOException;
    void removeCartItem(HttpServletRequest request, HttpServletResponse response) throws IOException;
    void clearCart(HttpServletRequest request, HttpServletResponse response);
    void displayCart(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;
    void getCartCount(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;

    void applyDiscountCode(HttpServletRequest request, HttpServletResponse response, String discountCode) throws IOException;
}

================
File: service/ICategoryService.java
================
package vn.edu.hcmuaf.fit.myphamstore.service;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import vn.edu.hcmuaf.fit.myphamstore.model.CategoryModel;

import java.io.IOException;
import java.util.List;

public interface ICategoryService {
    CategoryModel findCategoryById(Long id);
    List<CategoryModel> findCategoriesParent(Long childId);
    List<CategoryModel> pagingCategory(String keyword,int currentPage, int pageSize, String orderBy);
    Long getTotalPage(int numOfItem);

    List<CategoryModel> getAllCategories();

    void displayCategory(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;

    void stopBuying(HttpServletRequest request, HttpServletResponse response);

    void startBuying(HttpServletRequest request, HttpServletResponse response);

    void addCategory(HttpServletRequest request, HttpServletResponse response);

    void updateCategory(HttpServletRequest request, HttpServletResponse response);

    List<CategoryModel> pagingCategory(String keyword, int currentPage, int pageSize, String orderBy, List<Long> selectedBrands);
}

================
File: service/ICheckoutService.java
================
package vn.edu.hcmuaf.fit.myphamstore.service;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;


public interface ICheckoutService {
    void displayCheckout(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;
    void checkout(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;

}

================
File: service/IContactService.java
================
package vn.edu.hcmuaf.fit.myphamstore.service;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import vn.edu.hcmuaf.fit.myphamstore.model.ContactModel;

import java.io.IOException;
import java.util.List;

public interface IContactService {
    ContactModel findContactById(Long id);
    List<ContactModel> getContactsWithPaging(String keyword, int currentPage, int pageSize, String orderBy);
    void displayContact(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;

    void pending(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;

    void done(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;
    Long getTotalPage(int i);
}

================
File: service/ICouponService.java
================
package vn.edu.hcmuaf.fit.myphamstore.service;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import vn.edu.hcmuaf.fit.myphamstore.model.CouponModel;

import java.io.IOException;
import java.util.List;
import java.util.Set;

public interface ICouponService {
    CouponModel findCouponById(Long id);


    List<CouponModel> getCouponsWithPaging(String keyword, int currentPage, int pageSize, String orderBy);
    Long getTotalPage(int numOfItem);

    void displayCoupon(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;

    void stopBuying(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;

    void startBuying(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;

    void addCoupon(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;

    void updateCoupon(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;

    List<CouponModel> findAvailableCoupons();

    CouponModel applyCoupon(String couponCode, Double totalAmount);
}

================
File: service/impl/BrandServiceImpl.java
================
package vn.edu.hcmuaf.fit.myphamstore.service.impl;

import jakarta.inject.Inject;
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import vn.edu.hcmuaf.fit.myphamstore.model.BrandModel;
import vn.edu.hcmuaf.fit.myphamstore.model.ProductModel;
import vn.edu.hcmuaf.fit.myphamstore.service.IBrandService;
import vn.edu.hcmuaf.fit.myphamstore.dao.IBrandDAO;

import java.io.IOException;
import java.util.List;
import java.util.stream.Collectors;

public class BrandServiceImpl implements IBrandService {
    @Inject
    private IBrandDAO brandDAO;
    @Override
    public BrandModel findBrandById(Long id) {
        return brandDAO.findBrandById(id);
    }

    @Override
    public List<BrandModel> getBrandsWithPaging(String keyword, int currentPage, int pageSize, String orderBy) {
        if (keyword != null && !keyword.isEmpty()) {
            keyword = keyword.trim();
        }
        return brandDAO
                .findAll(keyword, currentPage, pageSize, orderBy)
                ;
    }

    @Override
    public Long getTotalPage(int numOfItem) {
        return brandDAO.getTotalPage(numOfItem);
    }

    @Override
    public List<BrandModel> getAllBrands() {
        return brandDAO.getAllBrands();
    }

    @Override
    public void displayBrand(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        RequestDispatcher dispatcher = request.getRequestDispatcher("/admin/brand/brand-management.jsp");
        String keyword = request.getParameter("keyword");
        String orderBy = request.getParameter("orderBy");
        int currentPage = Integer.parseInt(request.getParameter("currentPage")==null?"1": request.getParameter("currentPage"));
        int pageSize = Integer.parseInt(request.getParameter("pageSize") == null?"5": request.getParameter("pageSize"));

        List<BrandModel> brands = this.getBrandsWithPaging(keyword, currentPage, pageSize, orderBy);
        Long totalPages = this.brandDAO.getTotalPage(pageSize);

        request.setAttribute("brands", brands);
        request.setAttribute("totalPages", totalPages);
        request.setAttribute("currentPage", currentPage);
        request.setAttribute("pageSize", pageSize);
        request.setAttribute("keyword", keyword);
        request.setAttribute("orderBy", orderBy);
        dispatcher.forward(request, response);
    }

    @Override
    public void stopBuying(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        Long id = Long.parseLong(request.getParameter("id"));
        //tến hành cập nhật trạng thái sản phẩm
        BrandModel brandModel = BrandModel.builder().id(id).build();
        brandModel.setIsAvailable(false);
        BrandModel isSuccess = brandDAO.update(brandModel);
        if (isSuccess == null) {
            request.setAttribute("message", "Có lỗi xảy ra");
        } else {
            request.setAttribute("message", "Cập nhật thành công id: " + id);
            this.displayBrand(request, response);
        }
    }

    @Override
    public void startBuying(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        Long id = Long.parseLong(request.getParameter("id"));
        //tến hành cập nhật trạng thái sản phẩm
        BrandModel brandModel = BrandModel.builder().id(id).build();
        brandModel.setIsAvailable(true);
        BrandModel isSuccess = brandDAO.update(brandModel);
        if (isSuccess == null) {
            request.setAttribute("message", "Có lỗi xảy ra");
        } else {
            request.setAttribute("message", "Cập nhật thành công id: " + id);
            this.displayBrand(request, response);
        }
    }

    @Override
    public void addBrand(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        RequestDispatcher dispatcher = request.getRequestDispatcher("/admin/brand/add-brand.jsp");
        dispatcher.forward(request, response);
    }

    @Override
    public void updateBrand(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        RequestDispatcher dispatcher = request.getRequestDispatcher("/admin/brand/add-brand.jsp");
        Long id = Long.parseLong(request.getParameter("id"));
        BrandModel brand = brandDAO.getBrandDetail(id);
        System.out.println(brand);
        request.setAttribute("brand", brand);
        dispatcher.forward(request, response);
    }
}

================
File: service/impl/CartServiceImpl.java
================
package vn.edu.hcmuaf.fit.myphamstore.service.impl;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

import vn.edu.hcmuaf.fit.myphamstore.dao.ICouponDAO;
import vn.edu.hcmuaf.fit.myphamstore.dao.daoimpl.CouponDAOImpl;
import vn.edu.hcmuaf.fit.myphamstore.model.*;

import vn.edu.hcmuaf.fit.myphamstore.service.ICartService;
import vn.edu.hcmuaf.fit.myphamstore.service.ICouponService;
import vn.edu.hcmuaf.fit.myphamstore.service.IProductService;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;

@ApplicationScoped
public class CartServiceImpl implements ICartService {
    @Inject
    private IProductService productService;
    @Inject
    private ICouponService couponService;
    @Inject
    private ICouponDAO couponDAO;
    @Inject
    private CouponDAOImpl couponDAOImpl;

    @Override
    public void addToCart(HttpServletRequest request, HttpServletResponse response) throws IOException {
        Long productId = Long.parseLong(request.getParameter("productId"));
        String variantIdParam = request.getParameter("variantId");
        Long variantId = (variantIdParam == null || variantIdParam.isBlank()) ? null : Long.parseLong(variantIdParam);

        int quantity = Integer.parseInt(request.getParameter("quantity") == null ? "1" : request.getParameter("quantity"));
        ProductModel product = productService.findProductById(productId);
        Long brandId = product.getBrandId();

        CartModel item = CartModel.builder()
                .productId(productId)
                .quantity(quantity)
                .brandId(brandId)
                .variantId(variantId)
                .build();

        HttpSession session = request.getSession();
        List<CartModel> listCartItems = session.getAttribute("cart") == null ? new ArrayList<>() : (List<CartModel>) session.getAttribute("cart");
        System.out.println("Before adding: " + listCartItems);
        listCartItems.forEach(cartItem -> {
            if (cartItem.equals(item)) { // Check if the product is already in the cart
                cartItem.setQuantity(cartItem.getQuantity() + quantity);
                return;
            }
        });
        // If the product is not in the cart, add it
        if (!listCartItems.contains(item)) {
            listCartItems.add(item);
        }

        System.out.println("After adding: " + listCartItems);
        session.setAttribute("cart", listCartItems);
        response.sendRedirect(request.getHeader("referer"));
    }
    @Override
    public void updateCart(HttpServletRequest request, HttpServletResponse response) throws IOException {
        HttpSession session = request.getSession();
        @SuppressWarnings("unchecked")
        List<CartModel> cart = (List<CartModel>) session.getAttribute("cart");
        if (cart == null) {
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Cart not found");
            return;
        }

        Long productId = Long.parseLong(request.getParameter("productId"));
        Integer quantity = Integer.parseInt(request.getParameter("quantity"));

        if (quantity < 1) {
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Quantity must be at least 1");
            return;
        }

        for (CartModel item : cart) {
            if (item.getProductId().equals(productId)) {
                item.setQuantity(quantity);
                break;
            }
        }

        session.setAttribute("cart", cart);
        response.sendRedirect(request.getHeader("referer"));
    }

    @Override
    public void removeCartItem(HttpServletRequest request, HttpServletResponse response) throws IOException {
        HttpSession session = request.getSession();
        @SuppressWarnings("unchecked")
        List<CartModel> cart = (List<CartModel>) session.getAttribute("cart");
        if (cart == null) {
            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
            return;
        }

        Long productId = Long.parseLong(request.getParameter("productId"));
        cart.removeIf(item -> item.getProductId().equals(productId));

        session.setAttribute("cart", cart);
        response.sendRedirect(request.getHeader("referer"));

    }

    @Override
    public void clearCart(HttpServletRequest request, HttpServletResponse response) {

    }


    @Override
    public void displayCart(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();
        List<CartModel> listCartItems = (List<CartModel>) session.getAttribute("cart");
        System.out.println("Before displaying: " + listCartItems);
        if (listCartItems == null || listCartItems.isEmpty()) {
            request.setAttribute("errorMessage", "Giỏ hàng của bạn đang trống.");
            request.getRequestDispatcher("/frontend/shopping_cart.jsp").forward(request, response);
            return;
        }

        List<CartModelHelper> listCartDisplay = new ArrayList<>();
        AtomicLong totalAmount = new AtomicLong(0);
        try {
            for (CartModel cartItem : listCartItems) {
                ProductModel product = productService.findProductById(cartItem.getProductId());
                if (product == null) {
                    System.out.println("Product not found: " + cartItem.getProductId());
                    continue;
                }
                if (cartItem.getVariantId() == null) {
                    totalAmount.addAndGet(product.getPrice() * cartItem.getQuantity());
                    listCartDisplay.add(new CartModelHelper(product, cartItem.getQuantity(), null));
                } else {
                    List<ProductVariant> listVariant = productService.getProductVariantsByProductId(cartItem.getProductId());
                    ProductVariant variant = listVariant.stream()
                            .filter(v -> v.getId().equals(cartItem.getVariantId()))
                            .findFirst()
                            .orElse(null);
                    if (variant != null) {
                        totalAmount.addAndGet((long) (variant.getPrice() * cartItem.getQuantity()));
                        listCartDisplay.add(new CartModelHelper(product, cartItem.getQuantity(), variant));
                    } else {
                        System.out.println("Variant not found for product: " + cartItem.getProductId());
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            request.setAttribute("errorMessage", "Lỗi khi xử lý giỏ hàng: " + e.getMessage());
            request.getRequestDispatcher("/frontend/shopping_cart.jsp").forward(request, response);
            return;
        }

        List<CouponModel> discountCodes = couponService.findAvailableCoupons();
        System.out.println("Discount codes: " + discountCodes);
        request.setAttribute("discountCodes", discountCodes);

        String discountCode = (String) session.getAttribute("discountCode");
        long discountAmount = 0;
        if (discountCode != null && !discountCodes.isEmpty()) {
            for (CouponModel coupon : discountCodes) {
                if (coupon.getCode().equals(discountCode)) {
                    discountAmount = calculateDiscount(totalAmount.get(), coupon);
                    break;
                }
            }
        }

        request.setAttribute("listCartDisplay", listCartDisplay);
        request.setAttribute("totalAmount", totalAmount.get());
        request.setAttribute("discountAmount", discountAmount);
        request.setAttribute("finalAmount", totalAmount.get() - discountAmount);

        System.out.println("Forwarding to /frontend/shopping_cart.jsp");
        request.getRequestDispatcher("/frontend/shopping_cart.jsp").forward(request, response);
    }

    private long calculateDiscount(long totalAmount, CouponModel coupon) {
        if ("percentage".equals(coupon.getDiscountType())) {
            return totalAmount * coupon.getDiscountValue() / 100;
        } else if ("fixed".equals(coupon.getDiscountType())) {
            return coupon.getDiscountValue();
        }
        return 0;
    }
    public void getCartCount(HttpServletRequest request, HttpServletResponse response) throws IOException {
        HttpSession session = request.getSession();
        List<CartModel> cart = (List<CartModel>) session.getAttribute("cart");

        System.out.println("Cart Session: " + (cart == null ? "null" : cart.size())); // Debug

        int count = (cart == null) ? 0 : cart.size();
        response.setContentType("application/json");
        response.getWriter().write("{\"count\":" + count + "}");
    }
    @Override
    public void applyDiscountCode(HttpServletRequest request, HttpServletResponse response, String discountCode) throws IOException {
        HttpSession session = request.getSession();

        // Lấy thông tin giỏ hàng để kiểm tra điều kiện
        List<CartModel> cartItems = (List<CartModel>) session.getAttribute("cart");
        if (cartItems == null || cartItems.isEmpty()) {
            session.setAttribute("discountError", "Giỏ hàng trống, không thể áp dụng voucher");
            response.sendRedirect("/gio-hang");
            return;
        }

        // Tính tổng giá trị giỏ hàng
        long totalAmount = calculateTotalAmount(cartItems);

        CouponModel coupon = couponDAO.findCouponByCode(discountCode);
        if (coupon == null) {
            session.setAttribute("discountError", "Mã giảm giá không tồn tại");
            response.sendRedirect("/gio-hang");
            return;
        }

        // Kiểm tra các điều kiện
        if (!coupon.getIsAvailable()) {
            session.setAttribute("discountError", "Mã giảm giá không khả dụng");
            response.sendRedirect("/gio-hang");
            return;
        }

        if (LocalDateTime.now().isBefore(coupon.getStartDate())) {
            session.setAttribute("discountError", "Mã giảm giá chưa có hiệu lực");
            response.sendRedirect("/gio-hang");
            return;
        }

        if (LocalDateTime.now().isAfter(coupon.getEndDate())) {
            session.setAttribute("discountError", "Mã giảm giá đã hết hạn");
            response.sendRedirect("/gio-hang");
            return;
        }

        if (totalAmount < coupon.getMinOrderValue()) {
            session.setAttribute("discountError", "Đơn hàng chưa đạt giá trị tối thiểu để áp dụng voucher");
            response.sendRedirect("/gio-hang");
            return;
        }

        if (couponDAOImpl.getRemainingQuantity(discountCode) <= 0) {
            session.setAttribute("discountError", "Mã giảm giá đã hết lượt sử dụng");
            response.sendRedirect("/gio-hang");
            return;
        }

        // Nếu tất cả điều kiện đều hợp lệ
        session.setAttribute("discountCode", discountCode);
        session.removeAttribute("discountError"); // Xóa thông báo lỗi nếu có

        response.sendRedirect("/gio-hang");
    }

    private long calculateTotalAmount(List<CartModel> cartItems) {
        long total = 0;
        for (CartModel item : cartItems) {
            ProductModel product = productService.findProductById(item.getProductId());
            if (product != null) {
                if (item.getVariantId() == null) {
                    total += product.getPrice() * item.getQuantity();
                } else {
                    List<ProductVariant> variants = productService.getProductVariantsByProductId(item.getProductId());
                    for (ProductVariant variant : variants) {
                        if (variant.getId().equals(item.getVariantId())) {
                            total += variant.getPrice() * item.getQuantity();
                            break;
                        }
                    }
                }
            }
        }
        return total;
    }
}

================
File: service/impl/CategoryServiceImpl.java
================
package vn.edu.hcmuaf.fit.myphamstore.service.impl;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.extern.slf4j.Slf4j;
import vn.edu.hcmuaf.fit.myphamstore.dao.ICategoryDAO;
import vn.edu.hcmuaf.fit.myphamstore.model.CategoryModel;
import vn.edu.hcmuaf.fit.myphamstore.service.ICategoryService;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import static java.rmi.server.LogStream.log;

@Slf4j
@ApplicationScoped
public class CategoryServiceImpl implements ICategoryService {
    @Inject
    private ICategoryDAO categoryDAO;

    @Override
    public CategoryModel findCategoryById(Long id) {
        return categoryDAO.findCategoryById(id);
    }

    @Override
    public List<CategoryModel> findCategoriesParent(Long childId) {
        CategoryModel childCategory = categoryDAO.findCategoryById(childId);
        if (childCategory.getParentId() == null) {
            log("Category is parent");
            return null;
        }
        List<CategoryModel> result = new ArrayList<>();
        result.add(childCategory);//them category con vao list
        Long parentId = childCategory.getParentId();
        while (parentId != null) {
            CategoryModel parentCategory = categoryDAO.findCategoryById(parentId);
            if (parentCategory != null) {
                result.add(parentCategory);
                parentId = parentCategory.getParentId();
            } else {
                break;
            }
        }
        return result;
    }

    @Override
    public List<CategoryModel> pagingCategory(String keyword, int currentPage, int pageSize, String orderBy) {
        if (keyword != null && !keyword.isEmpty()) {
            keyword = keyword.trim();
        }
        return this.categoryDAO.findAll(keyword, currentPage, pageSize, orderBy);
    }

    @Override
    public Long getTotalPage(int numOfItem) {
        return categoryDAO.getTotalPage(numOfItem);
    }

    @Override
    public List<CategoryModel> getAllCategories() {
        return categoryDAO.getAllCategories();
    }

    @Override
    public void displayCategory(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        RequestDispatcher dispatcher = request.getRequestDispatcher("/admin/category/category-management.jsp");
        String keyword = request.getParameter("keyword");
        String orderBy = request.getParameter("orderBy");
        int currentPage = Integer.parseInt(request.getParameter("currentPage") == null ? "1" : request.getParameter("currentPage"));
        int pageSize = Integer.parseInt(request.getParameter("pageSize") == null ? "5" : request.getParameter("pageSize"));
        String[] selectedBrandsParam = request.getParameterValues("selectedBrands");
        List<Long> selectedBrands = selectedBrandsParam != null ? Arrays.stream(selectedBrandsParam).map(Long::parseLong).collect(Collectors.toList()) : null;

        List<CategoryModel> categories = this.pagingCategory(keyword, currentPage, pageSize, orderBy, selectedBrands);
        Long totalPages = this.categoryDAO.getTotalPage(pageSize);

        request.setAttribute("categories", categories);
        request.setAttribute("totalPages", totalPages);
        request.setAttribute("currentPage", currentPage);
        request.setAttribute("pageSize", pageSize);
        request.setAttribute("keyword", keyword);
        request.setAttribute("orderBy", orderBy);
        request.setAttribute("selectedBrands", selectedBrands);
        dispatcher.forward(request, response);
    }

    @Override
    public void stopBuying(HttpServletRequest request, HttpServletResponse response) {

    }

    @Override
    public void startBuying(HttpServletRequest request, HttpServletResponse response) {

    }

    @Override
    public void addCategory(HttpServletRequest request, HttpServletResponse response) {

    }

    @Override
    public void updateCategory(HttpServletRequest request, HttpServletResponse response) {

    }
    @Override
    public List<CategoryModel> pagingCategory(String keyword, int currentPage, int pageSize, String orderBy, List<Long> selectedBrands) {
        if (keyword != null && !keyword.isEmpty()) {
            keyword = keyword.trim();
        }
        return this.categoryDAO.findAll(keyword, currentPage, pageSize, orderBy, selectedBrands);
    }
}

================
File: service/impl/CheckoutServiceImpl.java
================
package vn.edu.hcmuaf.fit.myphamstore.service.impl;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import vn.edu.hcmuaf.fit.myphamstore.common.OrderStatus;
import vn.edu.hcmuaf.fit.myphamstore.common.PaymentMethod;
import vn.edu.hcmuaf.fit.myphamstore.common.SendEmail;
import vn.edu.hcmuaf.fit.myphamstore.dao.IAddressDAO;
import vn.edu.hcmuaf.fit.myphamstore.dao.IOrderDAO;
import vn.edu.hcmuaf.fit.myphamstore.model.*;
import vn.edu.hcmuaf.fit.myphamstore.service.ICheckoutService;
import vn.edu.hcmuaf.fit.myphamstore.service.ICouponService;
import vn.edu.hcmuaf.fit.myphamstore.service.IProductService;

import java.io.IOException;
import java.text.NumberFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicLong;

@ApplicationScoped
public class CheckoutServiceImpl implements ICheckoutService {
    @Inject
    private ICheckoutService checkoutService;
    @Inject
    private IProductService productService;
    @Inject
    private IAddressDAO addressDAO;
    @Inject
    private IOrderDAO orderDAO;
    @Inject
    private ICouponService couponService;

    @Override
    public void displayCheckout(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();
        UserModel user = (UserModel) session.getAttribute("user");
        List<CartModel> listCartItems = (List<CartModel>) session.getAttribute("cart");
        if (listCartItems == null) {
            request.setAttribute("errorMessage", "Your cart is empty.");
            request.getRequestDispatcher("/frontend/shopping_cart.jsp").forward(request, response);
        return;
        }
        List<CartModelHelper> listCartDisplay = new ArrayList<>();
        AtomicLong totalAmount = new AtomicLong(0);
        try {
            for (CartModel cartItem : listCartItems) {
                ProductModel product = productService.findProductById(cartItem.getProductId());
                if (product == null) {
                    request.setAttribute("errorMessage", "Product not found: " + cartItem.getProductId());
                    request.getRequestDispatcher("/frontend/shopping_cart.jsp").forward(request, response);
                    return;
                }else if(cartItem.getVariantId() == null){
                    totalAmount.addAndGet(product.getPrice() * cartItem.getQuantity());
                    CartModelHelper helper = new CartModelHelper();
                    helper.setQuantity(cartItem.getQuantity());//new CartModelHelper(product, cartItem.getQuantity())
                    helper.setProduct(product);
                    listCartDisplay.add(helper);
                }else{
                    List<ProductVariant> listVariant = productService.getProductVariantsByProductId(cartItem.getProductId());
                    ProductVariant variant = null;
                    for (ProductVariant productVariant : listVariant) {
                        if(cartItem.getVariantId() == productVariant.getId()){
                            variant = productVariant;
                        }
                    }
                    totalAmount.addAndGet((long) (variant.getPrice() * cartItem.getQuantity()));
                    CartModelHelper cartModelHelper =  new CartModelHelper(product, cartItem.getQuantity(), variant);
                    listCartDisplay.add(cartModelHelper);
                }

            }
        } catch (Exception e) {
            request.setAttribute("errorMessage", "An error occurred while processing your cart.");
            request.getRequestDispatcher("/frontend/shopping_cart.jsp").forward(request, response);
            return;
        }
        List<AddressModel> addresss = addressDAO.findByUserId(user.getId());
        for (AddressModel addressModel : addresss) {
            if (addressModel.getIsDefault()) {
                request.setAttribute("address", addressModel);
                break;
            }
        }

        request.setAttribute("listCartDisplay", listCartDisplay);
        request.setAttribute("totalAmount", totalAmount);
        request.getRequestDispatcher("/frontend/checkout.jsp").forward(request, response);
    }

    @Override
    public void checkout(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();
        List<CartModel> listCartItems = (List<CartModel>) session.getAttribute("cart");
        if (listCartItems == null) {
            request.setAttribute("errorMessage", "Your cart is empty.");
            request.getRequestDispatcher("/frontend/shopping_cart.jsp").forward(request, response);
            return;
        }
        List<CartModelHelper> listCartDisplay = new ArrayList<>();
        Double totalAmount = 0.0;
        try {
            for (CartModel cartItem : listCartItems) {
                ProductModel product = productService.findProductById(cartItem.getProductId());
                if (product == null) {
                    request.setAttribute("errorMessage", "Product not found: " + cartItem.getProductId());
                    request.getRequestDispatcher("/frontend/shopping_cart.jsp").forward(request, response);
                    return;
                }else if(cartItem.getVariantId() == null){
                    totalAmount += product.getPrice() * cartItem.getQuantity();
                    CartModelHelper helper = new CartModelHelper();
                    helper.setQuantity(cartItem.getQuantity());//new CartModelHelper(product, cartItem.getQuantity())
                    helper.setProduct(product);
                    listCartDisplay.add(helper);
                }else{
                    List<ProductVariant> listVariant = productService.getProductVariantsByProductId(cartItem.getProductId());
                    ProductVariant variant = null;
                    for (ProductVariant productVariant : listVariant) {
                        if(cartItem.getVariantId() == productVariant.getId()){
                            variant = productVariant;
                        }
                    }
                    totalAmount += (variant.getPrice() * cartItem.getQuantity());
                    CartModelHelper cartModelHelper =  new CartModelHelper(product, cartItem.getQuantity(), variant);
                    listCartDisplay.add(cartModelHelper);
                }

            }
            System.out.println("After displaying: " + listCartDisplay);
        } catch (Exception e) {
            request.setAttribute("errorMessage", "An error occurred while processing your cart.");
            request.getRequestDispatcher("/frontend/shopping_cart.jsp").forward(request, response);
            return;
        }
        String couponCode = request.getParameter("couponCode");
        if (couponCode != null && !couponCode.isEmpty()) {
            CouponModel coupon = couponService.applyCoupon(couponCode, totalAmount);
            if (coupon != null) {
                totalAmount -= coupon.getDiscountValue();
                request.setAttribute("appliedCoupon", coupon);
            } else {
                request.setAttribute("errorMessage", "Invalid or expired coupon code.");
                request.getRequestDispatcher("/frontend/checkout.jsp").forward(request, response);
                return;
            }
        }
        AddressModel address = this.getAddressFromRequest(request);
        OrderModel order = OrderModel.builder()
                .userId(address.getUserId())
                .addressId(address.getId())
                .totalPrice(totalAmount)
                .note(request.getParameter("customerNote"))
                .createdAt(LocalDateTime.now())
                .updatedAt(LocalDateTime.now())
                .paymentMethod(PaymentMethod.COD)
                .orderDate(LocalDateTime.now())
                .shippingFee(0)
                .status(OrderStatus.PENDING)
                .build();
        Long orderId = orderDAO.saveOrder(order);
        if (orderId == null) {
            request.setAttribute("errorMessage", "An error occurred while processing your order.");
            request.getRequestDispatcher("/frontend/checkout.jsp").forward(request, response);
            return;
        }
        System.out.println(listCartDisplay);
        for (CartModelHelper cartItem : listCartDisplay) {
            OrderDetailModel orderDetail = OrderDetailModel.builder()
                    .orderId(orderId)
                    .productId(cartItem.getProduct().getId())
                    .quantity(cartItem.getQuantity())
                    .totalPrice((double) (cartItem.getProduct().getPrice() * cartItem.getQuantity()))
                    .build();
            orderDAO.saveOrderDetail(orderDetail);
        }
        session.removeAttribute("cart");
        //updatet total price
        order.setTotalPrice(totalAmount);
        orderDAO.updateOrder(order);

        // lấy user từ session
        UserModel user = (UserModel) session.getAttribute("user");
        //gửi email thông báo đơn hàng

        // Sử dụng ExecutorService để gửi email bất đồng bộ
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        executorService.submit(() -> {
            SendEmail.notifyOrderToUser(user.getEmail(), order, listCartDisplay, address);
        });
        executorService.shutdown(); // Đóng ExecutorService sau khi gửi
        order.setId(orderId);


        response.sendRedirect("/trang-chu");
    }


    private AddressModel getAddressFromRequest(HttpServletRequest request) {
        //get user id from session
        HttpSession session = request.getSession();
        UserModel user = (UserModel) session.getAttribute("user");
        Long userId = user.getId();
        AddressModel address = AddressModel.builder()
                .userId(userId)
                .recipientName(request.getParameter("recipientName"))
                .recipientPhone(request.getParameter("recipientPhone"))
                .city(request.getParameter("city"))
                .district(request.getParameter("district"))
                .ward(request.getParameter("ward"))
                .note(request.getParameter("note"))
                .build();
        //check if address is already exist
        boolean addressExist  = addressDAO.checkAddressIsExist(address, userId);
        Long addressId = null;
        if (!addressExist) {
            addressId = addressDAO.save(address);
        }else {
           List<AddressModel> listAddress = addressDAO.findByUserId((long) Integer.parseInt(userId.toString()));
              for (AddressModel addressModel : listAddress) {
                if (addressModel.getRecipientName().equals(address.getRecipientName()) &&
                          addressModel.getRecipientPhone().equals(address.getRecipientPhone()) &&
                          addressModel.getCity().equals(address.getCity()) &&
                          addressModel.getDistrict().equals(address.getDistrict()) &&
                          addressModel.getWard().equals(address.getWard()) &&
                          addressModel.getNote().equals(address.getNote())) {
                     addressId = addressModel.getId();
                     break;
                }
              }
        }
        if (addressId != null) {
            address.setId(addressId);
        }
        return address;
    }
}

================
File: service/impl/ContactServiceImpl.java
================
package vn.edu.hcmuaf.fit.myphamstore.service.impl;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import vn.edu.hcmuaf.fit.myphamstore.common.ContactStatus;
import vn.edu.hcmuaf.fit.myphamstore.dao.IContactDAO;
import vn.edu.hcmuaf.fit.myphamstore.model.BrandModel;
import vn.edu.hcmuaf.fit.myphamstore.model.ContactModel;
import vn.edu.hcmuaf.fit.myphamstore.service.IContactService;

import java.io.IOException;
import java.util.List;

@ApplicationScoped
public class ContactServiceImpl implements IContactService {
    //CDI container dependency injection (tiêm phụ thuộc) -> java servlet weld
    @Inject
    private IContactDAO contactDAO;

    @Override
    public ContactModel findContactById(Long id) {
        return contactDAO.findContactById(id);
    }

    @Override
    public List<ContactModel> getContactsWithPaging(String keyword, int currentPage, int pageSize, String orderBy) {
        if (keyword != null && !keyword.isEmpty()) {
            keyword = keyword.trim();
        }
        return this.contactDAO.findAll(keyword, currentPage, pageSize, orderBy);
    }

    @Override
    public void displayContact(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        RequestDispatcher dispatcher = request.getRequestDispatcher("/admin/contact/contact-management.jsp");
        String keyword = request.getParameter("keyword");
        String orderBy = request.getParameter("orderBy");
        int currentPage = Integer.parseInt(request.getParameter("currentPage")==null?"1": request.getParameter("currentPage"));
        int pageSize = Integer.parseInt(request.getParameter("pageSize") == null?"5": request.getParameter("pageSize"));

        List<ContactModel> contacts = this.getContactsWithPaging(keyword, currentPage, pageSize, orderBy);
        Long totalPages = this.contactDAO.getTotalPage(5);

        request.setAttribute("contacts", contacts);
        request.setAttribute("totalPages", totalPages);
        request.setAttribute("currentPage", currentPage);
        request.setAttribute("pageSize", pageSize);
        request.setAttribute("keyword", keyword);
        request.setAttribute("orderBy", orderBy);
        dispatcher.forward(request, response);
    }

    @Override
    public void pending(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        Long id = Long.parseLong(request.getParameter("id"));
        //tến hành cập nhật trạng thái sản phẩm
        ContactModel contactModel = ContactModel.builder().id(id).build();
        contactModel.setStatus(ContactStatus.PENDING);
        ContactModel isSuccess = contactDAO.update(contactModel);
        if (isSuccess == null) {
            request.setAttribute("message", "Có lỗi xảy ra");
        } else {
            request.setAttribute("message", "Cập nhật thành công id: " + id);
            this.displayContact(request, response);
        }
    }

    @Override
    public void done(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        Long id = Long.parseLong(request.getParameter("id"));
        //tến hành cập nhật trạng thái sản phẩm
        ContactModel contactModel = ContactModel.builder().id(id).build();
        contactModel.setStatus(ContactStatus.DONE);
        ContactModel isSuccess = contactDAO.update(contactModel);
        if (isSuccess == null) {
            request.setAttribute("message", "Có lỗi xảy ra");
        } else {
            request.setAttribute("message", "Cập nhật thành công id: " + id);
            this.displayContact(request, response);
        }
    }



    @Override
    public Long getTotalPage(int i) {
        return contactDAO.getTotalPage(i);
    }
}

================
File: service/impl/CouponServiceImpl.java
================
package vn.edu.hcmuaf.fit.myphamstore.service.impl;

import jakarta.inject.Inject;
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import vn.edu.hcmuaf.fit.myphamstore.dao.ICouponDAO;
import vn.edu.hcmuaf.fit.myphamstore.model.CouponModel;
import vn.edu.hcmuaf.fit.myphamstore.service.ICouponService;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.List;

public class CouponServiceImpl implements ICouponService {
    @Inject
    private ICouponDAO couponDAO;

    @Override
    public CouponModel findCouponById(Long id) {
        return couponDAO.findCouponById(id);
    }

    @Override
    public List<CouponModel> getCouponsWithPaging(String keyword, int currentPage, int pageSize, String orderBy) {
        if (keyword != null && !keyword.isEmpty()) {
            keyword = keyword.trim();
        }
        return couponDAO.findAll(keyword, currentPage, pageSize, orderBy);
    }
    public CouponModel applyCoupon(String couponCode, Double totalAmount) {
        CouponModel coupon = couponDAO.findCouponByCode(couponCode);
        if (coupon == null || !coupon.getIsAvailable() || coupon.getEndDate().isBefore(LocalDateTime.now())) {
            return null;
        }
        if (totalAmount < coupon.getMinOrderValue()) {
            return null;
        }
        return coupon;
    }
    @Override
    public Long getTotalPage(int numOfItem) {
        return couponDAO.getTotalPage(numOfItem);
    }

    @Override
    public void displayCoupon(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        RequestDispatcher dispatcher = request.getRequestDispatcher("/admin/coupon/coupon-management.jsp");
        String keyword = request.getParameter("keyword");
        String orderBy = request.getParameter("orderBy");
        int currentPage = Integer.parseInt(request.getParameter("currentPage")==null?"1": request.getParameter("currentPage"));
        int pageSize = Integer.parseInt(request.getParameter("pageSize") == null?"5": request.getParameter("pageSize"));

        List<CouponModel> coupons = this.getCouponsWithPaging(keyword, currentPage, pageSize, orderBy);
        Long totalPages = this.couponDAO.getTotalPage(5);

        request.setAttribute("coupons", coupons);
        request.setAttribute("totalPages", totalPages);
        request.setAttribute("currentPage", currentPage);
        request.setAttribute("pageSize", pageSize);
        request.setAttribute("keyword", keyword);
        request.setAttribute("orderBy", orderBy);
        dispatcher.forward(request, response);
    }

    @Override
    public void stopBuying(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        Long id = Long.parseLong(request.getParameter("id"));
        //tến hành cập nhật trạng thái sản phẩm
        CouponModel couponModel = CouponModel.builder().id(id).build();
        couponModel.setIsAvailable(false);
        CouponModel isSuccess = couponDAO.update(couponModel);
        System.out.println(isSuccess);
        if (isSuccess == null) {
            request.setAttribute("message", "Có lỗi xảy ra");
        } else {
            request.setAttribute("message", "Cập nhật thành công id: " + id);
            this.displayCoupon(request, response);
        }
    }

    @Override
    public void startBuying(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        Long id = Long.parseLong(request.getParameter("id"));
        //tến hành cập nhật trạng thái sản phẩm
        CouponModel couponModel = CouponModel.builder().id(id).build();
        couponModel.setIsAvailable(true);
        CouponModel isSuccess = couponDAO.update(couponModel);
        if (isSuccess == null) {
            request.setAttribute("message", "Có lỗi xảy ra");
        } else {
            request.setAttribute("message", "Cập nhật thành công id: " + id);
            this.displayCoupon(request, response);
        }
    }

    @Override
    public void addCoupon(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        RequestDispatcher dispatcher = request.getRequestDispatcher("/admin/coupon/add-coupon.jsp");
        dispatcher.forward(request, response);
    }

    @Override
    public void updateCoupon(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        RequestDispatcher dispatcher = request.getRequestDispatcher("/admin/coupon/add-coupon.jsp");
        Long id = Long.parseLong(request.getParameter("id"));
        CouponModel coupon = couponDAO.getCouponDetail(id);
        System.out.println(coupon);
        request.setAttribute("coupon", coupon);
        dispatcher.forward(request, response);
    }


    @Override
    public List<CouponModel> findAvailableCoupons() {
        return couponDAO.findAvailableCoupons();
    }
}

================
File: service/impl/OrderServiceImpl.java
================
package vn.edu.hcmuaf.fit.myphamstore.service.impl;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import vn.edu.hcmuaf.fit.myphamstore.common.OrderStatus;
import vn.edu.hcmuaf.fit.myphamstore.dao.IAddressDAO;
import vn.edu.hcmuaf.fit.myphamstore.dao.IOrderDAO;
import vn.edu.hcmuaf.fit.myphamstore.model.*;
import vn.edu.hcmuaf.fit.myphamstore.service.IOrderService;
import vn.edu.hcmuaf.fit.myphamstore.service.IProductService;
import vn.edu.hcmuaf.fit.myphamstore.service.IUserService;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@ApplicationScoped
public class OrderServiceImpl implements IOrderService {
    @Inject
    private IOrderDAO orderDAO;
    @Inject
    private IUserService userService;
    @Inject
    private IAddressDAO addressDAO;
    @Inject
    private IProductService productService;

    @Override
    public void displayOrders(HttpServletRequest request, HttpServletResponse resp) throws ServletException, IOException {
        RequestDispatcher requestDispatcher = request.getRequestDispatcher("/admin/order/order-management.jsp");
        String keyword = request.getParameter("keyword");
        String orderBy = request.getParameter("orderBy");
        int currentPage = Integer.parseInt(request.getParameter("currentPage") == null ? "1" : request.getParameter("currentPage"));
        int pageSize = Integer.parseInt(request.getParameter("pageSize") == null ? "10" : request.getParameter("pageSize"));

        List<OrderModel> orders = getOrdersWithPaging(keyword, currentPage, pageSize, orderBy);
        Map<OrderModel, UserModel> orderUserMap = new HashMap<>();
        for (OrderModel order : orders) {
            UserModel user = userService.findUserById(order.getUserId());
            orderUserMap.put(order, user);
        }

        Long totalPages = getTotalPage(pageSize);

        // Gửi danh sách order đến trang JSP
        request.setAttribute("orderUserMap", orderUserMap);
        request.setAttribute("totalPages", totalPages);
        request.setAttribute("currentPage", currentPage);
        request.setAttribute("totalItems", orderDAO.countAllProducts());
        request.setAttribute("pageSize", pageSize);
        request.setAttribute("keyword", keyword);
        request.setAttribute("orderBy", orderBy);
        requestDispatcher.forward(request, resp);
    }

    @Override
    public void displayOrderDetail(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        RequestDispatcher requestDispatcher = req.getRequestDispatcher("/admin/order/order-detail.jsp");
        Long orderId = Long.parseLong(req.getParameter("id"));

        OrderModel order = getOrderDetails(orderId);
        UserModel user = userService.findUserById(order.getUserId());
        AddressModel address = addressDAO.findAddressById(order.getAddressId());
        List<OrderDetailModel> listOrderDetails = getOrderDetailsByOrderId(orderId);
        Map<OrderDetailModel, ProductModel> orderDetails = new HashMap<>();
        for (OrderDetailModel orderDetail : listOrderDetails) {
            ProductModel product = productService.findProductById(orderDetail.getProductId());
            orderDetails.put(orderDetail, product);
        }

        req.setAttribute("order", order);
        req.setAttribute("orderDetails", orderDetails);
        req.setAttribute("address", address);
        req.setAttribute("user", user);
        requestDispatcher.forward(req, resp);
    }

    @Override
    public Long getTotalPage(int numOfItems) {
        return orderDAO.getTotalPage(numOfItems);
    }

    @Override
    public Long getTotalOrder() {
        return 0L;
    }

    @Override
    public OrderModel findOrderById(Long id) {
        return null;
    }

    @Override
    public List<OrderModel> getOrdersWithPaging(String keyword, int currentPage, int pageSize, String orderBy) {
        if (keyword != null && !keyword.isEmpty()) {
            keyword = keyword.trim();
        }
        return orderDAO.findAll(keyword, currentPage, pageSize, orderBy);
    }

    @Override
    public List<OrderDetailModel> getOrderDetailsByOrderId(Long orderId) {
        return orderDAO.findOrderDetailByOrderId(orderId);
    }


    @Override
    public List<OrderModel> getOrderHistoryByUserId(Long userId, int currentPage, int pageSize) {
        return orderDAO.findByUserId(userId, currentPage, pageSize);
    }

    @Override
    public void changeStatus(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        Long orderId = Long.parseLong(req.getParameter("id"));
        OrderStatus status = OrderStatus.valueOf(req.getParameter("status"));
        orderDAO.changeStatus(orderId, status);
        if(status == OrderStatus.CONFIRMED){
            OrderModel order = orderDAO.findOrderById(orderId);
            order.setConfirmedAt(LocalDateTime.now());
            orderDAO.update(order);
        }
        resp.sendRedirect(req.getContextPath() + "/admin/orders?action=display");
    }

    @Override
    public List<ProductModel> getProductByOrderDetail(OrderDetailModel orderDetail) {
        return productService.findProduct(orderDetail.getProductId());
    }

    public List<OrderModel> getOrdersByUserId(Long userId) {
        return orderDAO.findByUserId(userId, 1, 10);
    }

    public OrderModel getOrderDetails(Long orderId) {
        return orderDAO.findOrderById(orderId);
    }
}

================
File: service/impl/ProductImageServiceImpl.java
================
package vn.edu.hcmuaf.fit.myphamstore.service.impl;

import jakarta.inject.Inject;
import vn.edu.hcmuaf.fit.myphamstore.dao.IProductImageDAO;
import vn.edu.hcmuaf.fit.myphamstore.model.ProductImageModel;
import vn.edu.hcmuaf.fit.myphamstore.service.IProductImageService;

import java.util.List;

public class ProductImageServiceImpl implements IProductImageService {
    @Inject
    private IProductImageDAO productImageDAO;

    @Override
    public ProductImageModel findProductImageById(Long id) {
        return productImageDAO.findProductImageById(id);
    }

    @Override
    public List<ProductImageModel> pagingProductImage(String keyword, int currentPage, int pageSize, String orderBy) {
        return productImageDAO.findAll(keyword, currentPage, pageSize, orderBy);
    }

    @Override
    public Long getTotalPage(int numOfItem) {
        return productImageDAO.getTotalPage(numOfItem);
    }


}

================
File: service/impl/ProductServiceImpl.java
================
package vn.edu.hcmuaf.fit.myphamstore.service.impl;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import vn.edu.hcmuaf.fit.myphamstore.dao.*;
import vn.edu.hcmuaf.fit.myphamstore.model.*;
import vn.edu.hcmuaf.fit.myphamstore.service.IProductService;

import java.io.IOException;
import java.util.HashSet;
import java.util.List;
import java.util.stream.Collectors;

@ApplicationScoped
public class ProductServiceImpl implements IProductService {
    //khai báo các hằng số cấu hình
    private static final String UPLOAD_DIRECTORY = "/static/images/products";
    private static final int THRESHOLD_SIZE = 1024 * 1024 * 3; // 3MB
    private static final int MAX_FILE_SIZE = 1024 * 1024 * 40; // 40MB
    private static final int MAX_REQUEST_SIZE = 1024 * 1024 * 50; // 50MB


    @Inject
    private IProductDAO productDAO;
    @Inject
    private IBrandDAO brandDAO;
    @Inject
    private IProductImageDAO productImageDAO;
    @Inject
    private IReviewDAO reviewDAO;
    @Inject
    private ICategoryDAO categoryDAO;
    @Inject
    private IProductVariantDAO productVariantDAO;



    @Override
    public Long getTotalPage(int pageSize) {
        return productDAO.countAllProducts() / pageSize;
    }
    @Override
    public List<ProductModel> getProductsWithPaging(String keyword, int currentPage, int pageSize, String orderBy) {
        if (keyword != null && !keyword.isEmpty()) {
            keyword = keyword.trim();
        }
        return productDAO.findAll(keyword, currentPage, pageSize, orderBy);
    }

    @Override
    public Long getTotalProduct() {
        return productDAO.countAllProducts();
    }

    @Override
    public List<ProductModel> getProductsByCategory(long l) {
        return productDAO.getProductsByCategory(l);
    }

    @Override
    public List<ProductModel> getLatestProducts() {
        return productDAO.getLatestProducts();
    }

    @Override
    public ProductModel findProductById(Long id) {
        return productDAO.getProductDetail(id);
    }

    @Override
    public ProductModel getProductDetail(Long id) {
        ProductModel product = productDAO.getProductDetail(id);
        return productDAO.getProductDetail(id);
    }

    @Override
    public BrandModel getBrandById(Long brandId) {
        return brandDAO.findBrandById(brandId);
    }

    @Override
    public List<ProductImageModel> getProductImageById(Long id) {
        return productImageDAO.getProductImageById(id);
    }

    @Override
    public List<ReviewModel> getReviewsByProductId(Long id) {
        return reviewDAO.getAllReviewsByProductId(id);
    }

    @Override
    public void executeAddProduct(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
            String[] listImage = request.getParameterValues("images");

        String thumbnail = request.getParameter("thumbnail");
        String name = request.getParameter("productName");
        String stock = request.getParameter("stock");
        String description = request.getParameter("description");
        String price = request.getParameter("price");
        String costPrice = request.getParameter("costPrice");
        String brandId = request.getParameter("brandId");
        String categoryId = request.getParameter("categoryId");

        ProductModel productModel = ProductModel.builder()
                .name(name)
                .description(description)
                .price(Long.parseLong(price))
                .costPrice(Long.parseLong(costPrice))
                .brandId(Long.parseLong(brandId))
                .categoryId(Long.parseLong(categoryId))
                .thumbnail(thumbnail)
                .stock(Integer.parseInt(stock))
                .isAvailable(true)
                .build();
        try{
            Long isSuccess = productDAO.save(productModel);
            if (isSuccess == null || isSuccess == 0) {
                request.setAttribute("message", "Có lỗi xảy ra");
            } else {
                //tiến hành lưu ảnh sản phẩm
                for (String image : listImage) {
                    ProductImageModel productImageModel = ProductImageModel.builder()
                            .productId(isSuccess)
                            .url(image)
                            .build();
                    productImageDAO.save(productImageModel);
                }
                request.setAttribute("message", "Thêm sản phẩm thành công");
                this.displayProduct(request, response);
            }
        }catch (Exception e){
            e.printStackTrace();
        }
    }

    @Override
    public void executeUpdateProduct(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String[] listImage = request.getParameterValues("images") != null ? request.getParameterValues("images") : new String[0];
        Long id = Long.parseLong(request.getParameter("id"));
        String thumbnail = request.getParameter("thumbnail") != null ? request.getParameter("thumbnail") : "";
        String name = request.getParameter("productName");
        String stock = request.getParameter("stock");
        String description = request.getParameter("description");
        String price = request.getParameter("price");
        String costPrice = request.getParameter("costPrice");
        String brandId = request.getParameter("brandId");
        String categoryId = request.getParameter("categoryId");

        // phần get data products variant ở đây
        String[] variantNames = request.getParameterValues("variantName");
        String[] variantStocks = request.getParameterValues("variantStock");
        String[] variantCostPrices = request.getParameterValues("variantCostPrice");
        String[] variantPrices = request.getParameterValues("variantPrice");

        // Kiểm tra xem dữ liệu có null không
        if (variantNames != null && variantStocks != null && variantCostPrices != null && variantPrices != null) {
            for (int i = 0; i < variantNames.length; i++) {
                String variantName = variantNames[i];
                int variantStock = Integer.parseInt(variantStocks[i]);
                double variantCostPrice = Double.parseDouble(variantCostPrices[i]);
                double variantPrice = Double.parseDouble(variantPrices[i]);

                // Xử lý dữ liệu, có thể lưu vào database
                ProductVariant productVariant = ProductVariant.builder()
                        .productId(id)
                        .name(variantName)
                        .stock(variantStock)
                        .costPrice(variantCostPrice)
                        .price(variantPrice)
                        .isAvailable(true)
                        .build();
                productVariantDAO.save(productVariant);
            }
        }

        ProductModel productModel = ProductModel.builder()
                .id(id)
                .name(name)
                .description(description)
                .price(Long.parseLong(price))
                .costPrice(Long.parseLong(costPrice))
                .brandId(Long.parseLong(brandId))
                .categoryId(Long.parseLong(categoryId))
                .thumbnail(thumbnail)
                .stock(Integer.parseInt(stock))
                .isAvailable(true)
                .soldQuantity(0)
                .build();

        try{
            ProductModel isSuccess = productDAO.update(productModel);
            if (isSuccess == null) {
                request.setAttribute("message", "Có lỗi xảy ra");
            } else {
                //xóa ảnh cũ
                List<ProductImageModel> oldImages = productImageDAO.getProductImageById(id);
                for (ProductImageModel image : oldImages) {
                    productImageDAO.delete(image);
                }
                //tiến hành lưu ảnh sản phẩm
                for (String image : listImage) {
                    ProductImageModel productImageModel = ProductImageModel.builder()
                            .productId(id)
                            .url(image)
                            .build();
                    productImageDAO.save(productImageModel);
                }
                request.setAttribute("message", "Cập nhật sản phẩm thành công");
                //refresh lại trang
                this.displayProduct(request, response);
            }
        }catch (Exception e){
            e.printStackTrace();
        }
    }

    @Override
    public List<ProductModel> getFilteredProducts(String keyword, List<String> categories, List<String> brands, String priceRange, int currentPage, int pageSize, String orderBy) {
        String[] categoriesArray = categories != null ? categories.toArray(new String[0]) : new String[0];
        String[] brandsArray = brands != null ? brands.toArray(new String[0]) : new String[0];
        return productDAO.getFilteredProducts(keyword, categoriesArray, brandsArray, priceRange, currentPage, pageSize, orderBy);
    }

    @Override
    public List<ProductVariant> getProductVariantsByProductId(Long id) {
        try{
            return productVariantDAO.findAllByProduct(ProductModel.builder().id(id).build());
        }catch (Exception e){
            e.printStackTrace();
            return List.of();
        }
    }

    @Override
    public List<ProductModel> findProduct(Long productId) {
        return productDAO.findProduct(productId);
    }

    @Override
    public void stopBuying(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        Long id = Long.parseLong(request.getParameter("id"));
        //tến hành cập nhật trạng thái sản phẩm
        ProductModel productModel = ProductModel.builder().id(id).build();
        productModel.setIsAvailable(false);

        ProductModel isSuccess = productDAO.update(productModel);
        if (isSuccess == null) {
            request.setAttribute("message", "Có lỗi xảy ra");
        } else {
            request.setAttribute("message", "Cập nhật thành công id: " + id);
            this.displayProduct(request, response);
        }
    }

    @Override
    public void startBuying(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        Long id = Long.parseLong(request.getParameter("id"));
        //tến hành cập nhật trạng thái sản phẩm
        ProductModel productModel = ProductModel.builder().id(id).build();
        productModel.setIsAvailable(true);

        ProductModel isSuccess = productDAO.update(productModel);
        if (isSuccess == null) {
            request.setAttribute("message", "Có lỗi xảy ra");
        } else {
            request.setAttribute("message", "Cập nhật thành công id: " + id);
            this.displayProduct(request, response);
        }
    }

    @Override
    public void displayProduct(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        RequestDispatcher dispatcher = request.getRequestDispatcher("/admin/product/product-management.jsp");
        String keyword = request.getParameter("keyword");
        String orderBy = request.getParameter("orderBy");
        int currentPage = Integer.parseInt(request.getParameter("currentPage") == null ? "1" : request.getParameter("currentPage"));
        int pageSize = Integer.parseInt(request.getParameter("pageSize") == null ? "10" : request.getParameter("pageSize"));

        List<ProductModel> products = this.getProductsWithPaging(keyword, currentPage, pageSize, orderBy);
        Long totalPages = this.productDAO.getTotalPage(pageSize);
        // Gửi danh sách sản phẩm đến trang JSP
        request.setAttribute("products", products);
        request.setAttribute("totalPages", totalPages);
        request.setAttribute("currentPage", currentPage);
        request.setAttribute("totalItems", productDAO.countAllProducts());
        System.out.println("currentPage: " + currentPage);
        request.setAttribute("pageSize", pageSize);
        request.setAttribute("keyword", keyword);
        request.setAttribute("orderBy", orderBy);
        dispatcher.forward(request, response);
    }

    @Override
    public void addProduct(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        RequestDispatcher dispatcher = request.getRequestDispatcher("/admin/product/add-product.jsp");
        List<BrandModel> brands = brandDAO.getAllBrands();
        List<CategoryModel> categories = categoryDAO.getAllCategories();
        request.setAttribute("brands", brands);
        request.setAttribute("categories", categories);
        dispatcher.forward(request, response);
    }

    @Override
    public void updateProduct(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        RequestDispatcher dispatcher = request.getRequestDispatcher("/admin/product/add-product.jsp");
        Long id = Long.parseLong(request.getParameter("id"));
        ProductModel product = productDAO.getProductDetail(id);
        List<ProductImageModel> images = productImageDAO.getProductImageById(id);
        List<BrandModel> brands = brandDAO.getAllBrands();
        List<CategoryModel> categories = categoryDAO.getAllCategories();
        List<ProductVariant> productVariants = productVariantDAO.findAllByProduct(product);

        request.setAttribute("variants", productVariants);
        request.setAttribute("brands", brands);
        request.setAttribute("categories", categories);
        request.setAttribute("product", product);
        request.setAttribute("images", images);
        dispatcher.forward(request, response);
    }
}

================
File: service/impl/ReviewServiceImpl.java
================
package vn.edu.hcmuaf.fit.myphamstore.service.impl;

import jakarta.inject.Inject;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import vn.edu.hcmuaf.fit.myphamstore.dao.IReviewDAO;
import vn.edu.hcmuaf.fit.myphamstore.model.ReviewModel;
import vn.edu.hcmuaf.fit.myphamstore.model.UserModel;
import vn.edu.hcmuaf.fit.myphamstore.service.IReviewService;

import java.io.IOException;
import java.util.List;

public class ReviewServiceImpl implements IReviewService {
    @Inject
    private IReviewDAO reviewDAO;

    @Override
    public ReviewModel findReviewById(Long id) {
        return reviewDAO.findReviewById(id);
    }

    @Override
    public ReviewModel getReviewDetail(Long id) {
        return reviewDAO.getReviewDetail(id);
    }

    @Override
    public List<ReviewModel> getAllReviewsByProductId(Long id) {
        return reviewDAO.getAllReviewsByProductId(id);
    }

    @Override
    public List<ReviewModel> pagingReview(String keyword, int currentPage, int pageSize, String orderBy) {
        return reviewDAO.findAll(keyword, currentPage, pageSize, orderBy);
    }

    @Override
    public void addReview(HttpServletRequest request, HttpServletResponse response) throws IOException {
        UserModel user = (UserModel) request.getSession().getAttribute("user");
        if (user == null) {
            response.sendRedirect(request.getContextPath() + "/login");
            return;
        }
        String productId = request.getParameter("productId");
        String userId = request.getParameter("userId");
        System.out.println("userId: " + userId);
        int rating = Integer.parseInt(request.getParameter("rating"));
        String comment = request.getParameter("comment");

        ReviewModel review = new ReviewModel();
        review.setProductId(Long.parseLong(productId));
        review.setUserId(Long.parseLong(userId));
        review.setRating(rating);
        review.setComment(comment);

        reviewDAO.saveReview(review,Long.parseLong(userId),Long.parseLong(productId));

        response.sendRedirect(request.getContextPath() + "/product-detail?id=" + productId);
    }
    }

================
File: service/impl/SlideServiceImpl.java
================
package vn.edu.hcmuaf.fit.myphamstore.service.impl;

import jakarta.inject.Inject;
import vn.edu.hcmuaf.fit.myphamstore.dao.ISlideDAO;
import vn.edu.hcmuaf.fit.myphamstore.model.SlideModel;
import vn.edu.hcmuaf.fit.myphamstore.service.ISlideService;

import java.util.List;

public class SlideServiceImpl implements ISlideService {
    @Inject
    private ISlideDAO slideDAO;
    @Override
    public SlideModel findSlideById(Long id) {
        return slideDAO.findSlideById(id);
    }

    @Override
    public List<SlideModel> pagingSlide(String keyword, int currentPage, int pageSize, String orderBy) {
        return List.of();
    }

    @Override
    public Long getTotalPage(int numOfItem) {
        return slideDAO.getTotalPage(numOfItem);
    }

    @Override
    public void save(SlideModel slideModel) {
        slideDAO.save(slideModel);
    }

    @Override
    public void delete(SlideModel id) {
        slideDAO.delete(id);
    }

    @Override
    public List<SlideModel> findAll() {
        return slideDAO.findAll();
    }

    @Override
    public void deleteAll() {
        slideDAO.deleteAll();
    }
}

================
File: service/impl/UserServiceImpl.java
================
package vn.edu.hcmuaf.fit.myphamstore.service.impl;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.Part;
import org.springframework.security.crypto.bcrypt.BCrypt;
import vn.edu.hcmuaf.fit.myphamstore.common.*;
import vn.edu.hcmuaf.fit.myphamstore.dao.IAddressDAO;
import vn.edu.hcmuaf.fit.myphamstore.dao.IOtpDAO;
import vn.edu.hcmuaf.fit.myphamstore.dao.IRoleDAO;
import vn.edu.hcmuaf.fit.myphamstore.dao.IUserDAO;
import vn.edu.hcmuaf.fit.myphamstore.exception.UserNotActiveException;
import vn.edu.hcmuaf.fit.myphamstore.model.AddressModel;
import vn.edu.hcmuaf.fit.myphamstore.model.UserModel;
import vn.edu.hcmuaf.fit.myphamstore.service.IUserService;

import java.io.IOException;
import java.io.InputStream;
import java.time.LocalDate;
import java.util.Base64;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.stream.Collectors;

@ApplicationScoped

public class UserServiceImpl implements IUserService {
    @Inject
    private IUserDAO userDAO;
    @Inject
    private IRoleDAO roleDAO;
    @Inject
    private IOtpDAO otpDAO;
    @Inject
    private IAddressDAO addressDAO;


    @Override
    public List<UserModel> getUsersWithPaging(String keyword, int currentPage, int pageSize, String orderBy) {
        if (keyword != null && !keyword.isEmpty()) {
            keyword = keyword.trim();
        }
        return userDAO
                .findAll(keyword, currentPage, pageSize, orderBy)
                .stream().map(u ->{
                    u.setRoles(roleDAO.findListRoleByUserId(u.getId()));
                    return u;
                }).collect(Collectors.toList());
    }

    @Override
    public boolean checkLogin(String email, String password) {
        return userDAO.checkLogin(email, password);
    }

    @Override
    public UserModel findUserByEmail(String email) {
        if(email == null || email.isBlank()) {
            return null;
        }
        try{
            UserModel user = userDAO.getUserByEmail(email);
            if(user != null) {
                user.setRoles(roleDAO.findListRoleByUserId(user.getId()));
            }
            return user;
        }catch (Exception e){
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public void login(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        String email = request.getParameter("email");
        String password = request.getParameter("password");

        if (email == null || password == null || email.trim().isEmpty() || password.trim().isEmpty()) {
            request.setAttribute("message", "Vui lòng nhập email và mật khẩu!");
            request.getRequestDispatcher("/frontend/login.jsp").forward(request, response);
            return;
        }

        email = email.trim();
        password = password.trim();

        try {
            boolean isAuthenticated = this.checkLogin(email, password);
            if (isAuthenticated) {
                UserModel user = this.findUserByEmail(email); // Gọi thêm phương thức này
                if (user != null) {
                    request.getSession().setAttribute("user", user);
                    if (user.getRoles() != null && user.getRoles().stream().anyMatch(r -> r.getName().equalsIgnoreCase (RoleType.ADMIN))) {
                        response.sendRedirect(request.getContextPath() + "/admin");
                    } else {
                        response.sendRedirect(request.getContextPath() + "/trang-chu");
                    }
                }
            } else {
                request.setAttribute("message", "Sai email hoặc mật khẩu!");
                request.getRequestDispatcher("/frontend/login.jsp").forward(request, response);
            }
        } catch (UserNotActiveException e) {
            request.setAttribute("message", e.getMessage());
            request.getRequestDispatcher("/frontend/login.jsp").forward(request, response);
        } catch (Exception e) {
            e.printStackTrace();
            request.setAttribute("message", "Đã xảy ra lỗi, vui lòng thử lại sau!");
            request.getRequestDispatcher("/frontend/login.jsp").forward(request, response);
        }
    }

    @Override
    public void logout(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        request.getSession().removeAttribute("user");
        request.getSession().invalidate();
        response.sendRedirect(request.getContextPath() + "/trang-chu");
    }

    @Override
    public void changePassword(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {

    }

    @Override
    public void register(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        RequestDispatcher dispatcher = null;
        String fullName = request.getParameter("fullName");
        String email = request.getParameter("email");
        email = email.trim();
        String password = request.getParameter("password");
        password = password.trim();
        String confirmPassword = request.getParameter("rePassword");
        String phone  = request.getParameter("phone");
        LocalDate dateOfBirth = LocalDate.parse(request.getParameter("dateOfBirth"));
        String gender = request.getParameter("gender");
        //check email tồn tại
        if(userDAO.checkEmailExist(email)) {
            request.setAttribute("message", "Email đã tồn tại trong hệ thống!");
            dispatcher = request.getRequestDispatcher("/frontend/register.jsp");
            dispatcher.forward(request, response);
            return;
        }
        //check phone number tồn tại
        if(userDAO.checkPhoneExist(phone)) {
            request.setAttribute("message", "Số đện thoại đã tồn tại trong hệ thống!");
            dispatcher = request.getRequestDispatcher("/frontend/register.jsp");
            dispatcher.forward(request, response);
            return;
        }
        //check pass
        if(!password.equalsIgnoreCase(confirmPassword)) {
            request.setAttribute("message", "Mật khẩu không trùng khớp!");
            dispatcher = request.getRequestDispatcher("/frontend/register.jsp");
            dispatcher.forward(request, response);
            return;
        }
        //tiến hành đăng kí
        UserModel user = UserModel.builder()
                .fullName(fullName)
                .gender(Gender.valueOf(gender))
                .dateOfBirth(dateOfBirth)
                .email(email)
                .phone(phone)
                .status(UserStatus.NONE)
                .password(password.trim())
                .avatar(null).build();
        Long savedUserId = userDAO.save(user);
        if( savedUserId!= null && savedUserId  > 0){
            roleDAO.setRoleToUser(RoleType.CUSTOMER, savedUserId);
        }
        String otp = otpDAO.generateOtp();
        otpDAO.saveOtp(email, otp);
        // Sử dụng ExecutorService để gửi email bất đồng bộ
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        String finalEmail = email;
        executorService.submit(() -> {
            SendEmail.sendEmail(finalEmail, otp);
        });
        executorService.shutdown(); // Đóng ExecutorService sau khi gửi

        request.setAttribute("message", "Đăng ký thành công, Vui lòng kiểm tra email để kích hoạt tài khoản");
        request.getRequestDispatcher("/frontend/register.jsp").forward(request, response);
    }

    @Override
    public void displayListUsers(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        RequestDispatcher dispatcher = request.getRequestDispatcher("/admin/customer/customer-management.jsp");
        String keyword = request.getParameter("keyword");
        String orderBy = request.getParameter("orderBy");
        int currentPage = Integer.parseInt(request.getParameter("currentPage") == null ? "1" : request.getParameter("currentPage"));
        int pageSize = Integer.parseInt(request.getParameter("pageSize") == null ? "10" : request.getParameter("pageSize"));

        List<UserModel> users = this.getUsersWithPaging(keyword, currentPage, pageSize, orderBy)
                .stream()
                .filter(u -> u.getRoles().stream()
                        .anyMatch(r -> r.getName().equalsIgnoreCase(RoleType.CUSTOMER.toString())))
                .collect(Collectors.toList());
        Long totalPages = this.userDAO.getTotalPage(pageSize);
        // Gửi danh sách sản phẩm đến trang JSP
        request.setAttribute("users", users);
        request.setAttribute("totalPages", totalPages);
        request.setAttribute("currentPage", currentPage);
        request.setAttribute("pageSize", pageSize);
        request.setAttribute("keyword", keyword);
        request.setAttribute("orderBy", orderBy);
        dispatcher.forward(request, response);
    }

    @Override
    public UserModel findUserById(Long id) {
        if(id == null) {
            return null;
        }
        try{
            UserModel user = userDAO.getUserById(id);
            if(user != null) {
                user.setRoles(roleDAO.findListRoleByUserId(user.getId()));
            }
            return user;
        }catch (Exception e){
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public void lockUser(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        Long id = Long.parseLong(request.getParameter("id"));
        UserModel user = UserModel.builder().id(id).build();
        user.setStatus(UserStatus.INACTIVE);
        UserModel isSuccess = userDAO.update(user);

        if (isSuccess != null) {
            request.setAttribute("mesage","Cập nhật thành công id: "+id);
        }else {
            request.setAttribute("message", "Cập nhật thất bại");
        }

        this.displayListUsers(request,response);
    }

    @Override
    public void detailUser(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        Long id = Long.parseLong(request.getParameter("id"));
        UserModel userModel = null;
        if(id != null) {
            userModel = this.findUserById(id);
        }
        if(userModel != null) {
            request.setAttribute("user", userModel);
            request.getRequestDispatcher("/admin/customer/user-detail.jsp").forward(request, response);
        }
    }

    @Override
    public void unlockUser(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        Long id = Long.parseLong(request.getParameter("id"));
        UserModel user = UserModel.builder().id(id).build();
        user.setStatus(UserStatus.ACTIVE);
        UserModel isSuccess = userDAO.update(user);

        if (isSuccess != null) {
            request.setAttribute("mesage","Cập nhật thành công id: "+id);
        }else {
            request.setAttribute("message", "Cập nhật thất bại");
        }

        this.displayListUsers(request,response);
    }

    @Override
    public void verifyOtp(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String email = request.getParameter("email");
        String otp = request.getParameter("otp");
        Boolean verify = otpDAO.verifyOtp(email.trim(), otp.trim());
        if(verify) {
            UserModel user = userDAO.getUserByEmail(email);
            user.setStatus(UserStatus.ACTIVE);
            roleDAO.setRoleToUser(RoleType.CUSTOMER, user.getId());
            userDAO.update(user);
            request.setAttribute("message", "Kích hoạt tài khoản thành công");
        }else {
            request.setAttribute("message", "Mã OTP không chính xác");
            request.getRequestDispatcher("/frontend/login.jsp").forward(request, response);
        }
        request.getRequestDispatcher("/frontend/login.jsp").forward(request, response);
    }
    @Override
    public boolean verifyOTPHash(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String email = request.getParameter("email");
        String otp = request.getParameter("otp");
        System.out.println(otp);
        return otpDAO.verifyOtpHash(email.trim(), otp.trim());
    }
        //        if(verify) {
//            UserModel user = userDAO.getUserByEmail(email);
//            user.setStatus(UserStatus.ACTIVE);
//            roleDAO.setRoleToUser(RoleType.CUSTOMER, user.getId());
//            userDAO.update(user);
//            request.setAttribute("message", "Đặt lại mật khẩu thành công");
//        }else {
//            request.setAttribute("message", "Mã OTP không chính xác");
//            request.getRequestDispatcher("/frontend/forgot-password.jsp").forward(request, response);
//        }
//        request.getRequestDispatcher("/frontend/forgot-password.jsp").forward(request, response);



    @Override
    public void updateProfile(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        UserModel user = (UserModel) request.getSession().getAttribute("user");
        AddressModel addressModel = addressDAO.findAddressById(user.getId());

        String fullName = request.getParameter("fullname");
        String gender = request.getParameter("gender");
        String email = request.getParameter("email");
        String phone = request.getParameter("phone");
        String dob = request.getParameter("dob");

        Long addressId = Long.parseLong(request.getParameter("address"));


        // Cập nhật thông tin người dùng
        user.setFullName(fullName);
        user.setGender(Gender.valueOf(gender));
        user.setEmail(email);
        user.setPhone(phone);
        user.setDateOfBirth(LocalDate.parse(dob));
        List<AddressModel> addresses = addressDAO.findByUserId(user.getId());
        for (AddressModel addr : addresses) {
            addr.setIsDefault(addr.getId().equals(addressId));
            addressDAO.update(addr);
        }


        UserModel isUpdated = userDAO.update(user);

        if (isUpdated != null) {
            request.getSession().setAttribute("successMessage", "Cập nhật hồ sơ thành công!");
        } else {
            request.getSession().setAttribute("errorMessage", "Cập nhật hồ sơ thất bại!");
        }
        response.sendRedirect(request.getContextPath() + "/profile");

    }

    @Override
    public void profile(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // Giả sử thông tin user đã được lưu trong session sau khi đăng nhập
        UserModel user = (UserModel) request.getSession().getAttribute("user");
        List<AddressModel>  addresss = addressDAO.findByUserId(user.getId());

        if (user == null) {
            // Nếu chưa đăng nhập, chuyển hướng về trang đăng nhập
            response.sendRedirect("/login");
            return;
        }

        // Đưa thông tin user vào request để hiển thị trên JSP
        request.setAttribute("user", user);
        request.setAttribute("addresss", addresss);
        try {
            request.getRequestDispatcher("/frontend/profile.jsp").forward(request, response);
        } catch (ServletException e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public boolean updateUserPassword(UserModel user) {
        return userDAO.updateUserPassword(user);
    }

    @Override
    public void addAddress(HttpServletRequest request, HttpServletResponse response) throws IOException {
        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");
        UserModel user = (UserModel) request.getSession().getAttribute("user");
        String recipientName = user.getFullName();
        String recipientPhone = user.getPhone();
        String city = request.getParameter("city");
        String district = request.getParameter("district");
        String ward = request.getParameter("ward");
        String note = request.getParameter("note");
        Boolean isDefault = Boolean.parseBoolean(request.getParameter("setDefault"));

        AddressModel address = AddressModel.builder()
                .userId(user.getId())
                .recipientName(recipientName)
                .recipientPhone(recipientPhone)
                .city(city)
                .district(district)
                .ward(ward)
                .note(note)
                .isDefault(isDefault)
                .isActive(true)
                .build();

        Long savedAddress = addressDAO.save(address);
        if (isDefault) {
            List<AddressModel> addresses = addressDAO.findByUserId(user.getId());
            for (AddressModel addr : addresses) {
                if (!addr.getId().equals(savedAddress)) {
                    addr.setIsDefault(false);
                    addressDAO.update(addr);
                }
            }
        }
        if (savedAddress != null) {
            response.getWriter().write("{\"success\": true}");
        } else {
            response.getWriter().write("{\"success\": false, \"message\": \"Failed to add address.\"}");

        }
    }

    @Override
    public void uploadAvatar(HttpServletRequest request, HttpServletResponse response, Part filePart) throws IOException {
        UserModel user = (UserModel) request.getSession().getAttribute("user");

        if (user == null) {
            response.sendRedirect("login.jsp");
            return;
        }

        // Đọc dữ liệu ảnh và chuyển thành Base64
        InputStream inputStream = filePart.getInputStream();
        byte[] imageData = inputStream.readAllBytes();
        String base64Image = Base64.getEncoder().encodeToString(imageData);

        // Lưu Base64 vào database
        userDAO.updateAvatar(user.getId(), base64Image);

        // Cập nhật session
        user.setAvatar(base64Image);
        request.getSession().setAttribute("user", user);

        response.sendRedirect("profile");
    }

    @Override
    public void showAvatar(HttpServletRequest request, HttpServletResponse response) throws IOException {
        int userId = Integer.parseInt(request.getParameter("userId"));
        String base64Image = userDAO.getAvatar(userId);

        if (base64Image != null) {
            response.setContentType("text/plain"); // Trả về chuỗi Base64
            response.getWriter().write(base64Image);
        }
    }

    @Override
    public boolean forgotPassword(String email, String otp) {
        otp = otpDAO.generateOtp();
        UserModel user = userDAO.getUserByEmail(email);
        String hashedOtp = PasswordUtils.hashPassword(otp.trim());
        System.out.println("boolean so pass"+PasswordUtils.verifyPassword(otp.trim(), hashedOtp));
        if (user != null) {
            otpDAO.saveOtp(email,otp.trim());
            ExecutorService executorService = Executors.newSingleThreadExecutor();
            executorService.submit(() -> {
                SendEmail.forgotPassword(email, hashedOtp);
            });
            executorService.shutdown();
            return true;
        }
        return false;
    }

    public Long authenticate(String email, String password) {
        UserModel user = userDAO.getUserByEmail(email);
        if (user != null && BCrypt.checkpw(password, user.getPassword())) {
            return user.getId();
        }
        return null;
    }
}

================
File: service/impl/WishlistServiceImpl.java
================
package vn.edu.hcmuaf.fit.myphamstore.service.impl;

import jakarta.inject.Inject;
import vn.edu.hcmuaf.fit.myphamstore.dao.IWishlistDAO;
import vn.edu.hcmuaf.fit.myphamstore.model.ProductModel;
import vn.edu.hcmuaf.fit.myphamstore.service.IWishlistService;

import java.util.List;

public class WishlistServiceImpl implements IWishlistService {
    @Inject
    private IWishlistDAO wishlistDao;

    @Override
    public List<ProductModel> getWishlistByUserId(Long userId) {
        return wishlistDao.getWishlistByUserId(userId);
    }


    @Override
    public void addToWishlist(long userId, long productId) {
        if (!isProductInWishlist(userId, productId)) {
            wishlistDao.addToWishlist(userId, productId);
        }
    }

    public boolean isProductInWishlist(long userId, long productId) {
        List<ProductModel> wishlist = wishlistDao.getWishlistByUserId(userId);
        for (ProductModel product : wishlist) {
            if (product.getId() == productId) {
                return true;
            }
        }
        return false;
    }


    public List<ProductModel> getWishlistByUserId(Long userId, int currentPage, int pageSize) {
        int offset = (currentPage - 1) * pageSize;
        return wishlistDao.getWishlistByUserId(userId, pageSize, offset);
    }

    public int getWishlistCountByUserId(Long userId) {
        return wishlistDao.getWishlistCountByUserId(userId);
    }

    @Override
    public void removeFromWishlist(Long userId, long productId) {
        wishlistDao.removeFromWishlist(userId, productId);
    }

}

================
File: service/IOrderService.java
================
package vn.edu.hcmuaf.fit.myphamstore.service;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import vn.edu.hcmuaf.fit.myphamstore.model.OrderDetailModel;
import vn.edu.hcmuaf.fit.myphamstore.model.OrderModel;
import vn.edu.hcmuaf.fit.myphamstore.model.ProductModel;

import java.io.IOException;
import java.util.List;

public interface IOrderService {
    void displayOrders(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException;
    void displayOrderDetail(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException;
    Long getTotalPage(int numOfItems);
    Long getTotalOrder();
    OrderModel findOrderById(Long id);
    List<OrderModel> getOrdersWithPaging(String keyword,int currentPage, int pageSize, String orderBy);

    List<OrderDetailModel> getOrderDetailsByOrderId(Long orderId);


    List<OrderModel> getOrderHistoryByUserId(Long userId, int currentPage, int pageSize);

    void changeStatus(HttpServletRequest req, HttpServletResponse resp) throws IOException;

    List<ProductModel> getProductByOrderDetail(OrderDetailModel orderDetail);
}

================
File: service/IProductImageService.java
================
package vn.edu.hcmuaf.fit.myphamstore.service;
import vn.edu.hcmuaf.fit.myphamstore.model.ProductImageModel;

import java.util.List;

public interface IProductImageService {
    ProductImageModel findProductImageById(Long id);
    List<ProductImageModel> pagingProductImage(String keyword, int currentPage, int pageSize, String orderBy);
    Long getTotalPage(int numOfItem);
}

================
File: service/IProductService.java
================
package vn.edu.hcmuaf.fit.myphamstore.service;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import vn.edu.hcmuaf.fit.myphamstore.model.*;

import java.io.IOException;
import java.util.List;

public interface IProductService {
    Long getTotalPage(int numOfItems);
    List<ProductModel> getProductsWithPaging(String keyword,int currentPage, int pageSize, String orderBy);
    Long getTotalProduct();
    void stopBuying( HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;
    void startBuying( HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;
    void displayProduct(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;
    void addProduct(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;
    void updateProduct(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;
    List<ProductModel> getProductsByCategory(long l);
    List<ProductModel> getLatestProducts();
    ProductModel findProductById(Long id);

    ProductModel getProductDetail(Long id);
    BrandModel getBrandById(Long brandId);

   List<ProductImageModel> getProductImageById(Long id);

    List<ReviewModel> getReviewsByProductId(Long id);

    void executeAddProduct(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;
    void executeUpdateProduct(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;
    List<ProductModel> getFilteredProducts(String keyword, List<String> categories, List<String> brands, String priceRange, int currentPage, int pageSize, String orderBy);
    List<ProductVariant> getProductVariantsByProductId(Long id);


    List<ProductModel> findProduct(Long orderDetailId);
}

================
File: service/IReviewService.java
================
package vn.edu.hcmuaf.fit.myphamstore.service;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import vn.edu.hcmuaf.fit.myphamstore.model.ReviewModel;

import java.io.IOException;
import java.util.List;

public interface IReviewService {
    ReviewModel findReviewById(Long id);
    ReviewModel getReviewDetail(Long id);
    List<ReviewModel> getAllReviewsByProductId(Long id);
    List<ReviewModel> pagingReview(String keyword, int currentPage, int pageSize, String orderBy);

    void addReview(HttpServletRequest req, HttpServletResponse resp) throws IOException;
}

================
File: service/ISlideService.java
================
package vn.edu.hcmuaf.fit.myphamstore.service;

import vn.edu.hcmuaf.fit.myphamstore.model.SlideModel;

import java.util.List;

public interface ISlideService {
    SlideModel findSlideById(Long id);
    List<SlideModel> pagingSlide(String keyword,int currentPage, int pageSize, String orderBy);
    Long getTotalPage(int numOfItem);
    void save(SlideModel slideModel);
    void delete(SlideModel id);
    List<SlideModel> findAll();

    void deleteAll();
}

================
File: service/IUserService.java
================
package vn.edu.hcmuaf.fit.myphamstore.service;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.Part;
import vn.edu.hcmuaf.fit.myphamstore.model.UserModel;

import java.io.IOException;
import java.util.List;


public interface IUserService {
    List<UserModel> getUsersWithPaging(String keyword,int currentPage, int pageSize, String orderBy);
    boolean checkLogin(String email, String password);
    UserModel findUserByEmail(String email);
    void login(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException;
    void logout(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException;
    void changePassword(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException;
    void register(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException;
    void displayListUsers(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException;
    UserModel findUserById(Long id);
    void lockUser(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;
    void detailUser(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;
    void unlockUser(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;
    void verifyOtp(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;
    boolean verifyOTPHash(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;

    void updateProfile(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;
    void profile(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;

    boolean updateUserPassword(UserModel user);

    void addAddress(HttpServletRequest request, HttpServletResponse response) throws IOException;

    void uploadAvatar(HttpServletRequest request, HttpServletResponse response, Part filePart) throws IOException;

    void showAvatar(HttpServletRequest request, HttpServletResponse response) throws IOException;

    boolean forgotPassword(String email, String otp);
}

================
File: service/IWishlistService.java
================
package vn.edu.hcmuaf.fit.myphamstore.service;

import vn.edu.hcmuaf.fit.myphamstore.model.ProductModel;
import vn.edu.hcmuaf.fit.myphamstore.model.WishlistModel;

import java.util.List;

public interface IWishlistService {
    List<ProductModel> getWishlistByUserId(Long userId);
    void addToWishlist(long userId, long productId);
    void removeFromWishlist(Long userId, long productId);

    int getWishlistCountByUserId(Long id);
}



================================================================
End of Codebase
================================================================
